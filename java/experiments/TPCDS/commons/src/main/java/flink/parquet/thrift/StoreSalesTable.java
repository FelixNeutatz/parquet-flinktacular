/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flink.parquet.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-28")
public class StoreSalesTable implements org.apache.thrift.TBase<StoreSalesTable, StoreSalesTable._Fields>, java.io.Serializable, Cloneable, Comparable<StoreSalesTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StoreSalesTable");

  private static final org.apache.thrift.protocol.TField SS_SOLD_DATE_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_sold_date_sk", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SS_SOLD_TIME_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_sold_time_sk", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SS_ITEM_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_item_sk", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SS_CUSTOMER_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_customer_sk", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SS_CDEMO_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_cdemo_sk", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SS_HDEMO_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_hdemo_sk", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SS_ADDR_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_addr_sk", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SS_STORE_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_store_sk", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SS_PROMO_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_promo_sk", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SS_TICKET_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_ticket_number", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SS_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_quantity", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SS_WHOLESALE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_wholesale_cost", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SS_LIST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_list_price", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SS_SALES_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_sales_price", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField SS_EXT_DISCOUNT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_ext_discount_amt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField SS_EXT_SALES_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_ext_sales_price", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField SS_EXT_WHOLESALE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_ext_wholesale_cost", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField SS_EXT_LIST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_ext_list_price", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField SS_EXT_TAX_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_ext_tax", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField SS_COUPON_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_coupon_amt", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField SS_NET_PAID_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_net_paid", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField SS_NET_PAID_INC_TAX_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_net_paid_inc_tax", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SS_NET_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("ss_net_profit", org.apache.thrift.protocol.TType.DOUBLE, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StoreSalesTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StoreSalesTableTupleSchemeFactory());
  }

  public long ss_sold_date_sk; // optional
  public long ss_sold_time_sk; // optional
  public long ss_item_sk; // optional
  public long ss_customer_sk; // optional
  public long ss_cdemo_sk; // optional
  public long ss_hdemo_sk; // optional
  public long ss_addr_sk; // optional
  public long ss_store_sk; // optional
  public long ss_promo_sk; // optional
  public long ss_ticket_number; // optional
  public long ss_quantity; // optional
  public double ss_wholesale_cost; // optional
  public double ss_list_price; // optional
  public double ss_sales_price; // optional
  public double ss_ext_discount_amt; // optional
  public double ss_ext_sales_price; // optional
  public double ss_ext_wholesale_cost; // optional
  public double ss_ext_list_price; // optional
  public double ss_ext_tax; // optional
  public double ss_coupon_amt; // optional
  public double ss_net_paid; // optional
  public double ss_net_paid_inc_tax; // optional
  public double ss_net_profit; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SS_SOLD_DATE_SK((short)1, "ss_sold_date_sk"),
    SS_SOLD_TIME_SK((short)2, "ss_sold_time_sk"),
    SS_ITEM_SK((short)3, "ss_item_sk"),
    SS_CUSTOMER_SK((short)4, "ss_customer_sk"),
    SS_CDEMO_SK((short)5, "ss_cdemo_sk"),
    SS_HDEMO_SK((short)6, "ss_hdemo_sk"),
    SS_ADDR_SK((short)7, "ss_addr_sk"),
    SS_STORE_SK((short)8, "ss_store_sk"),
    SS_PROMO_SK((short)9, "ss_promo_sk"),
    SS_TICKET_NUMBER((short)10, "ss_ticket_number"),
    SS_QUANTITY((short)11, "ss_quantity"),
    SS_WHOLESALE_COST((short)12, "ss_wholesale_cost"),
    SS_LIST_PRICE((short)13, "ss_list_price"),
    SS_SALES_PRICE((short)14, "ss_sales_price"),
    SS_EXT_DISCOUNT_AMT((short)15, "ss_ext_discount_amt"),
    SS_EXT_SALES_PRICE((short)16, "ss_ext_sales_price"),
    SS_EXT_WHOLESALE_COST((short)17, "ss_ext_wholesale_cost"),
    SS_EXT_LIST_PRICE((short)18, "ss_ext_list_price"),
    SS_EXT_TAX((short)19, "ss_ext_tax"),
    SS_COUPON_AMT((short)20, "ss_coupon_amt"),
    SS_NET_PAID((short)21, "ss_net_paid"),
    SS_NET_PAID_INC_TAX((short)22, "ss_net_paid_inc_tax"),
    SS_NET_PROFIT((short)23, "ss_net_profit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SS_SOLD_DATE_SK
          return SS_SOLD_DATE_SK;
        case 2: // SS_SOLD_TIME_SK
          return SS_SOLD_TIME_SK;
        case 3: // SS_ITEM_SK
          return SS_ITEM_SK;
        case 4: // SS_CUSTOMER_SK
          return SS_CUSTOMER_SK;
        case 5: // SS_CDEMO_SK
          return SS_CDEMO_SK;
        case 6: // SS_HDEMO_SK
          return SS_HDEMO_SK;
        case 7: // SS_ADDR_SK
          return SS_ADDR_SK;
        case 8: // SS_STORE_SK
          return SS_STORE_SK;
        case 9: // SS_PROMO_SK
          return SS_PROMO_SK;
        case 10: // SS_TICKET_NUMBER
          return SS_TICKET_NUMBER;
        case 11: // SS_QUANTITY
          return SS_QUANTITY;
        case 12: // SS_WHOLESALE_COST
          return SS_WHOLESALE_COST;
        case 13: // SS_LIST_PRICE
          return SS_LIST_PRICE;
        case 14: // SS_SALES_PRICE
          return SS_SALES_PRICE;
        case 15: // SS_EXT_DISCOUNT_AMT
          return SS_EXT_DISCOUNT_AMT;
        case 16: // SS_EXT_SALES_PRICE
          return SS_EXT_SALES_PRICE;
        case 17: // SS_EXT_WHOLESALE_COST
          return SS_EXT_WHOLESALE_COST;
        case 18: // SS_EXT_LIST_PRICE
          return SS_EXT_LIST_PRICE;
        case 19: // SS_EXT_TAX
          return SS_EXT_TAX;
        case 20: // SS_COUPON_AMT
          return SS_COUPON_AMT;
        case 21: // SS_NET_PAID
          return SS_NET_PAID;
        case 22: // SS_NET_PAID_INC_TAX
          return SS_NET_PAID_INC_TAX;
        case 23: // SS_NET_PROFIT
          return SS_NET_PROFIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SS_SOLD_DATE_SK_ISSET_ID = 0;
  private static final int __SS_SOLD_TIME_SK_ISSET_ID = 1;
  private static final int __SS_ITEM_SK_ISSET_ID = 2;
  private static final int __SS_CUSTOMER_SK_ISSET_ID = 3;
  private static final int __SS_CDEMO_SK_ISSET_ID = 4;
  private static final int __SS_HDEMO_SK_ISSET_ID = 5;
  private static final int __SS_ADDR_SK_ISSET_ID = 6;
  private static final int __SS_STORE_SK_ISSET_ID = 7;
  private static final int __SS_PROMO_SK_ISSET_ID = 8;
  private static final int __SS_TICKET_NUMBER_ISSET_ID = 9;
  private static final int __SS_QUANTITY_ISSET_ID = 10;
  private static final int __SS_WHOLESALE_COST_ISSET_ID = 11;
  private static final int __SS_LIST_PRICE_ISSET_ID = 12;
  private static final int __SS_SALES_PRICE_ISSET_ID = 13;
  private static final int __SS_EXT_DISCOUNT_AMT_ISSET_ID = 14;
  private static final int __SS_EXT_SALES_PRICE_ISSET_ID = 15;
  private static final int __SS_EXT_WHOLESALE_COST_ISSET_ID = 16;
  private static final int __SS_EXT_LIST_PRICE_ISSET_ID = 17;
  private static final int __SS_EXT_TAX_ISSET_ID = 18;
  private static final int __SS_COUPON_AMT_ISSET_ID = 19;
  private static final int __SS_NET_PAID_ISSET_ID = 20;
  private static final int __SS_NET_PAID_INC_TAX_ISSET_ID = 21;
  private static final int __SS_NET_PROFIT_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SS_SOLD_DATE_SK,_Fields.SS_SOLD_TIME_SK,_Fields.SS_ITEM_SK,_Fields.SS_CUSTOMER_SK,_Fields.SS_CDEMO_SK,_Fields.SS_HDEMO_SK,_Fields.SS_ADDR_SK,_Fields.SS_STORE_SK,_Fields.SS_PROMO_SK,_Fields.SS_TICKET_NUMBER,_Fields.SS_QUANTITY,_Fields.SS_WHOLESALE_COST,_Fields.SS_LIST_PRICE,_Fields.SS_SALES_PRICE,_Fields.SS_EXT_DISCOUNT_AMT,_Fields.SS_EXT_SALES_PRICE,_Fields.SS_EXT_WHOLESALE_COST,_Fields.SS_EXT_LIST_PRICE,_Fields.SS_EXT_TAX,_Fields.SS_COUPON_AMT,_Fields.SS_NET_PAID,_Fields.SS_NET_PAID_INC_TAX,_Fields.SS_NET_PROFIT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SS_SOLD_DATE_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_sold_date_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_SOLD_TIME_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_sold_time_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_ITEM_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_item_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_CUSTOMER_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_customer_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_CDEMO_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_cdemo_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_HDEMO_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_hdemo_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_ADDR_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_addr_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_STORE_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_store_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_PROMO_SK, new org.apache.thrift.meta_data.FieldMetaData("ss_promo_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_TICKET_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ss_ticket_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("ss_quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SS_WHOLESALE_COST, new org.apache.thrift.meta_data.FieldMetaData("ss_wholesale_cost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_LIST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ss_list_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_SALES_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ss_sales_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_EXT_DISCOUNT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ss_ext_discount_amt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_EXT_SALES_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ss_ext_sales_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_EXT_WHOLESALE_COST, new org.apache.thrift.meta_data.FieldMetaData("ss_ext_wholesale_cost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_EXT_LIST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ss_ext_list_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_EXT_TAX, new org.apache.thrift.meta_data.FieldMetaData("ss_ext_tax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_COUPON_AMT, new org.apache.thrift.meta_data.FieldMetaData("ss_coupon_amt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_NET_PAID, new org.apache.thrift.meta_data.FieldMetaData("ss_net_paid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_NET_PAID_INC_TAX, new org.apache.thrift.meta_data.FieldMetaData("ss_net_paid_inc_tax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS_NET_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("ss_net_profit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StoreSalesTable.class, metaDataMap);
  }

  public StoreSalesTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StoreSalesTable(StoreSalesTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ss_sold_date_sk = other.ss_sold_date_sk;
    this.ss_sold_time_sk = other.ss_sold_time_sk;
    this.ss_item_sk = other.ss_item_sk;
    this.ss_customer_sk = other.ss_customer_sk;
    this.ss_cdemo_sk = other.ss_cdemo_sk;
    this.ss_hdemo_sk = other.ss_hdemo_sk;
    this.ss_addr_sk = other.ss_addr_sk;
    this.ss_store_sk = other.ss_store_sk;
    this.ss_promo_sk = other.ss_promo_sk;
    this.ss_ticket_number = other.ss_ticket_number;
    this.ss_quantity = other.ss_quantity;
    this.ss_wholesale_cost = other.ss_wholesale_cost;
    this.ss_list_price = other.ss_list_price;
    this.ss_sales_price = other.ss_sales_price;
    this.ss_ext_discount_amt = other.ss_ext_discount_amt;
    this.ss_ext_sales_price = other.ss_ext_sales_price;
    this.ss_ext_wholesale_cost = other.ss_ext_wholesale_cost;
    this.ss_ext_list_price = other.ss_ext_list_price;
    this.ss_ext_tax = other.ss_ext_tax;
    this.ss_coupon_amt = other.ss_coupon_amt;
    this.ss_net_paid = other.ss_net_paid;
    this.ss_net_paid_inc_tax = other.ss_net_paid_inc_tax;
    this.ss_net_profit = other.ss_net_profit;
  }

  public StoreSalesTable deepCopy() {
    return new StoreSalesTable(this);
  }

  @Override
  public void clear() {
    setSs_sold_date_skIsSet(false);
    this.ss_sold_date_sk = 0;
    setSs_sold_time_skIsSet(false);
    this.ss_sold_time_sk = 0;
    setSs_item_skIsSet(false);
    this.ss_item_sk = 0;
    setSs_customer_skIsSet(false);
    this.ss_customer_sk = 0;
    setSs_cdemo_skIsSet(false);
    this.ss_cdemo_sk = 0;
    setSs_hdemo_skIsSet(false);
    this.ss_hdemo_sk = 0;
    setSs_addr_skIsSet(false);
    this.ss_addr_sk = 0;
    setSs_store_skIsSet(false);
    this.ss_store_sk = 0;
    setSs_promo_skIsSet(false);
    this.ss_promo_sk = 0;
    setSs_ticket_numberIsSet(false);
    this.ss_ticket_number = 0;
    setSs_quantityIsSet(false);
    this.ss_quantity = 0;
    setSs_wholesale_costIsSet(false);
    this.ss_wholesale_cost = 0.0;
    setSs_list_priceIsSet(false);
    this.ss_list_price = 0.0;
    setSs_sales_priceIsSet(false);
    this.ss_sales_price = 0.0;
    setSs_ext_discount_amtIsSet(false);
    this.ss_ext_discount_amt = 0.0;
    setSs_ext_sales_priceIsSet(false);
    this.ss_ext_sales_price = 0.0;
    setSs_ext_wholesale_costIsSet(false);
    this.ss_ext_wholesale_cost = 0.0;
    setSs_ext_list_priceIsSet(false);
    this.ss_ext_list_price = 0.0;
    setSs_ext_taxIsSet(false);
    this.ss_ext_tax = 0.0;
    setSs_coupon_amtIsSet(false);
    this.ss_coupon_amt = 0.0;
    setSs_net_paidIsSet(false);
    this.ss_net_paid = 0.0;
    setSs_net_paid_inc_taxIsSet(false);
    this.ss_net_paid_inc_tax = 0.0;
    setSs_net_profitIsSet(false);
    this.ss_net_profit = 0.0;
  }

  public long getSs_sold_date_sk() {
    return this.ss_sold_date_sk;
  }

  public StoreSalesTable setSs_sold_date_sk(long ss_sold_date_sk) {
    this.ss_sold_date_sk = ss_sold_date_sk;
    setSs_sold_date_skIsSet(true);
    return this;
  }

  public void unsetSs_sold_date_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_SOLD_DATE_SK_ISSET_ID);
  }

  /** Returns true if field ss_sold_date_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_sold_date_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_SOLD_DATE_SK_ISSET_ID);
  }

  public void setSs_sold_date_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_SOLD_DATE_SK_ISSET_ID, value);
  }

  public long getSs_sold_time_sk() {
    return this.ss_sold_time_sk;
  }

  public StoreSalesTable setSs_sold_time_sk(long ss_sold_time_sk) {
    this.ss_sold_time_sk = ss_sold_time_sk;
    setSs_sold_time_skIsSet(true);
    return this;
  }

  public void unsetSs_sold_time_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_SOLD_TIME_SK_ISSET_ID);
  }

  /** Returns true if field ss_sold_time_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_sold_time_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_SOLD_TIME_SK_ISSET_ID);
  }

  public void setSs_sold_time_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_SOLD_TIME_SK_ISSET_ID, value);
  }

  public long getSs_item_sk() {
    return this.ss_item_sk;
  }

  public StoreSalesTable setSs_item_sk(long ss_item_sk) {
    this.ss_item_sk = ss_item_sk;
    setSs_item_skIsSet(true);
    return this;
  }

  public void unsetSs_item_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_ITEM_SK_ISSET_ID);
  }

  /** Returns true if field ss_item_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_item_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_ITEM_SK_ISSET_ID);
  }

  public void setSs_item_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_ITEM_SK_ISSET_ID, value);
  }

  public long getSs_customer_sk() {
    return this.ss_customer_sk;
  }

  public StoreSalesTable setSs_customer_sk(long ss_customer_sk) {
    this.ss_customer_sk = ss_customer_sk;
    setSs_customer_skIsSet(true);
    return this;
  }

  public void unsetSs_customer_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_CUSTOMER_SK_ISSET_ID);
  }

  /** Returns true if field ss_customer_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_customer_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_CUSTOMER_SK_ISSET_ID);
  }

  public void setSs_customer_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_CUSTOMER_SK_ISSET_ID, value);
  }

  public long getSs_cdemo_sk() {
    return this.ss_cdemo_sk;
  }

  public StoreSalesTable setSs_cdemo_sk(long ss_cdemo_sk) {
    this.ss_cdemo_sk = ss_cdemo_sk;
    setSs_cdemo_skIsSet(true);
    return this;
  }

  public void unsetSs_cdemo_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_CDEMO_SK_ISSET_ID);
  }

  /** Returns true if field ss_cdemo_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_cdemo_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_CDEMO_SK_ISSET_ID);
  }

  public void setSs_cdemo_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_CDEMO_SK_ISSET_ID, value);
  }

  public long getSs_hdemo_sk() {
    return this.ss_hdemo_sk;
  }

  public StoreSalesTable setSs_hdemo_sk(long ss_hdemo_sk) {
    this.ss_hdemo_sk = ss_hdemo_sk;
    setSs_hdemo_skIsSet(true);
    return this;
  }

  public void unsetSs_hdemo_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_HDEMO_SK_ISSET_ID);
  }

  /** Returns true if field ss_hdemo_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_hdemo_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_HDEMO_SK_ISSET_ID);
  }

  public void setSs_hdemo_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_HDEMO_SK_ISSET_ID, value);
  }

  public long getSs_addr_sk() {
    return this.ss_addr_sk;
  }

  public StoreSalesTable setSs_addr_sk(long ss_addr_sk) {
    this.ss_addr_sk = ss_addr_sk;
    setSs_addr_skIsSet(true);
    return this;
  }

  public void unsetSs_addr_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_ADDR_SK_ISSET_ID);
  }

  /** Returns true if field ss_addr_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_addr_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_ADDR_SK_ISSET_ID);
  }

  public void setSs_addr_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_ADDR_SK_ISSET_ID, value);
  }

  public long getSs_store_sk() {
    return this.ss_store_sk;
  }

  public StoreSalesTable setSs_store_sk(long ss_store_sk) {
    this.ss_store_sk = ss_store_sk;
    setSs_store_skIsSet(true);
    return this;
  }

  public void unsetSs_store_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_STORE_SK_ISSET_ID);
  }

  /** Returns true if field ss_store_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_store_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_STORE_SK_ISSET_ID);
  }

  public void setSs_store_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_STORE_SK_ISSET_ID, value);
  }

  public long getSs_promo_sk() {
    return this.ss_promo_sk;
  }

  public StoreSalesTable setSs_promo_sk(long ss_promo_sk) {
    this.ss_promo_sk = ss_promo_sk;
    setSs_promo_skIsSet(true);
    return this;
  }

  public void unsetSs_promo_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_PROMO_SK_ISSET_ID);
  }

  /** Returns true if field ss_promo_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_promo_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_PROMO_SK_ISSET_ID);
  }

  public void setSs_promo_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_PROMO_SK_ISSET_ID, value);
  }

  public long getSs_ticket_number() {
    return this.ss_ticket_number;
  }

  public StoreSalesTable setSs_ticket_number(long ss_ticket_number) {
    this.ss_ticket_number = ss_ticket_number;
    setSs_ticket_numberIsSet(true);
    return this;
  }

  public void unsetSs_ticket_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_TICKET_NUMBER_ISSET_ID);
  }

  /** Returns true if field ss_ticket_number is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_ticket_number() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_TICKET_NUMBER_ISSET_ID);
  }

  public void setSs_ticket_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_TICKET_NUMBER_ISSET_ID, value);
  }

  public long getSs_quantity() {
    return this.ss_quantity;
  }

  public StoreSalesTable setSs_quantity(long ss_quantity) {
    this.ss_quantity = ss_quantity;
    setSs_quantityIsSet(true);
    return this;
  }

  public void unsetSs_quantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_QUANTITY_ISSET_ID);
  }

  /** Returns true if field ss_quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_quantity() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_QUANTITY_ISSET_ID);
  }

  public void setSs_quantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_QUANTITY_ISSET_ID, value);
  }

  public double getSs_wholesale_cost() {
    return this.ss_wholesale_cost;
  }

  public StoreSalesTable setSs_wholesale_cost(double ss_wholesale_cost) {
    this.ss_wholesale_cost = ss_wholesale_cost;
    setSs_wholesale_costIsSet(true);
    return this;
  }

  public void unsetSs_wholesale_cost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_WHOLESALE_COST_ISSET_ID);
  }

  /** Returns true if field ss_wholesale_cost is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_wholesale_cost() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_WHOLESALE_COST_ISSET_ID);
  }

  public void setSs_wholesale_costIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_WHOLESALE_COST_ISSET_ID, value);
  }

  public double getSs_list_price() {
    return this.ss_list_price;
  }

  public StoreSalesTable setSs_list_price(double ss_list_price) {
    this.ss_list_price = ss_list_price;
    setSs_list_priceIsSet(true);
    return this;
  }

  public void unsetSs_list_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_LIST_PRICE_ISSET_ID);
  }

  /** Returns true if field ss_list_price is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_list_price() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_LIST_PRICE_ISSET_ID);
  }

  public void setSs_list_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_LIST_PRICE_ISSET_ID, value);
  }

  public double getSs_sales_price() {
    return this.ss_sales_price;
  }

  public StoreSalesTable setSs_sales_price(double ss_sales_price) {
    this.ss_sales_price = ss_sales_price;
    setSs_sales_priceIsSet(true);
    return this;
  }

  public void unsetSs_sales_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_SALES_PRICE_ISSET_ID);
  }

  /** Returns true if field ss_sales_price is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_sales_price() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_SALES_PRICE_ISSET_ID);
  }

  public void setSs_sales_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_SALES_PRICE_ISSET_ID, value);
  }

  public double getSs_ext_discount_amt() {
    return this.ss_ext_discount_amt;
  }

  public StoreSalesTable setSs_ext_discount_amt(double ss_ext_discount_amt) {
    this.ss_ext_discount_amt = ss_ext_discount_amt;
    setSs_ext_discount_amtIsSet(true);
    return this;
  }

  public void unsetSs_ext_discount_amt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_EXT_DISCOUNT_AMT_ISSET_ID);
  }

  /** Returns true if field ss_ext_discount_amt is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_ext_discount_amt() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_EXT_DISCOUNT_AMT_ISSET_ID);
  }

  public void setSs_ext_discount_amtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_EXT_DISCOUNT_AMT_ISSET_ID, value);
  }

  public double getSs_ext_sales_price() {
    return this.ss_ext_sales_price;
  }

  public StoreSalesTable setSs_ext_sales_price(double ss_ext_sales_price) {
    this.ss_ext_sales_price = ss_ext_sales_price;
    setSs_ext_sales_priceIsSet(true);
    return this;
  }

  public void unsetSs_ext_sales_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_EXT_SALES_PRICE_ISSET_ID);
  }

  /** Returns true if field ss_ext_sales_price is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_ext_sales_price() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_EXT_SALES_PRICE_ISSET_ID);
  }

  public void setSs_ext_sales_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_EXT_SALES_PRICE_ISSET_ID, value);
  }

  public double getSs_ext_wholesale_cost() {
    return this.ss_ext_wholesale_cost;
  }

  public StoreSalesTable setSs_ext_wholesale_cost(double ss_ext_wholesale_cost) {
    this.ss_ext_wholesale_cost = ss_ext_wholesale_cost;
    setSs_ext_wholesale_costIsSet(true);
    return this;
  }

  public void unsetSs_ext_wholesale_cost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_EXT_WHOLESALE_COST_ISSET_ID);
  }

  /** Returns true if field ss_ext_wholesale_cost is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_ext_wholesale_cost() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_EXT_WHOLESALE_COST_ISSET_ID);
  }

  public void setSs_ext_wholesale_costIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_EXT_WHOLESALE_COST_ISSET_ID, value);
  }

  public double getSs_ext_list_price() {
    return this.ss_ext_list_price;
  }

  public StoreSalesTable setSs_ext_list_price(double ss_ext_list_price) {
    this.ss_ext_list_price = ss_ext_list_price;
    setSs_ext_list_priceIsSet(true);
    return this;
  }

  public void unsetSs_ext_list_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_EXT_LIST_PRICE_ISSET_ID);
  }

  /** Returns true if field ss_ext_list_price is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_ext_list_price() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_EXT_LIST_PRICE_ISSET_ID);
  }

  public void setSs_ext_list_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_EXT_LIST_PRICE_ISSET_ID, value);
  }

  public double getSs_ext_tax() {
    return this.ss_ext_tax;
  }

  public StoreSalesTable setSs_ext_tax(double ss_ext_tax) {
    this.ss_ext_tax = ss_ext_tax;
    setSs_ext_taxIsSet(true);
    return this;
  }

  public void unsetSs_ext_tax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_EXT_TAX_ISSET_ID);
  }

  /** Returns true if field ss_ext_tax is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_ext_tax() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_EXT_TAX_ISSET_ID);
  }

  public void setSs_ext_taxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_EXT_TAX_ISSET_ID, value);
  }

  public double getSs_coupon_amt() {
    return this.ss_coupon_amt;
  }

  public StoreSalesTable setSs_coupon_amt(double ss_coupon_amt) {
    this.ss_coupon_amt = ss_coupon_amt;
    setSs_coupon_amtIsSet(true);
    return this;
  }

  public void unsetSs_coupon_amt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_COUPON_AMT_ISSET_ID);
  }

  /** Returns true if field ss_coupon_amt is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_coupon_amt() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_COUPON_AMT_ISSET_ID);
  }

  public void setSs_coupon_amtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_COUPON_AMT_ISSET_ID, value);
  }

  public double getSs_net_paid() {
    return this.ss_net_paid;
  }

  public StoreSalesTable setSs_net_paid(double ss_net_paid) {
    this.ss_net_paid = ss_net_paid;
    setSs_net_paidIsSet(true);
    return this;
  }

  public void unsetSs_net_paid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_NET_PAID_ISSET_ID);
  }

  /** Returns true if field ss_net_paid is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_net_paid() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_NET_PAID_ISSET_ID);
  }

  public void setSs_net_paidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_NET_PAID_ISSET_ID, value);
  }

  public double getSs_net_paid_inc_tax() {
    return this.ss_net_paid_inc_tax;
  }

  public StoreSalesTable setSs_net_paid_inc_tax(double ss_net_paid_inc_tax) {
    this.ss_net_paid_inc_tax = ss_net_paid_inc_tax;
    setSs_net_paid_inc_taxIsSet(true);
    return this;
  }

  public void unsetSs_net_paid_inc_tax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_NET_PAID_INC_TAX_ISSET_ID);
  }

  /** Returns true if field ss_net_paid_inc_tax is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_net_paid_inc_tax() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_NET_PAID_INC_TAX_ISSET_ID);
  }

  public void setSs_net_paid_inc_taxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_NET_PAID_INC_TAX_ISSET_ID, value);
  }

  public double getSs_net_profit() {
    return this.ss_net_profit;
  }

  public StoreSalesTable setSs_net_profit(double ss_net_profit) {
    this.ss_net_profit = ss_net_profit;
    setSs_net_profitIsSet(true);
    return this;
  }

  public void unsetSs_net_profit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SS_NET_PROFIT_ISSET_ID);
  }

  /** Returns true if field ss_net_profit is set (has been assigned a value) and false otherwise */
  public boolean isSetSs_net_profit() {
    return EncodingUtils.testBit(__isset_bitfield, __SS_NET_PROFIT_ISSET_ID);
  }

  public void setSs_net_profitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SS_NET_PROFIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SS_SOLD_DATE_SK:
      if (value == null) {
        unsetSs_sold_date_sk();
      } else {
        setSs_sold_date_sk((Long)value);
      }
      break;

    case SS_SOLD_TIME_SK:
      if (value == null) {
        unsetSs_sold_time_sk();
      } else {
        setSs_sold_time_sk((Long)value);
      }
      break;

    case SS_ITEM_SK:
      if (value == null) {
        unsetSs_item_sk();
      } else {
        setSs_item_sk((Long)value);
      }
      break;

    case SS_CUSTOMER_SK:
      if (value == null) {
        unsetSs_customer_sk();
      } else {
        setSs_customer_sk((Long)value);
      }
      break;

    case SS_CDEMO_SK:
      if (value == null) {
        unsetSs_cdemo_sk();
      } else {
        setSs_cdemo_sk((Long)value);
      }
      break;

    case SS_HDEMO_SK:
      if (value == null) {
        unsetSs_hdemo_sk();
      } else {
        setSs_hdemo_sk((Long)value);
      }
      break;

    case SS_ADDR_SK:
      if (value == null) {
        unsetSs_addr_sk();
      } else {
        setSs_addr_sk((Long)value);
      }
      break;

    case SS_STORE_SK:
      if (value == null) {
        unsetSs_store_sk();
      } else {
        setSs_store_sk((Long)value);
      }
      break;

    case SS_PROMO_SK:
      if (value == null) {
        unsetSs_promo_sk();
      } else {
        setSs_promo_sk((Long)value);
      }
      break;

    case SS_TICKET_NUMBER:
      if (value == null) {
        unsetSs_ticket_number();
      } else {
        setSs_ticket_number((Long)value);
      }
      break;

    case SS_QUANTITY:
      if (value == null) {
        unsetSs_quantity();
      } else {
        setSs_quantity((Long)value);
      }
      break;

    case SS_WHOLESALE_COST:
      if (value == null) {
        unsetSs_wholesale_cost();
      } else {
        setSs_wholesale_cost((Double)value);
      }
      break;

    case SS_LIST_PRICE:
      if (value == null) {
        unsetSs_list_price();
      } else {
        setSs_list_price((Double)value);
      }
      break;

    case SS_SALES_PRICE:
      if (value == null) {
        unsetSs_sales_price();
      } else {
        setSs_sales_price((Double)value);
      }
      break;

    case SS_EXT_DISCOUNT_AMT:
      if (value == null) {
        unsetSs_ext_discount_amt();
      } else {
        setSs_ext_discount_amt((Double)value);
      }
      break;

    case SS_EXT_SALES_PRICE:
      if (value == null) {
        unsetSs_ext_sales_price();
      } else {
        setSs_ext_sales_price((Double)value);
      }
      break;

    case SS_EXT_WHOLESALE_COST:
      if (value == null) {
        unsetSs_ext_wholesale_cost();
      } else {
        setSs_ext_wholesale_cost((Double)value);
      }
      break;

    case SS_EXT_LIST_PRICE:
      if (value == null) {
        unsetSs_ext_list_price();
      } else {
        setSs_ext_list_price((Double)value);
      }
      break;

    case SS_EXT_TAX:
      if (value == null) {
        unsetSs_ext_tax();
      } else {
        setSs_ext_tax((Double)value);
      }
      break;

    case SS_COUPON_AMT:
      if (value == null) {
        unsetSs_coupon_amt();
      } else {
        setSs_coupon_amt((Double)value);
      }
      break;

    case SS_NET_PAID:
      if (value == null) {
        unsetSs_net_paid();
      } else {
        setSs_net_paid((Double)value);
      }
      break;

    case SS_NET_PAID_INC_TAX:
      if (value == null) {
        unsetSs_net_paid_inc_tax();
      } else {
        setSs_net_paid_inc_tax((Double)value);
      }
      break;

    case SS_NET_PROFIT:
      if (value == null) {
        unsetSs_net_profit();
      } else {
        setSs_net_profit((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SS_SOLD_DATE_SK:
      return Long.valueOf(getSs_sold_date_sk());

    case SS_SOLD_TIME_SK:
      return Long.valueOf(getSs_sold_time_sk());

    case SS_ITEM_SK:
      return Long.valueOf(getSs_item_sk());

    case SS_CUSTOMER_SK:
      return Long.valueOf(getSs_customer_sk());

    case SS_CDEMO_SK:
      return Long.valueOf(getSs_cdemo_sk());

    case SS_HDEMO_SK:
      return Long.valueOf(getSs_hdemo_sk());

    case SS_ADDR_SK:
      return Long.valueOf(getSs_addr_sk());

    case SS_STORE_SK:
      return Long.valueOf(getSs_store_sk());

    case SS_PROMO_SK:
      return Long.valueOf(getSs_promo_sk());

    case SS_TICKET_NUMBER:
      return Long.valueOf(getSs_ticket_number());

    case SS_QUANTITY:
      return Long.valueOf(getSs_quantity());

    case SS_WHOLESALE_COST:
      return Double.valueOf(getSs_wholesale_cost());

    case SS_LIST_PRICE:
      return Double.valueOf(getSs_list_price());

    case SS_SALES_PRICE:
      return Double.valueOf(getSs_sales_price());

    case SS_EXT_DISCOUNT_AMT:
      return Double.valueOf(getSs_ext_discount_amt());

    case SS_EXT_SALES_PRICE:
      return Double.valueOf(getSs_ext_sales_price());

    case SS_EXT_WHOLESALE_COST:
      return Double.valueOf(getSs_ext_wholesale_cost());

    case SS_EXT_LIST_PRICE:
      return Double.valueOf(getSs_ext_list_price());

    case SS_EXT_TAX:
      return Double.valueOf(getSs_ext_tax());

    case SS_COUPON_AMT:
      return Double.valueOf(getSs_coupon_amt());

    case SS_NET_PAID:
      return Double.valueOf(getSs_net_paid());

    case SS_NET_PAID_INC_TAX:
      return Double.valueOf(getSs_net_paid_inc_tax());

    case SS_NET_PROFIT:
      return Double.valueOf(getSs_net_profit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SS_SOLD_DATE_SK:
      return isSetSs_sold_date_sk();
    case SS_SOLD_TIME_SK:
      return isSetSs_sold_time_sk();
    case SS_ITEM_SK:
      return isSetSs_item_sk();
    case SS_CUSTOMER_SK:
      return isSetSs_customer_sk();
    case SS_CDEMO_SK:
      return isSetSs_cdemo_sk();
    case SS_HDEMO_SK:
      return isSetSs_hdemo_sk();
    case SS_ADDR_SK:
      return isSetSs_addr_sk();
    case SS_STORE_SK:
      return isSetSs_store_sk();
    case SS_PROMO_SK:
      return isSetSs_promo_sk();
    case SS_TICKET_NUMBER:
      return isSetSs_ticket_number();
    case SS_QUANTITY:
      return isSetSs_quantity();
    case SS_WHOLESALE_COST:
      return isSetSs_wholesale_cost();
    case SS_LIST_PRICE:
      return isSetSs_list_price();
    case SS_SALES_PRICE:
      return isSetSs_sales_price();
    case SS_EXT_DISCOUNT_AMT:
      return isSetSs_ext_discount_amt();
    case SS_EXT_SALES_PRICE:
      return isSetSs_ext_sales_price();
    case SS_EXT_WHOLESALE_COST:
      return isSetSs_ext_wholesale_cost();
    case SS_EXT_LIST_PRICE:
      return isSetSs_ext_list_price();
    case SS_EXT_TAX:
      return isSetSs_ext_tax();
    case SS_COUPON_AMT:
      return isSetSs_coupon_amt();
    case SS_NET_PAID:
      return isSetSs_net_paid();
    case SS_NET_PAID_INC_TAX:
      return isSetSs_net_paid_inc_tax();
    case SS_NET_PROFIT:
      return isSetSs_net_profit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StoreSalesTable)
      return this.equals((StoreSalesTable)that);
    return false;
  }

  public boolean equals(StoreSalesTable that) {
    if (that == null)
      return false;

    boolean this_present_ss_sold_date_sk = true && this.isSetSs_sold_date_sk();
    boolean that_present_ss_sold_date_sk = true && that.isSetSs_sold_date_sk();
    if (this_present_ss_sold_date_sk || that_present_ss_sold_date_sk) {
      if (!(this_present_ss_sold_date_sk && that_present_ss_sold_date_sk))
        return false;
      if (this.ss_sold_date_sk != that.ss_sold_date_sk)
        return false;
    }

    boolean this_present_ss_sold_time_sk = true && this.isSetSs_sold_time_sk();
    boolean that_present_ss_sold_time_sk = true && that.isSetSs_sold_time_sk();
    if (this_present_ss_sold_time_sk || that_present_ss_sold_time_sk) {
      if (!(this_present_ss_sold_time_sk && that_present_ss_sold_time_sk))
        return false;
      if (this.ss_sold_time_sk != that.ss_sold_time_sk)
        return false;
    }

    boolean this_present_ss_item_sk = true && this.isSetSs_item_sk();
    boolean that_present_ss_item_sk = true && that.isSetSs_item_sk();
    if (this_present_ss_item_sk || that_present_ss_item_sk) {
      if (!(this_present_ss_item_sk && that_present_ss_item_sk))
        return false;
      if (this.ss_item_sk != that.ss_item_sk)
        return false;
    }

    boolean this_present_ss_customer_sk = true && this.isSetSs_customer_sk();
    boolean that_present_ss_customer_sk = true && that.isSetSs_customer_sk();
    if (this_present_ss_customer_sk || that_present_ss_customer_sk) {
      if (!(this_present_ss_customer_sk && that_present_ss_customer_sk))
        return false;
      if (this.ss_customer_sk != that.ss_customer_sk)
        return false;
    }

    boolean this_present_ss_cdemo_sk = true && this.isSetSs_cdemo_sk();
    boolean that_present_ss_cdemo_sk = true && that.isSetSs_cdemo_sk();
    if (this_present_ss_cdemo_sk || that_present_ss_cdemo_sk) {
      if (!(this_present_ss_cdemo_sk && that_present_ss_cdemo_sk))
        return false;
      if (this.ss_cdemo_sk != that.ss_cdemo_sk)
        return false;
    }

    boolean this_present_ss_hdemo_sk = true && this.isSetSs_hdemo_sk();
    boolean that_present_ss_hdemo_sk = true && that.isSetSs_hdemo_sk();
    if (this_present_ss_hdemo_sk || that_present_ss_hdemo_sk) {
      if (!(this_present_ss_hdemo_sk && that_present_ss_hdemo_sk))
        return false;
      if (this.ss_hdemo_sk != that.ss_hdemo_sk)
        return false;
    }

    boolean this_present_ss_addr_sk = true && this.isSetSs_addr_sk();
    boolean that_present_ss_addr_sk = true && that.isSetSs_addr_sk();
    if (this_present_ss_addr_sk || that_present_ss_addr_sk) {
      if (!(this_present_ss_addr_sk && that_present_ss_addr_sk))
        return false;
      if (this.ss_addr_sk != that.ss_addr_sk)
        return false;
    }

    boolean this_present_ss_store_sk = true && this.isSetSs_store_sk();
    boolean that_present_ss_store_sk = true && that.isSetSs_store_sk();
    if (this_present_ss_store_sk || that_present_ss_store_sk) {
      if (!(this_present_ss_store_sk && that_present_ss_store_sk))
        return false;
      if (this.ss_store_sk != that.ss_store_sk)
        return false;
    }

    boolean this_present_ss_promo_sk = true && this.isSetSs_promo_sk();
    boolean that_present_ss_promo_sk = true && that.isSetSs_promo_sk();
    if (this_present_ss_promo_sk || that_present_ss_promo_sk) {
      if (!(this_present_ss_promo_sk && that_present_ss_promo_sk))
        return false;
      if (this.ss_promo_sk != that.ss_promo_sk)
        return false;
    }

    boolean this_present_ss_ticket_number = true && this.isSetSs_ticket_number();
    boolean that_present_ss_ticket_number = true && that.isSetSs_ticket_number();
    if (this_present_ss_ticket_number || that_present_ss_ticket_number) {
      if (!(this_present_ss_ticket_number && that_present_ss_ticket_number))
        return false;
      if (this.ss_ticket_number != that.ss_ticket_number)
        return false;
    }

    boolean this_present_ss_quantity = true && this.isSetSs_quantity();
    boolean that_present_ss_quantity = true && that.isSetSs_quantity();
    if (this_present_ss_quantity || that_present_ss_quantity) {
      if (!(this_present_ss_quantity && that_present_ss_quantity))
        return false;
      if (this.ss_quantity != that.ss_quantity)
        return false;
    }

    boolean this_present_ss_wholesale_cost = true && this.isSetSs_wholesale_cost();
    boolean that_present_ss_wholesale_cost = true && that.isSetSs_wholesale_cost();
    if (this_present_ss_wholesale_cost || that_present_ss_wholesale_cost) {
      if (!(this_present_ss_wholesale_cost && that_present_ss_wholesale_cost))
        return false;
      if (this.ss_wholesale_cost != that.ss_wholesale_cost)
        return false;
    }

    boolean this_present_ss_list_price = true && this.isSetSs_list_price();
    boolean that_present_ss_list_price = true && that.isSetSs_list_price();
    if (this_present_ss_list_price || that_present_ss_list_price) {
      if (!(this_present_ss_list_price && that_present_ss_list_price))
        return false;
      if (this.ss_list_price != that.ss_list_price)
        return false;
    }

    boolean this_present_ss_sales_price = true && this.isSetSs_sales_price();
    boolean that_present_ss_sales_price = true && that.isSetSs_sales_price();
    if (this_present_ss_sales_price || that_present_ss_sales_price) {
      if (!(this_present_ss_sales_price && that_present_ss_sales_price))
        return false;
      if (this.ss_sales_price != that.ss_sales_price)
        return false;
    }

    boolean this_present_ss_ext_discount_amt = true && this.isSetSs_ext_discount_amt();
    boolean that_present_ss_ext_discount_amt = true && that.isSetSs_ext_discount_amt();
    if (this_present_ss_ext_discount_amt || that_present_ss_ext_discount_amt) {
      if (!(this_present_ss_ext_discount_amt && that_present_ss_ext_discount_amt))
        return false;
      if (this.ss_ext_discount_amt != that.ss_ext_discount_amt)
        return false;
    }

    boolean this_present_ss_ext_sales_price = true && this.isSetSs_ext_sales_price();
    boolean that_present_ss_ext_sales_price = true && that.isSetSs_ext_sales_price();
    if (this_present_ss_ext_sales_price || that_present_ss_ext_sales_price) {
      if (!(this_present_ss_ext_sales_price && that_present_ss_ext_sales_price))
        return false;
      if (this.ss_ext_sales_price != that.ss_ext_sales_price)
        return false;
    }

    boolean this_present_ss_ext_wholesale_cost = true && this.isSetSs_ext_wholesale_cost();
    boolean that_present_ss_ext_wholesale_cost = true && that.isSetSs_ext_wholesale_cost();
    if (this_present_ss_ext_wholesale_cost || that_present_ss_ext_wholesale_cost) {
      if (!(this_present_ss_ext_wholesale_cost && that_present_ss_ext_wholesale_cost))
        return false;
      if (this.ss_ext_wholesale_cost != that.ss_ext_wholesale_cost)
        return false;
    }

    boolean this_present_ss_ext_list_price = true && this.isSetSs_ext_list_price();
    boolean that_present_ss_ext_list_price = true && that.isSetSs_ext_list_price();
    if (this_present_ss_ext_list_price || that_present_ss_ext_list_price) {
      if (!(this_present_ss_ext_list_price && that_present_ss_ext_list_price))
        return false;
      if (this.ss_ext_list_price != that.ss_ext_list_price)
        return false;
    }

    boolean this_present_ss_ext_tax = true && this.isSetSs_ext_tax();
    boolean that_present_ss_ext_tax = true && that.isSetSs_ext_tax();
    if (this_present_ss_ext_tax || that_present_ss_ext_tax) {
      if (!(this_present_ss_ext_tax && that_present_ss_ext_tax))
        return false;
      if (this.ss_ext_tax != that.ss_ext_tax)
        return false;
    }

    boolean this_present_ss_coupon_amt = true && this.isSetSs_coupon_amt();
    boolean that_present_ss_coupon_amt = true && that.isSetSs_coupon_amt();
    if (this_present_ss_coupon_amt || that_present_ss_coupon_amt) {
      if (!(this_present_ss_coupon_amt && that_present_ss_coupon_amt))
        return false;
      if (this.ss_coupon_amt != that.ss_coupon_amt)
        return false;
    }

    boolean this_present_ss_net_paid = true && this.isSetSs_net_paid();
    boolean that_present_ss_net_paid = true && that.isSetSs_net_paid();
    if (this_present_ss_net_paid || that_present_ss_net_paid) {
      if (!(this_present_ss_net_paid && that_present_ss_net_paid))
        return false;
      if (this.ss_net_paid != that.ss_net_paid)
        return false;
    }

    boolean this_present_ss_net_paid_inc_tax = true && this.isSetSs_net_paid_inc_tax();
    boolean that_present_ss_net_paid_inc_tax = true && that.isSetSs_net_paid_inc_tax();
    if (this_present_ss_net_paid_inc_tax || that_present_ss_net_paid_inc_tax) {
      if (!(this_present_ss_net_paid_inc_tax && that_present_ss_net_paid_inc_tax))
        return false;
      if (this.ss_net_paid_inc_tax != that.ss_net_paid_inc_tax)
        return false;
    }

    boolean this_present_ss_net_profit = true && this.isSetSs_net_profit();
    boolean that_present_ss_net_profit = true && that.isSetSs_net_profit();
    if (this_present_ss_net_profit || that_present_ss_net_profit) {
      if (!(this_present_ss_net_profit && that_present_ss_net_profit))
        return false;
      if (this.ss_net_profit != that.ss_net_profit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ss_sold_date_sk = true && (isSetSs_sold_date_sk());
    list.add(present_ss_sold_date_sk);
    if (present_ss_sold_date_sk)
      list.add(ss_sold_date_sk);

    boolean present_ss_sold_time_sk = true && (isSetSs_sold_time_sk());
    list.add(present_ss_sold_time_sk);
    if (present_ss_sold_time_sk)
      list.add(ss_sold_time_sk);

    boolean present_ss_item_sk = true && (isSetSs_item_sk());
    list.add(present_ss_item_sk);
    if (present_ss_item_sk)
      list.add(ss_item_sk);

    boolean present_ss_customer_sk = true && (isSetSs_customer_sk());
    list.add(present_ss_customer_sk);
    if (present_ss_customer_sk)
      list.add(ss_customer_sk);

    boolean present_ss_cdemo_sk = true && (isSetSs_cdemo_sk());
    list.add(present_ss_cdemo_sk);
    if (present_ss_cdemo_sk)
      list.add(ss_cdemo_sk);

    boolean present_ss_hdemo_sk = true && (isSetSs_hdemo_sk());
    list.add(present_ss_hdemo_sk);
    if (present_ss_hdemo_sk)
      list.add(ss_hdemo_sk);

    boolean present_ss_addr_sk = true && (isSetSs_addr_sk());
    list.add(present_ss_addr_sk);
    if (present_ss_addr_sk)
      list.add(ss_addr_sk);

    boolean present_ss_store_sk = true && (isSetSs_store_sk());
    list.add(present_ss_store_sk);
    if (present_ss_store_sk)
      list.add(ss_store_sk);

    boolean present_ss_promo_sk = true && (isSetSs_promo_sk());
    list.add(present_ss_promo_sk);
    if (present_ss_promo_sk)
      list.add(ss_promo_sk);

    boolean present_ss_ticket_number = true && (isSetSs_ticket_number());
    list.add(present_ss_ticket_number);
    if (present_ss_ticket_number)
      list.add(ss_ticket_number);

    boolean present_ss_quantity = true && (isSetSs_quantity());
    list.add(present_ss_quantity);
    if (present_ss_quantity)
      list.add(ss_quantity);

    boolean present_ss_wholesale_cost = true && (isSetSs_wholesale_cost());
    list.add(present_ss_wholesale_cost);
    if (present_ss_wholesale_cost)
      list.add(ss_wholesale_cost);

    boolean present_ss_list_price = true && (isSetSs_list_price());
    list.add(present_ss_list_price);
    if (present_ss_list_price)
      list.add(ss_list_price);

    boolean present_ss_sales_price = true && (isSetSs_sales_price());
    list.add(present_ss_sales_price);
    if (present_ss_sales_price)
      list.add(ss_sales_price);

    boolean present_ss_ext_discount_amt = true && (isSetSs_ext_discount_amt());
    list.add(present_ss_ext_discount_amt);
    if (present_ss_ext_discount_amt)
      list.add(ss_ext_discount_amt);

    boolean present_ss_ext_sales_price = true && (isSetSs_ext_sales_price());
    list.add(present_ss_ext_sales_price);
    if (present_ss_ext_sales_price)
      list.add(ss_ext_sales_price);

    boolean present_ss_ext_wholesale_cost = true && (isSetSs_ext_wholesale_cost());
    list.add(present_ss_ext_wholesale_cost);
    if (present_ss_ext_wholesale_cost)
      list.add(ss_ext_wholesale_cost);

    boolean present_ss_ext_list_price = true && (isSetSs_ext_list_price());
    list.add(present_ss_ext_list_price);
    if (present_ss_ext_list_price)
      list.add(ss_ext_list_price);

    boolean present_ss_ext_tax = true && (isSetSs_ext_tax());
    list.add(present_ss_ext_tax);
    if (present_ss_ext_tax)
      list.add(ss_ext_tax);

    boolean present_ss_coupon_amt = true && (isSetSs_coupon_amt());
    list.add(present_ss_coupon_amt);
    if (present_ss_coupon_amt)
      list.add(ss_coupon_amt);

    boolean present_ss_net_paid = true && (isSetSs_net_paid());
    list.add(present_ss_net_paid);
    if (present_ss_net_paid)
      list.add(ss_net_paid);

    boolean present_ss_net_paid_inc_tax = true && (isSetSs_net_paid_inc_tax());
    list.add(present_ss_net_paid_inc_tax);
    if (present_ss_net_paid_inc_tax)
      list.add(ss_net_paid_inc_tax);

    boolean present_ss_net_profit = true && (isSetSs_net_profit());
    list.add(present_ss_net_profit);
    if (present_ss_net_profit)
      list.add(ss_net_profit);

    return list.hashCode();
  }

  @Override
  public int compareTo(StoreSalesTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSs_sold_date_sk()).compareTo(other.isSetSs_sold_date_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_sold_date_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_sold_date_sk, other.ss_sold_date_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_sold_time_sk()).compareTo(other.isSetSs_sold_time_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_sold_time_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_sold_time_sk, other.ss_sold_time_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_item_sk()).compareTo(other.isSetSs_item_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_item_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_item_sk, other.ss_item_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_customer_sk()).compareTo(other.isSetSs_customer_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_customer_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_customer_sk, other.ss_customer_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_cdemo_sk()).compareTo(other.isSetSs_cdemo_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_cdemo_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_cdemo_sk, other.ss_cdemo_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_hdemo_sk()).compareTo(other.isSetSs_hdemo_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_hdemo_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_hdemo_sk, other.ss_hdemo_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_addr_sk()).compareTo(other.isSetSs_addr_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_addr_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_addr_sk, other.ss_addr_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_store_sk()).compareTo(other.isSetSs_store_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_store_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_store_sk, other.ss_store_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_promo_sk()).compareTo(other.isSetSs_promo_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_promo_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_promo_sk, other.ss_promo_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_ticket_number()).compareTo(other.isSetSs_ticket_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_ticket_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_ticket_number, other.ss_ticket_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_quantity()).compareTo(other.isSetSs_quantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_quantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_quantity, other.ss_quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_wholesale_cost()).compareTo(other.isSetSs_wholesale_cost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_wholesale_cost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_wholesale_cost, other.ss_wholesale_cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_list_price()).compareTo(other.isSetSs_list_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_list_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_list_price, other.ss_list_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_sales_price()).compareTo(other.isSetSs_sales_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_sales_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_sales_price, other.ss_sales_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_ext_discount_amt()).compareTo(other.isSetSs_ext_discount_amt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_ext_discount_amt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_ext_discount_amt, other.ss_ext_discount_amt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_ext_sales_price()).compareTo(other.isSetSs_ext_sales_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_ext_sales_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_ext_sales_price, other.ss_ext_sales_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_ext_wholesale_cost()).compareTo(other.isSetSs_ext_wholesale_cost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_ext_wholesale_cost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_ext_wholesale_cost, other.ss_ext_wholesale_cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_ext_list_price()).compareTo(other.isSetSs_ext_list_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_ext_list_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_ext_list_price, other.ss_ext_list_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_ext_tax()).compareTo(other.isSetSs_ext_tax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_ext_tax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_ext_tax, other.ss_ext_tax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_coupon_amt()).compareTo(other.isSetSs_coupon_amt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_coupon_amt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_coupon_amt, other.ss_coupon_amt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_net_paid()).compareTo(other.isSetSs_net_paid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_net_paid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_net_paid, other.ss_net_paid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_net_paid_inc_tax()).compareTo(other.isSetSs_net_paid_inc_tax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_net_paid_inc_tax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_net_paid_inc_tax, other.ss_net_paid_inc_tax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSs_net_profit()).compareTo(other.isSetSs_net_profit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs_net_profit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss_net_profit, other.ss_net_profit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StoreSalesTable(");
    boolean first = true;

    if (isSetSs_sold_date_sk()) {
      sb.append("ss_sold_date_sk:");
      sb.append(this.ss_sold_date_sk);
      first = false;
    }
    if (isSetSs_sold_time_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_sold_time_sk:");
      sb.append(this.ss_sold_time_sk);
      first = false;
    }
    if (isSetSs_item_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_item_sk:");
      sb.append(this.ss_item_sk);
      first = false;
    }
    if (isSetSs_customer_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_customer_sk:");
      sb.append(this.ss_customer_sk);
      first = false;
    }
    if (isSetSs_cdemo_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_cdemo_sk:");
      sb.append(this.ss_cdemo_sk);
      first = false;
    }
    if (isSetSs_hdemo_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_hdemo_sk:");
      sb.append(this.ss_hdemo_sk);
      first = false;
    }
    if (isSetSs_addr_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_addr_sk:");
      sb.append(this.ss_addr_sk);
      first = false;
    }
    if (isSetSs_store_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_store_sk:");
      sb.append(this.ss_store_sk);
      first = false;
    }
    if (isSetSs_promo_sk()) {
      if (!first) sb.append(", ");
      sb.append("ss_promo_sk:");
      sb.append(this.ss_promo_sk);
      first = false;
    }
    if (isSetSs_ticket_number()) {
      if (!first) sb.append(", ");
      sb.append("ss_ticket_number:");
      sb.append(this.ss_ticket_number);
      first = false;
    }
    if (isSetSs_quantity()) {
      if (!first) sb.append(", ");
      sb.append("ss_quantity:");
      sb.append(this.ss_quantity);
      first = false;
    }
    if (isSetSs_wholesale_cost()) {
      if (!first) sb.append(", ");
      sb.append("ss_wholesale_cost:");
      sb.append(this.ss_wholesale_cost);
      first = false;
    }
    if (isSetSs_list_price()) {
      if (!first) sb.append(", ");
      sb.append("ss_list_price:");
      sb.append(this.ss_list_price);
      first = false;
    }
    if (isSetSs_sales_price()) {
      if (!first) sb.append(", ");
      sb.append("ss_sales_price:");
      sb.append(this.ss_sales_price);
      first = false;
    }
    if (isSetSs_ext_discount_amt()) {
      if (!first) sb.append(", ");
      sb.append("ss_ext_discount_amt:");
      sb.append(this.ss_ext_discount_amt);
      first = false;
    }
    if (isSetSs_ext_sales_price()) {
      if (!first) sb.append(", ");
      sb.append("ss_ext_sales_price:");
      sb.append(this.ss_ext_sales_price);
      first = false;
    }
    if (isSetSs_ext_wholesale_cost()) {
      if (!first) sb.append(", ");
      sb.append("ss_ext_wholesale_cost:");
      sb.append(this.ss_ext_wholesale_cost);
      first = false;
    }
    if (isSetSs_ext_list_price()) {
      if (!first) sb.append(", ");
      sb.append("ss_ext_list_price:");
      sb.append(this.ss_ext_list_price);
      first = false;
    }
    if (isSetSs_ext_tax()) {
      if (!first) sb.append(", ");
      sb.append("ss_ext_tax:");
      sb.append(this.ss_ext_tax);
      first = false;
    }
    if (isSetSs_coupon_amt()) {
      if (!first) sb.append(", ");
      sb.append("ss_coupon_amt:");
      sb.append(this.ss_coupon_amt);
      first = false;
    }
    if (isSetSs_net_paid()) {
      if (!first) sb.append(", ");
      sb.append("ss_net_paid:");
      sb.append(this.ss_net_paid);
      first = false;
    }
    if (isSetSs_net_paid_inc_tax()) {
      if (!first) sb.append(", ");
      sb.append("ss_net_paid_inc_tax:");
      sb.append(this.ss_net_paid_inc_tax);
      first = false;
    }
    if (isSetSs_net_profit()) {
      if (!first) sb.append(", ");
      sb.append("ss_net_profit:");
      sb.append(this.ss_net_profit);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StoreSalesTableStandardSchemeFactory implements SchemeFactory {
    public StoreSalesTableStandardScheme getScheme() {
      return new StoreSalesTableStandardScheme();
    }
  }

  private static class StoreSalesTableStandardScheme extends StandardScheme<StoreSalesTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StoreSalesTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SS_SOLD_DATE_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_sold_date_sk = iprot.readI64();
              struct.setSs_sold_date_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SS_SOLD_TIME_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_sold_time_sk = iprot.readI64();
              struct.setSs_sold_time_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SS_ITEM_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_item_sk = iprot.readI64();
              struct.setSs_item_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SS_CUSTOMER_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_customer_sk = iprot.readI64();
              struct.setSs_customer_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SS_CDEMO_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_cdemo_sk = iprot.readI64();
              struct.setSs_cdemo_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SS_HDEMO_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_hdemo_sk = iprot.readI64();
              struct.setSs_hdemo_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SS_ADDR_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_addr_sk = iprot.readI64();
              struct.setSs_addr_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SS_STORE_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_store_sk = iprot.readI64();
              struct.setSs_store_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SS_PROMO_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_promo_sk = iprot.readI64();
              struct.setSs_promo_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SS_TICKET_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_ticket_number = iprot.readI64();
              struct.setSs_ticket_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SS_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ss_quantity = iprot.readI64();
              struct.setSs_quantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SS_WHOLESALE_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_wholesale_cost = iprot.readDouble();
              struct.setSs_wholesale_costIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SS_LIST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_list_price = iprot.readDouble();
              struct.setSs_list_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SS_SALES_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_sales_price = iprot.readDouble();
              struct.setSs_sales_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SS_EXT_DISCOUNT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_ext_discount_amt = iprot.readDouble();
              struct.setSs_ext_discount_amtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SS_EXT_SALES_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_ext_sales_price = iprot.readDouble();
              struct.setSs_ext_sales_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SS_EXT_WHOLESALE_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_ext_wholesale_cost = iprot.readDouble();
              struct.setSs_ext_wholesale_costIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SS_EXT_LIST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_ext_list_price = iprot.readDouble();
              struct.setSs_ext_list_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SS_EXT_TAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_ext_tax = iprot.readDouble();
              struct.setSs_ext_taxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SS_COUPON_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_coupon_amt = iprot.readDouble();
              struct.setSs_coupon_amtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SS_NET_PAID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_net_paid = iprot.readDouble();
              struct.setSs_net_paidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SS_NET_PAID_INC_TAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_net_paid_inc_tax = iprot.readDouble();
              struct.setSs_net_paid_inc_taxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SS_NET_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ss_net_profit = iprot.readDouble();
              struct.setSs_net_profitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StoreSalesTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSs_sold_date_sk()) {
        oprot.writeFieldBegin(SS_SOLD_DATE_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_sold_date_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_sold_time_sk()) {
        oprot.writeFieldBegin(SS_SOLD_TIME_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_sold_time_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_item_sk()) {
        oprot.writeFieldBegin(SS_ITEM_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_item_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_customer_sk()) {
        oprot.writeFieldBegin(SS_CUSTOMER_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_customer_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_cdemo_sk()) {
        oprot.writeFieldBegin(SS_CDEMO_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_cdemo_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_hdemo_sk()) {
        oprot.writeFieldBegin(SS_HDEMO_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_hdemo_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_addr_sk()) {
        oprot.writeFieldBegin(SS_ADDR_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_addr_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_store_sk()) {
        oprot.writeFieldBegin(SS_STORE_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_store_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_promo_sk()) {
        oprot.writeFieldBegin(SS_PROMO_SK_FIELD_DESC);
        oprot.writeI64(struct.ss_promo_sk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_ticket_number()) {
        oprot.writeFieldBegin(SS_TICKET_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.ss_ticket_number);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_quantity()) {
        oprot.writeFieldBegin(SS_QUANTITY_FIELD_DESC);
        oprot.writeI64(struct.ss_quantity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_wholesale_cost()) {
        oprot.writeFieldBegin(SS_WHOLESALE_COST_FIELD_DESC);
        oprot.writeDouble(struct.ss_wholesale_cost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_list_price()) {
        oprot.writeFieldBegin(SS_LIST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.ss_list_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_sales_price()) {
        oprot.writeFieldBegin(SS_SALES_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.ss_sales_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_ext_discount_amt()) {
        oprot.writeFieldBegin(SS_EXT_DISCOUNT_AMT_FIELD_DESC);
        oprot.writeDouble(struct.ss_ext_discount_amt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_ext_sales_price()) {
        oprot.writeFieldBegin(SS_EXT_SALES_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.ss_ext_sales_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_ext_wholesale_cost()) {
        oprot.writeFieldBegin(SS_EXT_WHOLESALE_COST_FIELD_DESC);
        oprot.writeDouble(struct.ss_ext_wholesale_cost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_ext_list_price()) {
        oprot.writeFieldBegin(SS_EXT_LIST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.ss_ext_list_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_ext_tax()) {
        oprot.writeFieldBegin(SS_EXT_TAX_FIELD_DESC);
        oprot.writeDouble(struct.ss_ext_tax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_coupon_amt()) {
        oprot.writeFieldBegin(SS_COUPON_AMT_FIELD_DESC);
        oprot.writeDouble(struct.ss_coupon_amt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_net_paid()) {
        oprot.writeFieldBegin(SS_NET_PAID_FIELD_DESC);
        oprot.writeDouble(struct.ss_net_paid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_net_paid_inc_tax()) {
        oprot.writeFieldBegin(SS_NET_PAID_INC_TAX_FIELD_DESC);
        oprot.writeDouble(struct.ss_net_paid_inc_tax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSs_net_profit()) {
        oprot.writeFieldBegin(SS_NET_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.ss_net_profit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StoreSalesTableTupleSchemeFactory implements SchemeFactory {
    public StoreSalesTableTupleScheme getScheme() {
      return new StoreSalesTableTupleScheme();
    }
  }

  private static class StoreSalesTableTupleScheme extends TupleScheme<StoreSalesTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StoreSalesTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSs_sold_date_sk()) {
        optionals.set(0);
      }
      if (struct.isSetSs_sold_time_sk()) {
        optionals.set(1);
      }
      if (struct.isSetSs_item_sk()) {
        optionals.set(2);
      }
      if (struct.isSetSs_customer_sk()) {
        optionals.set(3);
      }
      if (struct.isSetSs_cdemo_sk()) {
        optionals.set(4);
      }
      if (struct.isSetSs_hdemo_sk()) {
        optionals.set(5);
      }
      if (struct.isSetSs_addr_sk()) {
        optionals.set(6);
      }
      if (struct.isSetSs_store_sk()) {
        optionals.set(7);
      }
      if (struct.isSetSs_promo_sk()) {
        optionals.set(8);
      }
      if (struct.isSetSs_ticket_number()) {
        optionals.set(9);
      }
      if (struct.isSetSs_quantity()) {
        optionals.set(10);
      }
      if (struct.isSetSs_wholesale_cost()) {
        optionals.set(11);
      }
      if (struct.isSetSs_list_price()) {
        optionals.set(12);
      }
      if (struct.isSetSs_sales_price()) {
        optionals.set(13);
      }
      if (struct.isSetSs_ext_discount_amt()) {
        optionals.set(14);
      }
      if (struct.isSetSs_ext_sales_price()) {
        optionals.set(15);
      }
      if (struct.isSetSs_ext_wholesale_cost()) {
        optionals.set(16);
      }
      if (struct.isSetSs_ext_list_price()) {
        optionals.set(17);
      }
      if (struct.isSetSs_ext_tax()) {
        optionals.set(18);
      }
      if (struct.isSetSs_coupon_amt()) {
        optionals.set(19);
      }
      if (struct.isSetSs_net_paid()) {
        optionals.set(20);
      }
      if (struct.isSetSs_net_paid_inc_tax()) {
        optionals.set(21);
      }
      if (struct.isSetSs_net_profit()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetSs_sold_date_sk()) {
        oprot.writeI64(struct.ss_sold_date_sk);
      }
      if (struct.isSetSs_sold_time_sk()) {
        oprot.writeI64(struct.ss_sold_time_sk);
      }
      if (struct.isSetSs_item_sk()) {
        oprot.writeI64(struct.ss_item_sk);
      }
      if (struct.isSetSs_customer_sk()) {
        oprot.writeI64(struct.ss_customer_sk);
      }
      if (struct.isSetSs_cdemo_sk()) {
        oprot.writeI64(struct.ss_cdemo_sk);
      }
      if (struct.isSetSs_hdemo_sk()) {
        oprot.writeI64(struct.ss_hdemo_sk);
      }
      if (struct.isSetSs_addr_sk()) {
        oprot.writeI64(struct.ss_addr_sk);
      }
      if (struct.isSetSs_store_sk()) {
        oprot.writeI64(struct.ss_store_sk);
      }
      if (struct.isSetSs_promo_sk()) {
        oprot.writeI64(struct.ss_promo_sk);
      }
      if (struct.isSetSs_ticket_number()) {
        oprot.writeI64(struct.ss_ticket_number);
      }
      if (struct.isSetSs_quantity()) {
        oprot.writeI64(struct.ss_quantity);
      }
      if (struct.isSetSs_wholesale_cost()) {
        oprot.writeDouble(struct.ss_wholesale_cost);
      }
      if (struct.isSetSs_list_price()) {
        oprot.writeDouble(struct.ss_list_price);
      }
      if (struct.isSetSs_sales_price()) {
        oprot.writeDouble(struct.ss_sales_price);
      }
      if (struct.isSetSs_ext_discount_amt()) {
        oprot.writeDouble(struct.ss_ext_discount_amt);
      }
      if (struct.isSetSs_ext_sales_price()) {
        oprot.writeDouble(struct.ss_ext_sales_price);
      }
      if (struct.isSetSs_ext_wholesale_cost()) {
        oprot.writeDouble(struct.ss_ext_wholesale_cost);
      }
      if (struct.isSetSs_ext_list_price()) {
        oprot.writeDouble(struct.ss_ext_list_price);
      }
      if (struct.isSetSs_ext_tax()) {
        oprot.writeDouble(struct.ss_ext_tax);
      }
      if (struct.isSetSs_coupon_amt()) {
        oprot.writeDouble(struct.ss_coupon_amt);
      }
      if (struct.isSetSs_net_paid()) {
        oprot.writeDouble(struct.ss_net_paid);
      }
      if (struct.isSetSs_net_paid_inc_tax()) {
        oprot.writeDouble(struct.ss_net_paid_inc_tax);
      }
      if (struct.isSetSs_net_profit()) {
        oprot.writeDouble(struct.ss_net_profit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StoreSalesTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.ss_sold_date_sk = iprot.readI64();
        struct.setSs_sold_date_skIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ss_sold_time_sk = iprot.readI64();
        struct.setSs_sold_time_skIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ss_item_sk = iprot.readI64();
        struct.setSs_item_skIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ss_customer_sk = iprot.readI64();
        struct.setSs_customer_skIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ss_cdemo_sk = iprot.readI64();
        struct.setSs_cdemo_skIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ss_hdemo_sk = iprot.readI64();
        struct.setSs_hdemo_skIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ss_addr_sk = iprot.readI64();
        struct.setSs_addr_skIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ss_store_sk = iprot.readI64();
        struct.setSs_store_skIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ss_promo_sk = iprot.readI64();
        struct.setSs_promo_skIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ss_ticket_number = iprot.readI64();
        struct.setSs_ticket_numberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ss_quantity = iprot.readI64();
        struct.setSs_quantityIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ss_wholesale_cost = iprot.readDouble();
        struct.setSs_wholesale_costIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ss_list_price = iprot.readDouble();
        struct.setSs_list_priceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ss_sales_price = iprot.readDouble();
        struct.setSs_sales_priceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ss_ext_discount_amt = iprot.readDouble();
        struct.setSs_ext_discount_amtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ss_ext_sales_price = iprot.readDouble();
        struct.setSs_ext_sales_priceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.ss_ext_wholesale_cost = iprot.readDouble();
        struct.setSs_ext_wholesale_costIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ss_ext_list_price = iprot.readDouble();
        struct.setSs_ext_list_priceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ss_ext_tax = iprot.readDouble();
        struct.setSs_ext_taxIsSet(true);
      }
      if (incoming.get(19)) {
        struct.ss_coupon_amt = iprot.readDouble();
        struct.setSs_coupon_amtIsSet(true);
      }
      if (incoming.get(20)) {
        struct.ss_net_paid = iprot.readDouble();
        struct.setSs_net_paidIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ss_net_paid_inc_tax = iprot.readDouble();
        struct.setSs_net_paid_inc_taxIsSet(true);
      }
      if (incoming.get(22)) {
        struct.ss_net_profit = iprot.readDouble();
        struct.setSs_net_profitIsSet(true);
      }
    }
  }

}

