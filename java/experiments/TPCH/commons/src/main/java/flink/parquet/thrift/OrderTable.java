/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flink.parquet.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-28")
public class OrderTable implements org.apache.thrift.TBase<OrderTable, OrderTable._Fields>, java.io.Serializable, Cloneable, Comparable<OrderTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderTable");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CUSTKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("CUSTKEY", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ORDERSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ORDERSTATUS", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTALPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("TOTALPRICE", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ORDERDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ORDERDATE", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER__PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("ORDER_PRIORITY", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CLERK_FIELD_DESC = new org.apache.thrift.protocol.TField("CLERK", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SHIP__PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("SHIP_PRIORITY", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("COMMENT", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderTableTupleSchemeFactory());
  }

  public long ID; // optional
  public long CUSTKEY; // optional
  public String ORDERSTATUS; // optional
  public double TOTALPRICE; // optional
  public String ORDERDATE; // optional
  public String ORDER_PRIORITY; // optional
  public String CLERK; // optional
  public int SHIP_PRIORITY; // optional
  public String COMMENT; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    CUSTKEY((short)2, "CUSTKEY"),
    ORDERSTATUS((short)3, "ORDERSTATUS"),
    TOTALPRICE((short)4, "TOTALPRICE"),
    ORDERDATE((short)5, "ORDERDATE"),
    ORDER__PRIORITY((short)6, "ORDER_PRIORITY"),
    CLERK((short)7, "CLERK"),
    SHIP__PRIORITY((short)8, "SHIP_PRIORITY"),
    COMMENT((short)9, "COMMENT");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CUSTKEY
          return CUSTKEY;
        case 3: // ORDERSTATUS
          return ORDERSTATUS;
        case 4: // TOTALPRICE
          return TOTALPRICE;
        case 5: // ORDERDATE
          return ORDERDATE;
        case 6: // ORDER__PRIORITY
          return ORDER__PRIORITY;
        case 7: // CLERK
          return CLERK;
        case 8: // SHIP__PRIORITY
          return SHIP__PRIORITY;
        case 9: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CUSTKEY_ISSET_ID = 1;
  private static final int __TOTALPRICE_ISSET_ID = 2;
  private static final int __SHIP_PRIORITY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CUSTKEY,_Fields.ORDERSTATUS,_Fields.TOTALPRICE,_Fields.ORDERDATE,_Fields.ORDER__PRIORITY,_Fields.CLERK,_Fields.SHIP__PRIORITY,_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUSTKEY, new org.apache.thrift.meta_data.FieldMetaData("CUSTKEY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDERSTATUS, new org.apache.thrift.meta_data.FieldMetaData("ORDERSTATUS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTALPRICE, new org.apache.thrift.meta_data.FieldMetaData("TOTALPRICE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDERDATE, new org.apache.thrift.meta_data.FieldMetaData("ORDERDATE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER__PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("ORDER_PRIORITY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLERK, new org.apache.thrift.meta_data.FieldMetaData("CLERK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIP__PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("SHIP_PRIORITY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("COMMENT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderTable.class, metaDataMap);
  }

  public OrderTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderTable(OrderTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID = other.ID;
    this.CUSTKEY = other.CUSTKEY;
    if (other.isSetORDERSTATUS()) {
      this.ORDERSTATUS = other.ORDERSTATUS;
    }
    this.TOTALPRICE = other.TOTALPRICE;
    if (other.isSetORDERDATE()) {
      this.ORDERDATE = other.ORDERDATE;
    }
    if (other.isSetORDER_PRIORITY()) {
      this.ORDER_PRIORITY = other.ORDER_PRIORITY;
    }
    if (other.isSetCLERK()) {
      this.CLERK = other.CLERK;
    }
    this.SHIP_PRIORITY = other.SHIP_PRIORITY;
    if (other.isSetCOMMENT()) {
      this.COMMENT = other.COMMENT;
    }
  }

  public OrderTable deepCopy() {
    return new OrderTable(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.ID = 0;
    setCUSTKEYIsSet(false);
    this.CUSTKEY = 0;
    this.ORDERSTATUS = null;
    setTOTALPRICEIsSet(false);
    this.TOTALPRICE = 0.0;
    this.ORDERDATE = null;
    this.ORDER_PRIORITY = null;
    this.CLERK = null;
    setSHIP_PRIORITYIsSet(false);
    this.SHIP_PRIORITY = 0;
    this.COMMENT = null;
  }

  public long getID() {
    return this.ID;
  }

  public OrderTable setID(long ID) {
    this.ID = ID;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCUSTKEY() {
    return this.CUSTKEY;
  }

  public OrderTable setCUSTKEY(long CUSTKEY) {
    this.CUSTKEY = CUSTKEY;
    setCUSTKEYIsSet(true);
    return this;
  }

  public void unsetCUSTKEY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTKEY_ISSET_ID);
  }

  /** Returns true if field CUSTKEY is set (has been assigned a value) and false otherwise */
  public boolean isSetCUSTKEY() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTKEY_ISSET_ID);
  }

  public void setCUSTKEYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTKEY_ISSET_ID, value);
  }

  public String getORDERSTATUS() {
    return this.ORDERSTATUS;
  }

  public OrderTable setORDERSTATUS(String ORDERSTATUS) {
    this.ORDERSTATUS = ORDERSTATUS;
    return this;
  }

  public void unsetORDERSTATUS() {
    this.ORDERSTATUS = null;
  }

  /** Returns true if field ORDERSTATUS is set (has been assigned a value) and false otherwise */
  public boolean isSetORDERSTATUS() {
    return this.ORDERSTATUS != null;
  }

  public void setORDERSTATUSIsSet(boolean value) {
    if (!value) {
      this.ORDERSTATUS = null;
    }
  }

  public double getTOTALPRICE() {
    return this.TOTALPRICE;
  }

  public OrderTable setTOTALPRICE(double TOTALPRICE) {
    this.TOTALPRICE = TOTALPRICE;
    setTOTALPRICEIsSet(true);
    return this;
  }

  public void unsetTOTALPRICE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field TOTALPRICE is set (has been assigned a value) and false otherwise */
  public boolean isSetTOTALPRICE() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTOTALPRICEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  public String getORDERDATE() {
    return this.ORDERDATE;
  }

  public OrderTable setORDERDATE(String ORDERDATE) {
    this.ORDERDATE = ORDERDATE;
    return this;
  }

  public void unsetORDERDATE() {
    this.ORDERDATE = null;
  }

  /** Returns true if field ORDERDATE is set (has been assigned a value) and false otherwise */
  public boolean isSetORDERDATE() {
    return this.ORDERDATE != null;
  }

  public void setORDERDATEIsSet(boolean value) {
    if (!value) {
      this.ORDERDATE = null;
    }
  }

  public String getORDER_PRIORITY() {
    return this.ORDER_PRIORITY;
  }

  public OrderTable setORDER_PRIORITY(String ORDER_PRIORITY) {
    this.ORDER_PRIORITY = ORDER_PRIORITY;
    return this;
  }

  public void unsetORDER_PRIORITY() {
    this.ORDER_PRIORITY = null;
  }

  /** Returns true if field ORDER_PRIORITY is set (has been assigned a value) and false otherwise */
  public boolean isSetORDER_PRIORITY() {
    return this.ORDER_PRIORITY != null;
  }

  public void setORDER_PRIORITYIsSet(boolean value) {
    if (!value) {
      this.ORDER_PRIORITY = null;
    }
  }

  public String getCLERK() {
    return this.CLERK;
  }

  public OrderTable setCLERK(String CLERK) {
    this.CLERK = CLERK;
    return this;
  }

  public void unsetCLERK() {
    this.CLERK = null;
  }

  /** Returns true if field CLERK is set (has been assigned a value) and false otherwise */
  public boolean isSetCLERK() {
    return this.CLERK != null;
  }

  public void setCLERKIsSet(boolean value) {
    if (!value) {
      this.CLERK = null;
    }
  }

  public int getSHIP_PRIORITY() {
    return this.SHIP_PRIORITY;
  }

  public OrderTable setSHIP_PRIORITY(int SHIP_PRIORITY) {
    this.SHIP_PRIORITY = SHIP_PRIORITY;
    setSHIP_PRIORITYIsSet(true);
    return this;
  }

  public void unsetSHIP_PRIORITY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIP_PRIORITY_ISSET_ID);
  }

  /** Returns true if field SHIP_PRIORITY is set (has been assigned a value) and false otherwise */
  public boolean isSetSHIP_PRIORITY() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIP_PRIORITY_ISSET_ID);
  }

  public void setSHIP_PRIORITYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIP_PRIORITY_ISSET_ID, value);
  }

  public String getCOMMENT() {
    return this.COMMENT;
  }

  public OrderTable setCOMMENT(String COMMENT) {
    this.COMMENT = COMMENT;
    return this;
  }

  public void unsetCOMMENT() {
    this.COMMENT = null;
  }

  /** Returns true if field COMMENT is set (has been assigned a value) and false otherwise */
  public boolean isSetCOMMENT() {
    return this.COMMENT != null;
  }

  public void setCOMMENTIsSet(boolean value) {
    if (!value) {
      this.COMMENT = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((Long)value);
      }
      break;

    case CUSTKEY:
      if (value == null) {
        unsetCUSTKEY();
      } else {
        setCUSTKEY((Long)value);
      }
      break;

    case ORDERSTATUS:
      if (value == null) {
        unsetORDERSTATUS();
      } else {
        setORDERSTATUS((String)value);
      }
      break;

    case TOTALPRICE:
      if (value == null) {
        unsetTOTALPRICE();
      } else {
        setTOTALPRICE((Double)value);
      }
      break;

    case ORDERDATE:
      if (value == null) {
        unsetORDERDATE();
      } else {
        setORDERDATE((String)value);
      }
      break;

    case ORDER__PRIORITY:
      if (value == null) {
        unsetORDER_PRIORITY();
      } else {
        setORDER_PRIORITY((String)value);
      }
      break;

    case CLERK:
      if (value == null) {
        unsetCLERK();
      } else {
        setCLERK((String)value);
      }
      break;

    case SHIP__PRIORITY:
      if (value == null) {
        unsetSHIP_PRIORITY();
      } else {
        setSHIP_PRIORITY((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetCOMMENT();
      } else {
        setCOMMENT((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getID());

    case CUSTKEY:
      return Long.valueOf(getCUSTKEY());

    case ORDERSTATUS:
      return getORDERSTATUS();

    case TOTALPRICE:
      return Double.valueOf(getTOTALPRICE());

    case ORDERDATE:
      return getORDERDATE();

    case ORDER__PRIORITY:
      return getORDER_PRIORITY();

    case CLERK:
      return getCLERK();

    case SHIP__PRIORITY:
      return Integer.valueOf(getSHIP_PRIORITY());

    case COMMENT:
      return getCOMMENT();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case CUSTKEY:
      return isSetCUSTKEY();
    case ORDERSTATUS:
      return isSetORDERSTATUS();
    case TOTALPRICE:
      return isSetTOTALPRICE();
    case ORDERDATE:
      return isSetORDERDATE();
    case ORDER__PRIORITY:
      return isSetORDER_PRIORITY();
    case CLERK:
      return isSetCLERK();
    case SHIP__PRIORITY:
      return isSetSHIP_PRIORITY();
    case COMMENT:
      return isSetCOMMENT();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderTable)
      return this.equals((OrderTable)that);
    return false;
  }

  public boolean equals(OrderTable that) {
    if (that == null)
      return false;

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (this.ID != that.ID)
        return false;
    }

    boolean this_present_CUSTKEY = true && this.isSetCUSTKEY();
    boolean that_present_CUSTKEY = true && that.isSetCUSTKEY();
    if (this_present_CUSTKEY || that_present_CUSTKEY) {
      if (!(this_present_CUSTKEY && that_present_CUSTKEY))
        return false;
      if (this.CUSTKEY != that.CUSTKEY)
        return false;
    }

    boolean this_present_ORDERSTATUS = true && this.isSetORDERSTATUS();
    boolean that_present_ORDERSTATUS = true && that.isSetORDERSTATUS();
    if (this_present_ORDERSTATUS || that_present_ORDERSTATUS) {
      if (!(this_present_ORDERSTATUS && that_present_ORDERSTATUS))
        return false;
      if (!this.ORDERSTATUS.equals(that.ORDERSTATUS))
        return false;
    }

    boolean this_present_TOTALPRICE = true && this.isSetTOTALPRICE();
    boolean that_present_TOTALPRICE = true && that.isSetTOTALPRICE();
    if (this_present_TOTALPRICE || that_present_TOTALPRICE) {
      if (!(this_present_TOTALPRICE && that_present_TOTALPRICE))
        return false;
      if (this.TOTALPRICE != that.TOTALPRICE)
        return false;
    }

    boolean this_present_ORDERDATE = true && this.isSetORDERDATE();
    boolean that_present_ORDERDATE = true && that.isSetORDERDATE();
    if (this_present_ORDERDATE || that_present_ORDERDATE) {
      if (!(this_present_ORDERDATE && that_present_ORDERDATE))
        return false;
      if (!this.ORDERDATE.equals(that.ORDERDATE))
        return false;
    }

    boolean this_present_ORDER_PRIORITY = true && this.isSetORDER_PRIORITY();
    boolean that_present_ORDER_PRIORITY = true && that.isSetORDER_PRIORITY();
    if (this_present_ORDER_PRIORITY || that_present_ORDER_PRIORITY) {
      if (!(this_present_ORDER_PRIORITY && that_present_ORDER_PRIORITY))
        return false;
      if (!this.ORDER_PRIORITY.equals(that.ORDER_PRIORITY))
        return false;
    }

    boolean this_present_CLERK = true && this.isSetCLERK();
    boolean that_present_CLERK = true && that.isSetCLERK();
    if (this_present_CLERK || that_present_CLERK) {
      if (!(this_present_CLERK && that_present_CLERK))
        return false;
      if (!this.CLERK.equals(that.CLERK))
        return false;
    }

    boolean this_present_SHIP_PRIORITY = true && this.isSetSHIP_PRIORITY();
    boolean that_present_SHIP_PRIORITY = true && that.isSetSHIP_PRIORITY();
    if (this_present_SHIP_PRIORITY || that_present_SHIP_PRIORITY) {
      if (!(this_present_SHIP_PRIORITY && that_present_SHIP_PRIORITY))
        return false;
      if (this.SHIP_PRIORITY != that.SHIP_PRIORITY)
        return false;
    }

    boolean this_present_COMMENT = true && this.isSetCOMMENT();
    boolean that_present_COMMENT = true && that.isSetCOMMENT();
    if (this_present_COMMENT || that_present_COMMENT) {
      if (!(this_present_COMMENT && that_present_COMMENT))
        return false;
      if (!this.COMMENT.equals(that.COMMENT))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ID = true && (isSetID());
    list.add(present_ID);
    if (present_ID)
      list.add(ID);

    boolean present_CUSTKEY = true && (isSetCUSTKEY());
    list.add(present_CUSTKEY);
    if (present_CUSTKEY)
      list.add(CUSTKEY);

    boolean present_ORDERSTATUS = true && (isSetORDERSTATUS());
    list.add(present_ORDERSTATUS);
    if (present_ORDERSTATUS)
      list.add(ORDERSTATUS);

    boolean present_TOTALPRICE = true && (isSetTOTALPRICE());
    list.add(present_TOTALPRICE);
    if (present_TOTALPRICE)
      list.add(TOTALPRICE);

    boolean present_ORDERDATE = true && (isSetORDERDATE());
    list.add(present_ORDERDATE);
    if (present_ORDERDATE)
      list.add(ORDERDATE);

    boolean present_ORDER_PRIORITY = true && (isSetORDER_PRIORITY());
    list.add(present_ORDER_PRIORITY);
    if (present_ORDER_PRIORITY)
      list.add(ORDER_PRIORITY);

    boolean present_CLERK = true && (isSetCLERK());
    list.add(present_CLERK);
    if (present_CLERK)
      list.add(CLERK);

    boolean present_SHIP_PRIORITY = true && (isSetSHIP_PRIORITY());
    list.add(present_SHIP_PRIORITY);
    if (present_SHIP_PRIORITY)
      list.add(SHIP_PRIORITY);

    boolean present_COMMENT = true && (isSetCOMMENT());
    list.add(present_COMMENT);
    if (present_COMMENT)
      list.add(COMMENT);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCUSTKEY()).compareTo(other.isSetCUSTKEY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCUSTKEY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CUSTKEY, other.CUSTKEY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetORDERSTATUS()).compareTo(other.isSetORDERSTATUS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetORDERSTATUS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ORDERSTATUS, other.ORDERSTATUS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTOTALPRICE()).compareTo(other.isSetTOTALPRICE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTOTALPRICE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TOTALPRICE, other.TOTALPRICE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetORDERDATE()).compareTo(other.isSetORDERDATE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetORDERDATE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ORDERDATE, other.ORDERDATE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetORDER_PRIORITY()).compareTo(other.isSetORDER_PRIORITY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetORDER_PRIORITY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ORDER_PRIORITY, other.ORDER_PRIORITY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCLERK()).compareTo(other.isSetCLERK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCLERK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CLERK, other.CLERK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSHIP_PRIORITY()).compareTo(other.isSetSHIP_PRIORITY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSHIP_PRIORITY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SHIP_PRIORITY, other.SHIP_PRIORITY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCOMMENT()).compareTo(other.isSetCOMMENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCOMMENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.COMMENT, other.COMMENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderTable(");
    boolean first = true;

    if (isSetID()) {
      sb.append("ID:");
      sb.append(this.ID);
      first = false;
    }
    if (isSetCUSTKEY()) {
      if (!first) sb.append(", ");
      sb.append("CUSTKEY:");
      sb.append(this.CUSTKEY);
      first = false;
    }
    if (isSetORDERSTATUS()) {
      if (!first) sb.append(", ");
      sb.append("ORDERSTATUS:");
      if (this.ORDERSTATUS == null) {
        sb.append("null");
      } else {
        sb.append(this.ORDERSTATUS);
      }
      first = false;
    }
    if (isSetTOTALPRICE()) {
      if (!first) sb.append(", ");
      sb.append("TOTALPRICE:");
      sb.append(this.TOTALPRICE);
      first = false;
    }
    if (isSetORDERDATE()) {
      if (!first) sb.append(", ");
      sb.append("ORDERDATE:");
      if (this.ORDERDATE == null) {
        sb.append("null");
      } else {
        sb.append(this.ORDERDATE);
      }
      first = false;
    }
    if (isSetORDER_PRIORITY()) {
      if (!first) sb.append(", ");
      sb.append("ORDER_PRIORITY:");
      if (this.ORDER_PRIORITY == null) {
        sb.append("null");
      } else {
        sb.append(this.ORDER_PRIORITY);
      }
      first = false;
    }
    if (isSetCLERK()) {
      if (!first) sb.append(", ");
      sb.append("CLERK:");
      if (this.CLERK == null) {
        sb.append("null");
      } else {
        sb.append(this.CLERK);
      }
      first = false;
    }
    if (isSetSHIP_PRIORITY()) {
      if (!first) sb.append(", ");
      sb.append("SHIP_PRIORITY:");
      sb.append(this.SHIP_PRIORITY);
      first = false;
    }
    if (isSetCOMMENT()) {
      if (!first) sb.append(", ");
      sb.append("COMMENT:");
      if (this.COMMENT == null) {
        sb.append("null");
      } else {
        sb.append(this.COMMENT);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderTableStandardSchemeFactory implements SchemeFactory {
    public OrderTableStandardScheme getScheme() {
      return new OrderTableStandardScheme();
    }
  }

  private static class OrderTableStandardScheme extends StandardScheme<OrderTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ID = iprot.readI64();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUSTKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.CUSTKEY = iprot.readI64();
              struct.setCUSTKEYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDERSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ORDERSTATUS = iprot.readString();
              struct.setORDERSTATUSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTALPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TOTALPRICE = iprot.readDouble();
              struct.setTOTALPRICEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDERDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ORDERDATE = iprot.readString();
              struct.setORDERDATEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER__PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ORDER_PRIORITY = iprot.readString();
              struct.setORDER_PRIORITYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLERK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CLERK = iprot.readString();
              struct.setCLERKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHIP__PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SHIP_PRIORITY = iprot.readI32();
              struct.setSHIP_PRIORITYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.COMMENT = iprot.readString();
              struct.setCOMMENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetID()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.ID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCUSTKEY()) {
        oprot.writeFieldBegin(CUSTKEY_FIELD_DESC);
        oprot.writeI64(struct.CUSTKEY);
        oprot.writeFieldEnd();
      }
      if (struct.ORDERSTATUS != null) {
        if (struct.isSetORDERSTATUS()) {
          oprot.writeFieldBegin(ORDERSTATUS_FIELD_DESC);
          oprot.writeString(struct.ORDERSTATUS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTOTALPRICE()) {
        oprot.writeFieldBegin(TOTALPRICE_FIELD_DESC);
        oprot.writeDouble(struct.TOTALPRICE);
        oprot.writeFieldEnd();
      }
      if (struct.ORDERDATE != null) {
        if (struct.isSetORDERDATE()) {
          oprot.writeFieldBegin(ORDERDATE_FIELD_DESC);
          oprot.writeString(struct.ORDERDATE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ORDER_PRIORITY != null) {
        if (struct.isSetORDER_PRIORITY()) {
          oprot.writeFieldBegin(ORDER__PRIORITY_FIELD_DESC);
          oprot.writeString(struct.ORDER_PRIORITY);
          oprot.writeFieldEnd();
        }
      }
      if (struct.CLERK != null) {
        if (struct.isSetCLERK()) {
          oprot.writeFieldBegin(CLERK_FIELD_DESC);
          oprot.writeString(struct.CLERK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSHIP_PRIORITY()) {
        oprot.writeFieldBegin(SHIP__PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.SHIP_PRIORITY);
        oprot.writeFieldEnd();
      }
      if (struct.COMMENT != null) {
        if (struct.isSetCOMMENT()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.COMMENT);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderTableTupleSchemeFactory implements SchemeFactory {
    public OrderTableTupleScheme getScheme() {
      return new OrderTableTupleScheme();
    }
  }

  private static class OrderTableTupleScheme extends TupleScheme<OrderTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetID()) {
        optionals.set(0);
      }
      if (struct.isSetCUSTKEY()) {
        optionals.set(1);
      }
      if (struct.isSetORDERSTATUS()) {
        optionals.set(2);
      }
      if (struct.isSetTOTALPRICE()) {
        optionals.set(3);
      }
      if (struct.isSetORDERDATE()) {
        optionals.set(4);
      }
      if (struct.isSetORDER_PRIORITY()) {
        optionals.set(5);
      }
      if (struct.isSetCLERK()) {
        optionals.set(6);
      }
      if (struct.isSetSHIP_PRIORITY()) {
        optionals.set(7);
      }
      if (struct.isSetCOMMENT()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetID()) {
        oprot.writeI64(struct.ID);
      }
      if (struct.isSetCUSTKEY()) {
        oprot.writeI64(struct.CUSTKEY);
      }
      if (struct.isSetORDERSTATUS()) {
        oprot.writeString(struct.ORDERSTATUS);
      }
      if (struct.isSetTOTALPRICE()) {
        oprot.writeDouble(struct.TOTALPRICE);
      }
      if (struct.isSetORDERDATE()) {
        oprot.writeString(struct.ORDERDATE);
      }
      if (struct.isSetORDER_PRIORITY()) {
        oprot.writeString(struct.ORDER_PRIORITY);
      }
      if (struct.isSetCLERK()) {
        oprot.writeString(struct.CLERK);
      }
      if (struct.isSetSHIP_PRIORITY()) {
        oprot.writeI32(struct.SHIP_PRIORITY);
      }
      if (struct.isSetCOMMENT()) {
        oprot.writeString(struct.COMMENT);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.ID = iprot.readI64();
        struct.setIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.CUSTKEY = iprot.readI64();
        struct.setCUSTKEYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ORDERSTATUS = iprot.readString();
        struct.setORDERSTATUSIsSet(true);
      }
      if (incoming.get(3)) {
        struct.TOTALPRICE = iprot.readDouble();
        struct.setTOTALPRICEIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ORDERDATE = iprot.readString();
        struct.setORDERDATEIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ORDER_PRIORITY = iprot.readString();
        struct.setORDER_PRIORITYIsSet(true);
      }
      if (incoming.get(6)) {
        struct.CLERK = iprot.readString();
        struct.setCLERKIsSet(true);
      }
      if (incoming.get(7)) {
        struct.SHIP_PRIORITY = iprot.readI32();
        struct.setSHIP_PRIORITYIsSet(true);
      }
      if (incoming.get(8)) {
        struct.COMMENT = iprot.readString();
        struct.setCOMMENTIsSet(true);
      }
    }
  }

}

