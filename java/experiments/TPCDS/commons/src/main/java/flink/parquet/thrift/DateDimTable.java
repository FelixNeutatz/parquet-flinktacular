/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flink.parquet.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-28")
public class DateDimTable implements org.apache.thrift.TBase<DateDimTable, DateDimTable._Fields>, java.io.Serializable, Cloneable, Comparable<DateDimTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateDimTable");

  private static final org.apache.thrift.protocol.TField D_DATE_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("d_date_sk", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField D_DATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_date_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField D_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("d_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField D_MONTH_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("d_month_seq", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField D_WEEK_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("d_week_seq", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField D_QUARTER_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("d_quarter_seq", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField D_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("d_year", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField D_DOW_FIELD_DESC = new org.apache.thrift.protocol.TField("d_dow", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField D_MOY_FIELD_DESC = new org.apache.thrift.protocol.TField("d_moy", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField D_DOM_FIELD_DESC = new org.apache.thrift.protocol.TField("d_dom", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField D_QOY_FIELD_DESC = new org.apache.thrift.protocol.TField("d_qoy", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField D_FY_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("d_fy_year", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField D_FY_QUARTER_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("d_fy_quarter_seq", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField D_FY_WEEK_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("d_fy_week_seq", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField D_DAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("d_day_name", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField D_QUARTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("d_quarter_name", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField D_HOLIDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("d_holiday", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField D_WEEKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("d_weekend", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField D_FOLLOWING_HOLIDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("d_following_holiday", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField D_FIRST_DOM_FIELD_DESC = new org.apache.thrift.protocol.TField("d_first_dom", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField D_LAST_DOM_FIELD_DESC = new org.apache.thrift.protocol.TField("d_last_dom", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField D_SAME_DAY_LY_FIELD_DESC = new org.apache.thrift.protocol.TField("d_same_day_ly", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField D_SAME_DAY_LQ_FIELD_DESC = new org.apache.thrift.protocol.TField("d_same_day_lq", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField D_CURRENT_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("d_current_day", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField D_CURRENT_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("d_current_week", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField D_CURRENT_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("d_current_month", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField D_CURRENT_QUARTER_FIELD_DESC = new org.apache.thrift.protocol.TField("d_current_quarter", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField D_CURRENT_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("d_current_year", org.apache.thrift.protocol.TType.STRING, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateDimTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateDimTableTupleSchemeFactory());
  }

  public long d_date_sk; // optional
  public String d_date_id; // optional
  public String d_date; // optional
  public long d_month_seq; // optional
  public long d_week_seq; // optional
  public long d_quarter_seq; // optional
  public long d_year; // optional
  public long d_dow; // optional
  public long d_moy; // optional
  public long d_dom; // optional
  public long d_qoy; // optional
  public long d_fy_year; // optional
  public long d_fy_quarter_seq; // optional
  public long d_fy_week_seq; // optional
  public String d_day_name; // optional
  public String d_quarter_name; // optional
  public String d_holiday; // optional
  public String d_weekend; // optional
  public String d_following_holiday; // optional
  public long d_first_dom; // optional
  public long d_last_dom; // optional
  public long d_same_day_ly; // optional
  public long d_same_day_lq; // optional
  public String d_current_day; // optional
  public String d_current_week; // optional
  public String d_current_month; // optional
  public String d_current_quarter; // optional
  public String d_current_year; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    D_DATE_SK((short)1, "d_date_sk"),
    D_DATE_ID((short)2, "d_date_id"),
    D_DATE((short)3, "d_date"),
    D_MONTH_SEQ((short)4, "d_month_seq"),
    D_WEEK_SEQ((short)5, "d_week_seq"),
    D_QUARTER_SEQ((short)6, "d_quarter_seq"),
    D_YEAR((short)7, "d_year"),
    D_DOW((short)8, "d_dow"),
    D_MOY((short)9, "d_moy"),
    D_DOM((short)10, "d_dom"),
    D_QOY((short)11, "d_qoy"),
    D_FY_YEAR((short)12, "d_fy_year"),
    D_FY_QUARTER_SEQ((short)13, "d_fy_quarter_seq"),
    D_FY_WEEK_SEQ((short)14, "d_fy_week_seq"),
    D_DAY_NAME((short)15, "d_day_name"),
    D_QUARTER_NAME((short)16, "d_quarter_name"),
    D_HOLIDAY((short)17, "d_holiday"),
    D_WEEKEND((short)18, "d_weekend"),
    D_FOLLOWING_HOLIDAY((short)19, "d_following_holiday"),
    D_FIRST_DOM((short)20, "d_first_dom"),
    D_LAST_DOM((short)21, "d_last_dom"),
    D_SAME_DAY_LY((short)22, "d_same_day_ly"),
    D_SAME_DAY_LQ((short)23, "d_same_day_lq"),
    D_CURRENT_DAY((short)24, "d_current_day"),
    D_CURRENT_WEEK((short)25, "d_current_week"),
    D_CURRENT_MONTH((short)26, "d_current_month"),
    D_CURRENT_QUARTER((short)27, "d_current_quarter"),
    D_CURRENT_YEAR((short)28, "d_current_year");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // D_DATE_SK
          return D_DATE_SK;
        case 2: // D_DATE_ID
          return D_DATE_ID;
        case 3: // D_DATE
          return D_DATE;
        case 4: // D_MONTH_SEQ
          return D_MONTH_SEQ;
        case 5: // D_WEEK_SEQ
          return D_WEEK_SEQ;
        case 6: // D_QUARTER_SEQ
          return D_QUARTER_SEQ;
        case 7: // D_YEAR
          return D_YEAR;
        case 8: // D_DOW
          return D_DOW;
        case 9: // D_MOY
          return D_MOY;
        case 10: // D_DOM
          return D_DOM;
        case 11: // D_QOY
          return D_QOY;
        case 12: // D_FY_YEAR
          return D_FY_YEAR;
        case 13: // D_FY_QUARTER_SEQ
          return D_FY_QUARTER_SEQ;
        case 14: // D_FY_WEEK_SEQ
          return D_FY_WEEK_SEQ;
        case 15: // D_DAY_NAME
          return D_DAY_NAME;
        case 16: // D_QUARTER_NAME
          return D_QUARTER_NAME;
        case 17: // D_HOLIDAY
          return D_HOLIDAY;
        case 18: // D_WEEKEND
          return D_WEEKEND;
        case 19: // D_FOLLOWING_HOLIDAY
          return D_FOLLOWING_HOLIDAY;
        case 20: // D_FIRST_DOM
          return D_FIRST_DOM;
        case 21: // D_LAST_DOM
          return D_LAST_DOM;
        case 22: // D_SAME_DAY_LY
          return D_SAME_DAY_LY;
        case 23: // D_SAME_DAY_LQ
          return D_SAME_DAY_LQ;
        case 24: // D_CURRENT_DAY
          return D_CURRENT_DAY;
        case 25: // D_CURRENT_WEEK
          return D_CURRENT_WEEK;
        case 26: // D_CURRENT_MONTH
          return D_CURRENT_MONTH;
        case 27: // D_CURRENT_QUARTER
          return D_CURRENT_QUARTER;
        case 28: // D_CURRENT_YEAR
          return D_CURRENT_YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __D_DATE_SK_ISSET_ID = 0;
  private static final int __D_MONTH_SEQ_ISSET_ID = 1;
  private static final int __D_WEEK_SEQ_ISSET_ID = 2;
  private static final int __D_QUARTER_SEQ_ISSET_ID = 3;
  private static final int __D_YEAR_ISSET_ID = 4;
  private static final int __D_DOW_ISSET_ID = 5;
  private static final int __D_MOY_ISSET_ID = 6;
  private static final int __D_DOM_ISSET_ID = 7;
  private static final int __D_QOY_ISSET_ID = 8;
  private static final int __D_FY_YEAR_ISSET_ID = 9;
  private static final int __D_FY_QUARTER_SEQ_ISSET_ID = 10;
  private static final int __D_FY_WEEK_SEQ_ISSET_ID = 11;
  private static final int __D_FIRST_DOM_ISSET_ID = 12;
  private static final int __D_LAST_DOM_ISSET_ID = 13;
  private static final int __D_SAME_DAY_LY_ISSET_ID = 14;
  private static final int __D_SAME_DAY_LQ_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.D_DATE_SK,_Fields.D_DATE_ID,_Fields.D_DATE,_Fields.D_MONTH_SEQ,_Fields.D_WEEK_SEQ,_Fields.D_QUARTER_SEQ,_Fields.D_YEAR,_Fields.D_DOW,_Fields.D_MOY,_Fields.D_DOM,_Fields.D_QOY,_Fields.D_FY_YEAR,_Fields.D_FY_QUARTER_SEQ,_Fields.D_FY_WEEK_SEQ,_Fields.D_DAY_NAME,_Fields.D_QUARTER_NAME,_Fields.D_HOLIDAY,_Fields.D_WEEKEND,_Fields.D_FOLLOWING_HOLIDAY,_Fields.D_FIRST_DOM,_Fields.D_LAST_DOM,_Fields.D_SAME_DAY_LY,_Fields.D_SAME_DAY_LQ,_Fields.D_CURRENT_DAY,_Fields.D_CURRENT_WEEK,_Fields.D_CURRENT_MONTH,_Fields.D_CURRENT_QUARTER,_Fields.D_CURRENT_YEAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.D_DATE_SK, new org.apache.thrift.meta_data.FieldMetaData("d_date_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_DATE_ID, new org.apache.thrift.meta_data.FieldMetaData("d_date_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_DATE, new org.apache.thrift.meta_data.FieldMetaData("d_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_MONTH_SEQ, new org.apache.thrift.meta_data.FieldMetaData("d_month_seq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_WEEK_SEQ, new org.apache.thrift.meta_data.FieldMetaData("d_week_seq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_QUARTER_SEQ, new org.apache.thrift.meta_data.FieldMetaData("d_quarter_seq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_YEAR, new org.apache.thrift.meta_data.FieldMetaData("d_year", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_DOW, new org.apache.thrift.meta_data.FieldMetaData("d_dow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_MOY, new org.apache.thrift.meta_data.FieldMetaData("d_moy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_DOM, new org.apache.thrift.meta_data.FieldMetaData("d_dom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_QOY, new org.apache.thrift.meta_data.FieldMetaData("d_qoy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_FY_YEAR, new org.apache.thrift.meta_data.FieldMetaData("d_fy_year", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_FY_QUARTER_SEQ, new org.apache.thrift.meta_data.FieldMetaData("d_fy_quarter_seq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_FY_WEEK_SEQ, new org.apache.thrift.meta_data.FieldMetaData("d_fy_week_seq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_DAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("d_day_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_QUARTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("d_quarter_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_HOLIDAY, new org.apache.thrift.meta_data.FieldMetaData("d_holiday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_WEEKEND, new org.apache.thrift.meta_data.FieldMetaData("d_weekend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_FOLLOWING_HOLIDAY, new org.apache.thrift.meta_data.FieldMetaData("d_following_holiday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_FIRST_DOM, new org.apache.thrift.meta_data.FieldMetaData("d_first_dom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_LAST_DOM, new org.apache.thrift.meta_data.FieldMetaData("d_last_dom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_SAME_DAY_LY, new org.apache.thrift.meta_data.FieldMetaData("d_same_day_ly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_SAME_DAY_LQ, new org.apache.thrift.meta_data.FieldMetaData("d_same_day_lq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D_CURRENT_DAY, new org.apache.thrift.meta_data.FieldMetaData("d_current_day", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_CURRENT_WEEK, new org.apache.thrift.meta_data.FieldMetaData("d_current_week", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_CURRENT_MONTH, new org.apache.thrift.meta_data.FieldMetaData("d_current_month", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_CURRENT_QUARTER, new org.apache.thrift.meta_data.FieldMetaData("d_current_quarter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_CURRENT_YEAR, new org.apache.thrift.meta_data.FieldMetaData("d_current_year", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateDimTable.class, metaDataMap);
  }

  public DateDimTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateDimTable(DateDimTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.d_date_sk = other.d_date_sk;
    if (other.isSetD_date_id()) {
      this.d_date_id = other.d_date_id;
    }
    if (other.isSetD_date()) {
      this.d_date = other.d_date;
    }
    this.d_month_seq = other.d_month_seq;
    this.d_week_seq = other.d_week_seq;
    this.d_quarter_seq = other.d_quarter_seq;
    this.d_year = other.d_year;
    this.d_dow = other.d_dow;
    this.d_moy = other.d_moy;
    this.d_dom = other.d_dom;
    this.d_qoy = other.d_qoy;
    this.d_fy_year = other.d_fy_year;
    this.d_fy_quarter_seq = other.d_fy_quarter_seq;
    this.d_fy_week_seq = other.d_fy_week_seq;
    if (other.isSetD_day_name()) {
      this.d_day_name = other.d_day_name;
    }
    if (other.isSetD_quarter_name()) {
      this.d_quarter_name = other.d_quarter_name;
    }
    if (other.isSetD_holiday()) {
      this.d_holiday = other.d_holiday;
    }
    if (other.isSetD_weekend()) {
      this.d_weekend = other.d_weekend;
    }
    if (other.isSetD_following_holiday()) {
      this.d_following_holiday = other.d_following_holiday;
    }
    this.d_first_dom = other.d_first_dom;
    this.d_last_dom = other.d_last_dom;
    this.d_same_day_ly = other.d_same_day_ly;
    this.d_same_day_lq = other.d_same_day_lq;
    if (other.isSetD_current_day()) {
      this.d_current_day = other.d_current_day;
    }
    if (other.isSetD_current_week()) {
      this.d_current_week = other.d_current_week;
    }
    if (other.isSetD_current_month()) {
      this.d_current_month = other.d_current_month;
    }
    if (other.isSetD_current_quarter()) {
      this.d_current_quarter = other.d_current_quarter;
    }
    if (other.isSetD_current_year()) {
      this.d_current_year = other.d_current_year;
    }
  }

  public DateDimTable deepCopy() {
    return new DateDimTable(this);
  }

  @Override
  public void clear() {
    setD_date_skIsSet(false);
    this.d_date_sk = 0;
    this.d_date_id = null;
    this.d_date = null;
    setD_month_seqIsSet(false);
    this.d_month_seq = 0;
    setD_week_seqIsSet(false);
    this.d_week_seq = 0;
    setD_quarter_seqIsSet(false);
    this.d_quarter_seq = 0;
    setD_yearIsSet(false);
    this.d_year = 0;
    setD_dowIsSet(false);
    this.d_dow = 0;
    setD_moyIsSet(false);
    this.d_moy = 0;
    setD_domIsSet(false);
    this.d_dom = 0;
    setD_qoyIsSet(false);
    this.d_qoy = 0;
    setD_fy_yearIsSet(false);
    this.d_fy_year = 0;
    setD_fy_quarter_seqIsSet(false);
    this.d_fy_quarter_seq = 0;
    setD_fy_week_seqIsSet(false);
    this.d_fy_week_seq = 0;
    this.d_day_name = null;
    this.d_quarter_name = null;
    this.d_holiday = null;
    this.d_weekend = null;
    this.d_following_holiday = null;
    setD_first_domIsSet(false);
    this.d_first_dom = 0;
    setD_last_domIsSet(false);
    this.d_last_dom = 0;
    setD_same_day_lyIsSet(false);
    this.d_same_day_ly = 0;
    setD_same_day_lqIsSet(false);
    this.d_same_day_lq = 0;
    this.d_current_day = null;
    this.d_current_week = null;
    this.d_current_month = null;
    this.d_current_quarter = null;
    this.d_current_year = null;
  }

  public long getD_date_sk() {
    return this.d_date_sk;
  }

  public DateDimTable setD_date_sk(long d_date_sk) {
    this.d_date_sk = d_date_sk;
    setD_date_skIsSet(true);
    return this;
  }

  public void unsetD_date_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_DATE_SK_ISSET_ID);
  }

  /** Returns true if field d_date_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetD_date_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __D_DATE_SK_ISSET_ID);
  }

  public void setD_date_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_DATE_SK_ISSET_ID, value);
  }

  public String getD_date_id() {
    return this.d_date_id;
  }

  public DateDimTable setD_date_id(String d_date_id) {
    this.d_date_id = d_date_id;
    return this;
  }

  public void unsetD_date_id() {
    this.d_date_id = null;
  }

  /** Returns true if field d_date_id is set (has been assigned a value) and false otherwise */
  public boolean isSetD_date_id() {
    return this.d_date_id != null;
  }

  public void setD_date_idIsSet(boolean value) {
    if (!value) {
      this.d_date_id = null;
    }
  }

  public String getD_date() {
    return this.d_date;
  }

  public DateDimTable setD_date(String d_date) {
    this.d_date = d_date;
    return this;
  }

  public void unsetD_date() {
    this.d_date = null;
  }

  /** Returns true if field d_date is set (has been assigned a value) and false otherwise */
  public boolean isSetD_date() {
    return this.d_date != null;
  }

  public void setD_dateIsSet(boolean value) {
    if (!value) {
      this.d_date = null;
    }
  }

  public long getD_month_seq() {
    return this.d_month_seq;
  }

  public DateDimTable setD_month_seq(long d_month_seq) {
    this.d_month_seq = d_month_seq;
    setD_month_seqIsSet(true);
    return this;
  }

  public void unsetD_month_seq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_MONTH_SEQ_ISSET_ID);
  }

  /** Returns true if field d_month_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetD_month_seq() {
    return EncodingUtils.testBit(__isset_bitfield, __D_MONTH_SEQ_ISSET_ID);
  }

  public void setD_month_seqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_MONTH_SEQ_ISSET_ID, value);
  }

  public long getD_week_seq() {
    return this.d_week_seq;
  }

  public DateDimTable setD_week_seq(long d_week_seq) {
    this.d_week_seq = d_week_seq;
    setD_week_seqIsSet(true);
    return this;
  }

  public void unsetD_week_seq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_WEEK_SEQ_ISSET_ID);
  }

  /** Returns true if field d_week_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetD_week_seq() {
    return EncodingUtils.testBit(__isset_bitfield, __D_WEEK_SEQ_ISSET_ID);
  }

  public void setD_week_seqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_WEEK_SEQ_ISSET_ID, value);
  }

  public long getD_quarter_seq() {
    return this.d_quarter_seq;
  }

  public DateDimTable setD_quarter_seq(long d_quarter_seq) {
    this.d_quarter_seq = d_quarter_seq;
    setD_quarter_seqIsSet(true);
    return this;
  }

  public void unsetD_quarter_seq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_QUARTER_SEQ_ISSET_ID);
  }

  /** Returns true if field d_quarter_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetD_quarter_seq() {
    return EncodingUtils.testBit(__isset_bitfield, __D_QUARTER_SEQ_ISSET_ID);
  }

  public void setD_quarter_seqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_QUARTER_SEQ_ISSET_ID, value);
  }

  public long getD_year() {
    return this.d_year;
  }

  public DateDimTable setD_year(long d_year) {
    this.d_year = d_year;
    setD_yearIsSet(true);
    return this;
  }

  public void unsetD_year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_YEAR_ISSET_ID);
  }

  /** Returns true if field d_year is set (has been assigned a value) and false otherwise */
  public boolean isSetD_year() {
    return EncodingUtils.testBit(__isset_bitfield, __D_YEAR_ISSET_ID);
  }

  public void setD_yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_YEAR_ISSET_ID, value);
  }

  public long getD_dow() {
    return this.d_dow;
  }

  public DateDimTable setD_dow(long d_dow) {
    this.d_dow = d_dow;
    setD_dowIsSet(true);
    return this;
  }

  public void unsetD_dow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_DOW_ISSET_ID);
  }

  /** Returns true if field d_dow is set (has been assigned a value) and false otherwise */
  public boolean isSetD_dow() {
    return EncodingUtils.testBit(__isset_bitfield, __D_DOW_ISSET_ID);
  }

  public void setD_dowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_DOW_ISSET_ID, value);
  }

  public long getD_moy() {
    return this.d_moy;
  }

  public DateDimTable setD_moy(long d_moy) {
    this.d_moy = d_moy;
    setD_moyIsSet(true);
    return this;
  }

  public void unsetD_moy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_MOY_ISSET_ID);
  }

  /** Returns true if field d_moy is set (has been assigned a value) and false otherwise */
  public boolean isSetD_moy() {
    return EncodingUtils.testBit(__isset_bitfield, __D_MOY_ISSET_ID);
  }

  public void setD_moyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_MOY_ISSET_ID, value);
  }

  public long getD_dom() {
    return this.d_dom;
  }

  public DateDimTable setD_dom(long d_dom) {
    this.d_dom = d_dom;
    setD_domIsSet(true);
    return this;
  }

  public void unsetD_dom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_DOM_ISSET_ID);
  }

  /** Returns true if field d_dom is set (has been assigned a value) and false otherwise */
  public boolean isSetD_dom() {
    return EncodingUtils.testBit(__isset_bitfield, __D_DOM_ISSET_ID);
  }

  public void setD_domIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_DOM_ISSET_ID, value);
  }

  public long getD_qoy() {
    return this.d_qoy;
  }

  public DateDimTable setD_qoy(long d_qoy) {
    this.d_qoy = d_qoy;
    setD_qoyIsSet(true);
    return this;
  }

  public void unsetD_qoy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_QOY_ISSET_ID);
  }

  /** Returns true if field d_qoy is set (has been assigned a value) and false otherwise */
  public boolean isSetD_qoy() {
    return EncodingUtils.testBit(__isset_bitfield, __D_QOY_ISSET_ID);
  }

  public void setD_qoyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_QOY_ISSET_ID, value);
  }

  public long getD_fy_year() {
    return this.d_fy_year;
  }

  public DateDimTable setD_fy_year(long d_fy_year) {
    this.d_fy_year = d_fy_year;
    setD_fy_yearIsSet(true);
    return this;
  }

  public void unsetD_fy_year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_FY_YEAR_ISSET_ID);
  }

  /** Returns true if field d_fy_year is set (has been assigned a value) and false otherwise */
  public boolean isSetD_fy_year() {
    return EncodingUtils.testBit(__isset_bitfield, __D_FY_YEAR_ISSET_ID);
  }

  public void setD_fy_yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_FY_YEAR_ISSET_ID, value);
  }

  public long getD_fy_quarter_seq() {
    return this.d_fy_quarter_seq;
  }

  public DateDimTable setD_fy_quarter_seq(long d_fy_quarter_seq) {
    this.d_fy_quarter_seq = d_fy_quarter_seq;
    setD_fy_quarter_seqIsSet(true);
    return this;
  }

  public void unsetD_fy_quarter_seq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_FY_QUARTER_SEQ_ISSET_ID);
  }

  /** Returns true if field d_fy_quarter_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetD_fy_quarter_seq() {
    return EncodingUtils.testBit(__isset_bitfield, __D_FY_QUARTER_SEQ_ISSET_ID);
  }

  public void setD_fy_quarter_seqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_FY_QUARTER_SEQ_ISSET_ID, value);
  }

  public long getD_fy_week_seq() {
    return this.d_fy_week_seq;
  }

  public DateDimTable setD_fy_week_seq(long d_fy_week_seq) {
    this.d_fy_week_seq = d_fy_week_seq;
    setD_fy_week_seqIsSet(true);
    return this;
  }

  public void unsetD_fy_week_seq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_FY_WEEK_SEQ_ISSET_ID);
  }

  /** Returns true if field d_fy_week_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetD_fy_week_seq() {
    return EncodingUtils.testBit(__isset_bitfield, __D_FY_WEEK_SEQ_ISSET_ID);
  }

  public void setD_fy_week_seqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_FY_WEEK_SEQ_ISSET_ID, value);
  }

  public String getD_day_name() {
    return this.d_day_name;
  }

  public DateDimTable setD_day_name(String d_day_name) {
    this.d_day_name = d_day_name;
    return this;
  }

  public void unsetD_day_name() {
    this.d_day_name = null;
  }

  /** Returns true if field d_day_name is set (has been assigned a value) and false otherwise */
  public boolean isSetD_day_name() {
    return this.d_day_name != null;
  }

  public void setD_day_nameIsSet(boolean value) {
    if (!value) {
      this.d_day_name = null;
    }
  }

  public String getD_quarter_name() {
    return this.d_quarter_name;
  }

  public DateDimTable setD_quarter_name(String d_quarter_name) {
    this.d_quarter_name = d_quarter_name;
    return this;
  }

  public void unsetD_quarter_name() {
    this.d_quarter_name = null;
  }

  /** Returns true if field d_quarter_name is set (has been assigned a value) and false otherwise */
  public boolean isSetD_quarter_name() {
    return this.d_quarter_name != null;
  }

  public void setD_quarter_nameIsSet(boolean value) {
    if (!value) {
      this.d_quarter_name = null;
    }
  }

  public String getD_holiday() {
    return this.d_holiday;
  }

  public DateDimTable setD_holiday(String d_holiday) {
    this.d_holiday = d_holiday;
    return this;
  }

  public void unsetD_holiday() {
    this.d_holiday = null;
  }

  /** Returns true if field d_holiday is set (has been assigned a value) and false otherwise */
  public boolean isSetD_holiday() {
    return this.d_holiday != null;
  }

  public void setD_holidayIsSet(boolean value) {
    if (!value) {
      this.d_holiday = null;
    }
  }

  public String getD_weekend() {
    return this.d_weekend;
  }

  public DateDimTable setD_weekend(String d_weekend) {
    this.d_weekend = d_weekend;
    return this;
  }

  public void unsetD_weekend() {
    this.d_weekend = null;
  }

  /** Returns true if field d_weekend is set (has been assigned a value) and false otherwise */
  public boolean isSetD_weekend() {
    return this.d_weekend != null;
  }

  public void setD_weekendIsSet(boolean value) {
    if (!value) {
      this.d_weekend = null;
    }
  }

  public String getD_following_holiday() {
    return this.d_following_holiday;
  }

  public DateDimTable setD_following_holiday(String d_following_holiday) {
    this.d_following_holiday = d_following_holiday;
    return this;
  }

  public void unsetD_following_holiday() {
    this.d_following_holiday = null;
  }

  /** Returns true if field d_following_holiday is set (has been assigned a value) and false otherwise */
  public boolean isSetD_following_holiday() {
    return this.d_following_holiday != null;
  }

  public void setD_following_holidayIsSet(boolean value) {
    if (!value) {
      this.d_following_holiday = null;
    }
  }

  public long getD_first_dom() {
    return this.d_first_dom;
  }

  public DateDimTable setD_first_dom(long d_first_dom) {
    this.d_first_dom = d_first_dom;
    setD_first_domIsSet(true);
    return this;
  }

  public void unsetD_first_dom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_FIRST_DOM_ISSET_ID);
  }

  /** Returns true if field d_first_dom is set (has been assigned a value) and false otherwise */
  public boolean isSetD_first_dom() {
    return EncodingUtils.testBit(__isset_bitfield, __D_FIRST_DOM_ISSET_ID);
  }

  public void setD_first_domIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_FIRST_DOM_ISSET_ID, value);
  }

  public long getD_last_dom() {
    return this.d_last_dom;
  }

  public DateDimTable setD_last_dom(long d_last_dom) {
    this.d_last_dom = d_last_dom;
    setD_last_domIsSet(true);
    return this;
  }

  public void unsetD_last_dom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_LAST_DOM_ISSET_ID);
  }

  /** Returns true if field d_last_dom is set (has been assigned a value) and false otherwise */
  public boolean isSetD_last_dom() {
    return EncodingUtils.testBit(__isset_bitfield, __D_LAST_DOM_ISSET_ID);
  }

  public void setD_last_domIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_LAST_DOM_ISSET_ID, value);
  }

  public long getD_same_day_ly() {
    return this.d_same_day_ly;
  }

  public DateDimTable setD_same_day_ly(long d_same_day_ly) {
    this.d_same_day_ly = d_same_day_ly;
    setD_same_day_lyIsSet(true);
    return this;
  }

  public void unsetD_same_day_ly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_SAME_DAY_LY_ISSET_ID);
  }

  /** Returns true if field d_same_day_ly is set (has been assigned a value) and false otherwise */
  public boolean isSetD_same_day_ly() {
    return EncodingUtils.testBit(__isset_bitfield, __D_SAME_DAY_LY_ISSET_ID);
  }

  public void setD_same_day_lyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_SAME_DAY_LY_ISSET_ID, value);
  }

  public long getD_same_day_lq() {
    return this.d_same_day_lq;
  }

  public DateDimTable setD_same_day_lq(long d_same_day_lq) {
    this.d_same_day_lq = d_same_day_lq;
    setD_same_day_lqIsSet(true);
    return this;
  }

  public void unsetD_same_day_lq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_SAME_DAY_LQ_ISSET_ID);
  }

  /** Returns true if field d_same_day_lq is set (has been assigned a value) and false otherwise */
  public boolean isSetD_same_day_lq() {
    return EncodingUtils.testBit(__isset_bitfield, __D_SAME_DAY_LQ_ISSET_ID);
  }

  public void setD_same_day_lqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_SAME_DAY_LQ_ISSET_ID, value);
  }

  public String getD_current_day() {
    return this.d_current_day;
  }

  public DateDimTable setD_current_day(String d_current_day) {
    this.d_current_day = d_current_day;
    return this;
  }

  public void unsetD_current_day() {
    this.d_current_day = null;
  }

  /** Returns true if field d_current_day is set (has been assigned a value) and false otherwise */
  public boolean isSetD_current_day() {
    return this.d_current_day != null;
  }

  public void setD_current_dayIsSet(boolean value) {
    if (!value) {
      this.d_current_day = null;
    }
  }

  public String getD_current_week() {
    return this.d_current_week;
  }

  public DateDimTable setD_current_week(String d_current_week) {
    this.d_current_week = d_current_week;
    return this;
  }

  public void unsetD_current_week() {
    this.d_current_week = null;
  }

  /** Returns true if field d_current_week is set (has been assigned a value) and false otherwise */
  public boolean isSetD_current_week() {
    return this.d_current_week != null;
  }

  public void setD_current_weekIsSet(boolean value) {
    if (!value) {
      this.d_current_week = null;
    }
  }

  public String getD_current_month() {
    return this.d_current_month;
  }

  public DateDimTable setD_current_month(String d_current_month) {
    this.d_current_month = d_current_month;
    return this;
  }

  public void unsetD_current_month() {
    this.d_current_month = null;
  }

  /** Returns true if field d_current_month is set (has been assigned a value) and false otherwise */
  public boolean isSetD_current_month() {
    return this.d_current_month != null;
  }

  public void setD_current_monthIsSet(boolean value) {
    if (!value) {
      this.d_current_month = null;
    }
  }

  public String getD_current_quarter() {
    return this.d_current_quarter;
  }

  public DateDimTable setD_current_quarter(String d_current_quarter) {
    this.d_current_quarter = d_current_quarter;
    return this;
  }

  public void unsetD_current_quarter() {
    this.d_current_quarter = null;
  }

  /** Returns true if field d_current_quarter is set (has been assigned a value) and false otherwise */
  public boolean isSetD_current_quarter() {
    return this.d_current_quarter != null;
  }

  public void setD_current_quarterIsSet(boolean value) {
    if (!value) {
      this.d_current_quarter = null;
    }
  }

  public String getD_current_year() {
    return this.d_current_year;
  }

  public DateDimTable setD_current_year(String d_current_year) {
    this.d_current_year = d_current_year;
    return this;
  }

  public void unsetD_current_year() {
    this.d_current_year = null;
  }

  /** Returns true if field d_current_year is set (has been assigned a value) and false otherwise */
  public boolean isSetD_current_year() {
    return this.d_current_year != null;
  }

  public void setD_current_yearIsSet(boolean value) {
    if (!value) {
      this.d_current_year = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case D_DATE_SK:
      if (value == null) {
        unsetD_date_sk();
      } else {
        setD_date_sk((Long)value);
      }
      break;

    case D_DATE_ID:
      if (value == null) {
        unsetD_date_id();
      } else {
        setD_date_id((String)value);
      }
      break;

    case D_DATE:
      if (value == null) {
        unsetD_date();
      } else {
        setD_date((String)value);
      }
      break;

    case D_MONTH_SEQ:
      if (value == null) {
        unsetD_month_seq();
      } else {
        setD_month_seq((Long)value);
      }
      break;

    case D_WEEK_SEQ:
      if (value == null) {
        unsetD_week_seq();
      } else {
        setD_week_seq((Long)value);
      }
      break;

    case D_QUARTER_SEQ:
      if (value == null) {
        unsetD_quarter_seq();
      } else {
        setD_quarter_seq((Long)value);
      }
      break;

    case D_YEAR:
      if (value == null) {
        unsetD_year();
      } else {
        setD_year((Long)value);
      }
      break;

    case D_DOW:
      if (value == null) {
        unsetD_dow();
      } else {
        setD_dow((Long)value);
      }
      break;

    case D_MOY:
      if (value == null) {
        unsetD_moy();
      } else {
        setD_moy((Long)value);
      }
      break;

    case D_DOM:
      if (value == null) {
        unsetD_dom();
      } else {
        setD_dom((Long)value);
      }
      break;

    case D_QOY:
      if (value == null) {
        unsetD_qoy();
      } else {
        setD_qoy((Long)value);
      }
      break;

    case D_FY_YEAR:
      if (value == null) {
        unsetD_fy_year();
      } else {
        setD_fy_year((Long)value);
      }
      break;

    case D_FY_QUARTER_SEQ:
      if (value == null) {
        unsetD_fy_quarter_seq();
      } else {
        setD_fy_quarter_seq((Long)value);
      }
      break;

    case D_FY_WEEK_SEQ:
      if (value == null) {
        unsetD_fy_week_seq();
      } else {
        setD_fy_week_seq((Long)value);
      }
      break;

    case D_DAY_NAME:
      if (value == null) {
        unsetD_day_name();
      } else {
        setD_day_name((String)value);
      }
      break;

    case D_QUARTER_NAME:
      if (value == null) {
        unsetD_quarter_name();
      } else {
        setD_quarter_name((String)value);
      }
      break;

    case D_HOLIDAY:
      if (value == null) {
        unsetD_holiday();
      } else {
        setD_holiday((String)value);
      }
      break;

    case D_WEEKEND:
      if (value == null) {
        unsetD_weekend();
      } else {
        setD_weekend((String)value);
      }
      break;

    case D_FOLLOWING_HOLIDAY:
      if (value == null) {
        unsetD_following_holiday();
      } else {
        setD_following_holiday((String)value);
      }
      break;

    case D_FIRST_DOM:
      if (value == null) {
        unsetD_first_dom();
      } else {
        setD_first_dom((Long)value);
      }
      break;

    case D_LAST_DOM:
      if (value == null) {
        unsetD_last_dom();
      } else {
        setD_last_dom((Long)value);
      }
      break;

    case D_SAME_DAY_LY:
      if (value == null) {
        unsetD_same_day_ly();
      } else {
        setD_same_day_ly((Long)value);
      }
      break;

    case D_SAME_DAY_LQ:
      if (value == null) {
        unsetD_same_day_lq();
      } else {
        setD_same_day_lq((Long)value);
      }
      break;

    case D_CURRENT_DAY:
      if (value == null) {
        unsetD_current_day();
      } else {
        setD_current_day((String)value);
      }
      break;

    case D_CURRENT_WEEK:
      if (value == null) {
        unsetD_current_week();
      } else {
        setD_current_week((String)value);
      }
      break;

    case D_CURRENT_MONTH:
      if (value == null) {
        unsetD_current_month();
      } else {
        setD_current_month((String)value);
      }
      break;

    case D_CURRENT_QUARTER:
      if (value == null) {
        unsetD_current_quarter();
      } else {
        setD_current_quarter((String)value);
      }
      break;

    case D_CURRENT_YEAR:
      if (value == null) {
        unsetD_current_year();
      } else {
        setD_current_year((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case D_DATE_SK:
      return Long.valueOf(getD_date_sk());

    case D_DATE_ID:
      return getD_date_id();

    case D_DATE:
      return getD_date();

    case D_MONTH_SEQ:
      return Long.valueOf(getD_month_seq());

    case D_WEEK_SEQ:
      return Long.valueOf(getD_week_seq());

    case D_QUARTER_SEQ:
      return Long.valueOf(getD_quarter_seq());

    case D_YEAR:
      return Long.valueOf(getD_year());

    case D_DOW:
      return Long.valueOf(getD_dow());

    case D_MOY:
      return Long.valueOf(getD_moy());

    case D_DOM:
      return Long.valueOf(getD_dom());

    case D_QOY:
      return Long.valueOf(getD_qoy());

    case D_FY_YEAR:
      return Long.valueOf(getD_fy_year());

    case D_FY_QUARTER_SEQ:
      return Long.valueOf(getD_fy_quarter_seq());

    case D_FY_WEEK_SEQ:
      return Long.valueOf(getD_fy_week_seq());

    case D_DAY_NAME:
      return getD_day_name();

    case D_QUARTER_NAME:
      return getD_quarter_name();

    case D_HOLIDAY:
      return getD_holiday();

    case D_WEEKEND:
      return getD_weekend();

    case D_FOLLOWING_HOLIDAY:
      return getD_following_holiday();

    case D_FIRST_DOM:
      return Long.valueOf(getD_first_dom());

    case D_LAST_DOM:
      return Long.valueOf(getD_last_dom());

    case D_SAME_DAY_LY:
      return Long.valueOf(getD_same_day_ly());

    case D_SAME_DAY_LQ:
      return Long.valueOf(getD_same_day_lq());

    case D_CURRENT_DAY:
      return getD_current_day();

    case D_CURRENT_WEEK:
      return getD_current_week();

    case D_CURRENT_MONTH:
      return getD_current_month();

    case D_CURRENT_QUARTER:
      return getD_current_quarter();

    case D_CURRENT_YEAR:
      return getD_current_year();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case D_DATE_SK:
      return isSetD_date_sk();
    case D_DATE_ID:
      return isSetD_date_id();
    case D_DATE:
      return isSetD_date();
    case D_MONTH_SEQ:
      return isSetD_month_seq();
    case D_WEEK_SEQ:
      return isSetD_week_seq();
    case D_QUARTER_SEQ:
      return isSetD_quarter_seq();
    case D_YEAR:
      return isSetD_year();
    case D_DOW:
      return isSetD_dow();
    case D_MOY:
      return isSetD_moy();
    case D_DOM:
      return isSetD_dom();
    case D_QOY:
      return isSetD_qoy();
    case D_FY_YEAR:
      return isSetD_fy_year();
    case D_FY_QUARTER_SEQ:
      return isSetD_fy_quarter_seq();
    case D_FY_WEEK_SEQ:
      return isSetD_fy_week_seq();
    case D_DAY_NAME:
      return isSetD_day_name();
    case D_QUARTER_NAME:
      return isSetD_quarter_name();
    case D_HOLIDAY:
      return isSetD_holiday();
    case D_WEEKEND:
      return isSetD_weekend();
    case D_FOLLOWING_HOLIDAY:
      return isSetD_following_holiday();
    case D_FIRST_DOM:
      return isSetD_first_dom();
    case D_LAST_DOM:
      return isSetD_last_dom();
    case D_SAME_DAY_LY:
      return isSetD_same_day_ly();
    case D_SAME_DAY_LQ:
      return isSetD_same_day_lq();
    case D_CURRENT_DAY:
      return isSetD_current_day();
    case D_CURRENT_WEEK:
      return isSetD_current_week();
    case D_CURRENT_MONTH:
      return isSetD_current_month();
    case D_CURRENT_QUARTER:
      return isSetD_current_quarter();
    case D_CURRENT_YEAR:
      return isSetD_current_year();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateDimTable)
      return this.equals((DateDimTable)that);
    return false;
  }

  public boolean equals(DateDimTable that) {
    if (that == null)
      return false;

    boolean this_present_d_date_sk = true && this.isSetD_date_sk();
    boolean that_present_d_date_sk = true && that.isSetD_date_sk();
    if (this_present_d_date_sk || that_present_d_date_sk) {
      if (!(this_present_d_date_sk && that_present_d_date_sk))
        return false;
      if (this.d_date_sk != that.d_date_sk)
        return false;
    }

    boolean this_present_d_date_id = true && this.isSetD_date_id();
    boolean that_present_d_date_id = true && that.isSetD_date_id();
    if (this_present_d_date_id || that_present_d_date_id) {
      if (!(this_present_d_date_id && that_present_d_date_id))
        return false;
      if (!this.d_date_id.equals(that.d_date_id))
        return false;
    }

    boolean this_present_d_date = true && this.isSetD_date();
    boolean that_present_d_date = true && that.isSetD_date();
    if (this_present_d_date || that_present_d_date) {
      if (!(this_present_d_date && that_present_d_date))
        return false;
      if (!this.d_date.equals(that.d_date))
        return false;
    }

    boolean this_present_d_month_seq = true && this.isSetD_month_seq();
    boolean that_present_d_month_seq = true && that.isSetD_month_seq();
    if (this_present_d_month_seq || that_present_d_month_seq) {
      if (!(this_present_d_month_seq && that_present_d_month_seq))
        return false;
      if (this.d_month_seq != that.d_month_seq)
        return false;
    }

    boolean this_present_d_week_seq = true && this.isSetD_week_seq();
    boolean that_present_d_week_seq = true && that.isSetD_week_seq();
    if (this_present_d_week_seq || that_present_d_week_seq) {
      if (!(this_present_d_week_seq && that_present_d_week_seq))
        return false;
      if (this.d_week_seq != that.d_week_seq)
        return false;
    }

    boolean this_present_d_quarter_seq = true && this.isSetD_quarter_seq();
    boolean that_present_d_quarter_seq = true && that.isSetD_quarter_seq();
    if (this_present_d_quarter_seq || that_present_d_quarter_seq) {
      if (!(this_present_d_quarter_seq && that_present_d_quarter_seq))
        return false;
      if (this.d_quarter_seq != that.d_quarter_seq)
        return false;
    }

    boolean this_present_d_year = true && this.isSetD_year();
    boolean that_present_d_year = true && that.isSetD_year();
    if (this_present_d_year || that_present_d_year) {
      if (!(this_present_d_year && that_present_d_year))
        return false;
      if (this.d_year != that.d_year)
        return false;
    }

    boolean this_present_d_dow = true && this.isSetD_dow();
    boolean that_present_d_dow = true && that.isSetD_dow();
    if (this_present_d_dow || that_present_d_dow) {
      if (!(this_present_d_dow && that_present_d_dow))
        return false;
      if (this.d_dow != that.d_dow)
        return false;
    }

    boolean this_present_d_moy = true && this.isSetD_moy();
    boolean that_present_d_moy = true && that.isSetD_moy();
    if (this_present_d_moy || that_present_d_moy) {
      if (!(this_present_d_moy && that_present_d_moy))
        return false;
      if (this.d_moy != that.d_moy)
        return false;
    }

    boolean this_present_d_dom = true && this.isSetD_dom();
    boolean that_present_d_dom = true && that.isSetD_dom();
    if (this_present_d_dom || that_present_d_dom) {
      if (!(this_present_d_dom && that_present_d_dom))
        return false;
      if (this.d_dom != that.d_dom)
        return false;
    }

    boolean this_present_d_qoy = true && this.isSetD_qoy();
    boolean that_present_d_qoy = true && that.isSetD_qoy();
    if (this_present_d_qoy || that_present_d_qoy) {
      if (!(this_present_d_qoy && that_present_d_qoy))
        return false;
      if (this.d_qoy != that.d_qoy)
        return false;
    }

    boolean this_present_d_fy_year = true && this.isSetD_fy_year();
    boolean that_present_d_fy_year = true && that.isSetD_fy_year();
    if (this_present_d_fy_year || that_present_d_fy_year) {
      if (!(this_present_d_fy_year && that_present_d_fy_year))
        return false;
      if (this.d_fy_year != that.d_fy_year)
        return false;
    }

    boolean this_present_d_fy_quarter_seq = true && this.isSetD_fy_quarter_seq();
    boolean that_present_d_fy_quarter_seq = true && that.isSetD_fy_quarter_seq();
    if (this_present_d_fy_quarter_seq || that_present_d_fy_quarter_seq) {
      if (!(this_present_d_fy_quarter_seq && that_present_d_fy_quarter_seq))
        return false;
      if (this.d_fy_quarter_seq != that.d_fy_quarter_seq)
        return false;
    }

    boolean this_present_d_fy_week_seq = true && this.isSetD_fy_week_seq();
    boolean that_present_d_fy_week_seq = true && that.isSetD_fy_week_seq();
    if (this_present_d_fy_week_seq || that_present_d_fy_week_seq) {
      if (!(this_present_d_fy_week_seq && that_present_d_fy_week_seq))
        return false;
      if (this.d_fy_week_seq != that.d_fy_week_seq)
        return false;
    }

    boolean this_present_d_day_name = true && this.isSetD_day_name();
    boolean that_present_d_day_name = true && that.isSetD_day_name();
    if (this_present_d_day_name || that_present_d_day_name) {
      if (!(this_present_d_day_name && that_present_d_day_name))
        return false;
      if (!this.d_day_name.equals(that.d_day_name))
        return false;
    }

    boolean this_present_d_quarter_name = true && this.isSetD_quarter_name();
    boolean that_present_d_quarter_name = true && that.isSetD_quarter_name();
    if (this_present_d_quarter_name || that_present_d_quarter_name) {
      if (!(this_present_d_quarter_name && that_present_d_quarter_name))
        return false;
      if (!this.d_quarter_name.equals(that.d_quarter_name))
        return false;
    }

    boolean this_present_d_holiday = true && this.isSetD_holiday();
    boolean that_present_d_holiday = true && that.isSetD_holiday();
    if (this_present_d_holiday || that_present_d_holiday) {
      if (!(this_present_d_holiday && that_present_d_holiday))
        return false;
      if (!this.d_holiday.equals(that.d_holiday))
        return false;
    }

    boolean this_present_d_weekend = true && this.isSetD_weekend();
    boolean that_present_d_weekend = true && that.isSetD_weekend();
    if (this_present_d_weekend || that_present_d_weekend) {
      if (!(this_present_d_weekend && that_present_d_weekend))
        return false;
      if (!this.d_weekend.equals(that.d_weekend))
        return false;
    }

    boolean this_present_d_following_holiday = true && this.isSetD_following_holiday();
    boolean that_present_d_following_holiday = true && that.isSetD_following_holiday();
    if (this_present_d_following_holiday || that_present_d_following_holiday) {
      if (!(this_present_d_following_holiday && that_present_d_following_holiday))
        return false;
      if (!this.d_following_holiday.equals(that.d_following_holiday))
        return false;
    }

    boolean this_present_d_first_dom = true && this.isSetD_first_dom();
    boolean that_present_d_first_dom = true && that.isSetD_first_dom();
    if (this_present_d_first_dom || that_present_d_first_dom) {
      if (!(this_present_d_first_dom && that_present_d_first_dom))
        return false;
      if (this.d_first_dom != that.d_first_dom)
        return false;
    }

    boolean this_present_d_last_dom = true && this.isSetD_last_dom();
    boolean that_present_d_last_dom = true && that.isSetD_last_dom();
    if (this_present_d_last_dom || that_present_d_last_dom) {
      if (!(this_present_d_last_dom && that_present_d_last_dom))
        return false;
      if (this.d_last_dom != that.d_last_dom)
        return false;
    }

    boolean this_present_d_same_day_ly = true && this.isSetD_same_day_ly();
    boolean that_present_d_same_day_ly = true && that.isSetD_same_day_ly();
    if (this_present_d_same_day_ly || that_present_d_same_day_ly) {
      if (!(this_present_d_same_day_ly && that_present_d_same_day_ly))
        return false;
      if (this.d_same_day_ly != that.d_same_day_ly)
        return false;
    }

    boolean this_present_d_same_day_lq = true && this.isSetD_same_day_lq();
    boolean that_present_d_same_day_lq = true && that.isSetD_same_day_lq();
    if (this_present_d_same_day_lq || that_present_d_same_day_lq) {
      if (!(this_present_d_same_day_lq && that_present_d_same_day_lq))
        return false;
      if (this.d_same_day_lq != that.d_same_day_lq)
        return false;
    }

    boolean this_present_d_current_day = true && this.isSetD_current_day();
    boolean that_present_d_current_day = true && that.isSetD_current_day();
    if (this_present_d_current_day || that_present_d_current_day) {
      if (!(this_present_d_current_day && that_present_d_current_day))
        return false;
      if (!this.d_current_day.equals(that.d_current_day))
        return false;
    }

    boolean this_present_d_current_week = true && this.isSetD_current_week();
    boolean that_present_d_current_week = true && that.isSetD_current_week();
    if (this_present_d_current_week || that_present_d_current_week) {
      if (!(this_present_d_current_week && that_present_d_current_week))
        return false;
      if (!this.d_current_week.equals(that.d_current_week))
        return false;
    }

    boolean this_present_d_current_month = true && this.isSetD_current_month();
    boolean that_present_d_current_month = true && that.isSetD_current_month();
    if (this_present_d_current_month || that_present_d_current_month) {
      if (!(this_present_d_current_month && that_present_d_current_month))
        return false;
      if (!this.d_current_month.equals(that.d_current_month))
        return false;
    }

    boolean this_present_d_current_quarter = true && this.isSetD_current_quarter();
    boolean that_present_d_current_quarter = true && that.isSetD_current_quarter();
    if (this_present_d_current_quarter || that_present_d_current_quarter) {
      if (!(this_present_d_current_quarter && that_present_d_current_quarter))
        return false;
      if (!this.d_current_quarter.equals(that.d_current_quarter))
        return false;
    }

    boolean this_present_d_current_year = true && this.isSetD_current_year();
    boolean that_present_d_current_year = true && that.isSetD_current_year();
    if (this_present_d_current_year || that_present_d_current_year) {
      if (!(this_present_d_current_year && that_present_d_current_year))
        return false;
      if (!this.d_current_year.equals(that.d_current_year))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_d_date_sk = true && (isSetD_date_sk());
    list.add(present_d_date_sk);
    if (present_d_date_sk)
      list.add(d_date_sk);

    boolean present_d_date_id = true && (isSetD_date_id());
    list.add(present_d_date_id);
    if (present_d_date_id)
      list.add(d_date_id);

    boolean present_d_date = true && (isSetD_date());
    list.add(present_d_date);
    if (present_d_date)
      list.add(d_date);

    boolean present_d_month_seq = true && (isSetD_month_seq());
    list.add(present_d_month_seq);
    if (present_d_month_seq)
      list.add(d_month_seq);

    boolean present_d_week_seq = true && (isSetD_week_seq());
    list.add(present_d_week_seq);
    if (present_d_week_seq)
      list.add(d_week_seq);

    boolean present_d_quarter_seq = true && (isSetD_quarter_seq());
    list.add(present_d_quarter_seq);
    if (present_d_quarter_seq)
      list.add(d_quarter_seq);

    boolean present_d_year = true && (isSetD_year());
    list.add(present_d_year);
    if (present_d_year)
      list.add(d_year);

    boolean present_d_dow = true && (isSetD_dow());
    list.add(present_d_dow);
    if (present_d_dow)
      list.add(d_dow);

    boolean present_d_moy = true && (isSetD_moy());
    list.add(present_d_moy);
    if (present_d_moy)
      list.add(d_moy);

    boolean present_d_dom = true && (isSetD_dom());
    list.add(present_d_dom);
    if (present_d_dom)
      list.add(d_dom);

    boolean present_d_qoy = true && (isSetD_qoy());
    list.add(present_d_qoy);
    if (present_d_qoy)
      list.add(d_qoy);

    boolean present_d_fy_year = true && (isSetD_fy_year());
    list.add(present_d_fy_year);
    if (present_d_fy_year)
      list.add(d_fy_year);

    boolean present_d_fy_quarter_seq = true && (isSetD_fy_quarter_seq());
    list.add(present_d_fy_quarter_seq);
    if (present_d_fy_quarter_seq)
      list.add(d_fy_quarter_seq);

    boolean present_d_fy_week_seq = true && (isSetD_fy_week_seq());
    list.add(present_d_fy_week_seq);
    if (present_d_fy_week_seq)
      list.add(d_fy_week_seq);

    boolean present_d_day_name = true && (isSetD_day_name());
    list.add(present_d_day_name);
    if (present_d_day_name)
      list.add(d_day_name);

    boolean present_d_quarter_name = true && (isSetD_quarter_name());
    list.add(present_d_quarter_name);
    if (present_d_quarter_name)
      list.add(d_quarter_name);

    boolean present_d_holiday = true && (isSetD_holiday());
    list.add(present_d_holiday);
    if (present_d_holiday)
      list.add(d_holiday);

    boolean present_d_weekend = true && (isSetD_weekend());
    list.add(present_d_weekend);
    if (present_d_weekend)
      list.add(d_weekend);

    boolean present_d_following_holiday = true && (isSetD_following_holiday());
    list.add(present_d_following_holiday);
    if (present_d_following_holiday)
      list.add(d_following_holiday);

    boolean present_d_first_dom = true && (isSetD_first_dom());
    list.add(present_d_first_dom);
    if (present_d_first_dom)
      list.add(d_first_dom);

    boolean present_d_last_dom = true && (isSetD_last_dom());
    list.add(present_d_last_dom);
    if (present_d_last_dom)
      list.add(d_last_dom);

    boolean present_d_same_day_ly = true && (isSetD_same_day_ly());
    list.add(present_d_same_day_ly);
    if (present_d_same_day_ly)
      list.add(d_same_day_ly);

    boolean present_d_same_day_lq = true && (isSetD_same_day_lq());
    list.add(present_d_same_day_lq);
    if (present_d_same_day_lq)
      list.add(d_same_day_lq);

    boolean present_d_current_day = true && (isSetD_current_day());
    list.add(present_d_current_day);
    if (present_d_current_day)
      list.add(d_current_day);

    boolean present_d_current_week = true && (isSetD_current_week());
    list.add(present_d_current_week);
    if (present_d_current_week)
      list.add(d_current_week);

    boolean present_d_current_month = true && (isSetD_current_month());
    list.add(present_d_current_month);
    if (present_d_current_month)
      list.add(d_current_month);

    boolean present_d_current_quarter = true && (isSetD_current_quarter());
    list.add(present_d_current_quarter);
    if (present_d_current_quarter)
      list.add(d_current_quarter);

    boolean present_d_current_year = true && (isSetD_current_year());
    list.add(present_d_current_year);
    if (present_d_current_year)
      list.add(d_current_year);

    return list.hashCode();
  }

  @Override
  public int compareTo(DateDimTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetD_date_sk()).compareTo(other.isSetD_date_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_date_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_date_sk, other.d_date_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_date_id()).compareTo(other.isSetD_date_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_date_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_date_id, other.d_date_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_date()).compareTo(other.isSetD_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_date, other.d_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_month_seq()).compareTo(other.isSetD_month_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_month_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_month_seq, other.d_month_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_week_seq()).compareTo(other.isSetD_week_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_week_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_week_seq, other.d_week_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_quarter_seq()).compareTo(other.isSetD_quarter_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_quarter_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_quarter_seq, other.d_quarter_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_year()).compareTo(other.isSetD_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_year, other.d_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_dow()).compareTo(other.isSetD_dow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_dow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_dow, other.d_dow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_moy()).compareTo(other.isSetD_moy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_moy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_moy, other.d_moy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_dom()).compareTo(other.isSetD_dom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_dom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_dom, other.d_dom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_qoy()).compareTo(other.isSetD_qoy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_qoy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_qoy, other.d_qoy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_fy_year()).compareTo(other.isSetD_fy_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_fy_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_fy_year, other.d_fy_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_fy_quarter_seq()).compareTo(other.isSetD_fy_quarter_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_fy_quarter_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_fy_quarter_seq, other.d_fy_quarter_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_fy_week_seq()).compareTo(other.isSetD_fy_week_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_fy_week_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_fy_week_seq, other.d_fy_week_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_day_name()).compareTo(other.isSetD_day_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_day_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_day_name, other.d_day_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_quarter_name()).compareTo(other.isSetD_quarter_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_quarter_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_quarter_name, other.d_quarter_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_holiday()).compareTo(other.isSetD_holiday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_holiday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_holiday, other.d_holiday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_weekend()).compareTo(other.isSetD_weekend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_weekend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_weekend, other.d_weekend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_following_holiday()).compareTo(other.isSetD_following_holiday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_following_holiday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_following_holiday, other.d_following_holiday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_first_dom()).compareTo(other.isSetD_first_dom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_first_dom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_first_dom, other.d_first_dom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_last_dom()).compareTo(other.isSetD_last_dom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_last_dom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_last_dom, other.d_last_dom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_same_day_ly()).compareTo(other.isSetD_same_day_ly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_same_day_ly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_same_day_ly, other.d_same_day_ly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_same_day_lq()).compareTo(other.isSetD_same_day_lq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_same_day_lq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_same_day_lq, other.d_same_day_lq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_current_day()).compareTo(other.isSetD_current_day());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_current_day()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_current_day, other.d_current_day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_current_week()).compareTo(other.isSetD_current_week());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_current_week()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_current_week, other.d_current_week);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_current_month()).compareTo(other.isSetD_current_month());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_current_month()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_current_month, other.d_current_month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_current_quarter()).compareTo(other.isSetD_current_quarter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_current_quarter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_current_quarter, other.d_current_quarter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_current_year()).compareTo(other.isSetD_current_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_current_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_current_year, other.d_current_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DateDimTable(");
    boolean first = true;

    if (isSetD_date_sk()) {
      sb.append("d_date_sk:");
      sb.append(this.d_date_sk);
      first = false;
    }
    if (isSetD_date_id()) {
      if (!first) sb.append(", ");
      sb.append("d_date_id:");
      if (this.d_date_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_date_id);
      }
      first = false;
    }
    if (isSetD_date()) {
      if (!first) sb.append(", ");
      sb.append("d_date:");
      if (this.d_date == null) {
        sb.append("null");
      } else {
        sb.append(this.d_date);
      }
      first = false;
    }
    if (isSetD_month_seq()) {
      if (!first) sb.append(", ");
      sb.append("d_month_seq:");
      sb.append(this.d_month_seq);
      first = false;
    }
    if (isSetD_week_seq()) {
      if (!first) sb.append(", ");
      sb.append("d_week_seq:");
      sb.append(this.d_week_seq);
      first = false;
    }
    if (isSetD_quarter_seq()) {
      if (!first) sb.append(", ");
      sb.append("d_quarter_seq:");
      sb.append(this.d_quarter_seq);
      first = false;
    }
    if (isSetD_year()) {
      if (!first) sb.append(", ");
      sb.append("d_year:");
      sb.append(this.d_year);
      first = false;
    }
    if (isSetD_dow()) {
      if (!first) sb.append(", ");
      sb.append("d_dow:");
      sb.append(this.d_dow);
      first = false;
    }
    if (isSetD_moy()) {
      if (!first) sb.append(", ");
      sb.append("d_moy:");
      sb.append(this.d_moy);
      first = false;
    }
    if (isSetD_dom()) {
      if (!first) sb.append(", ");
      sb.append("d_dom:");
      sb.append(this.d_dom);
      first = false;
    }
    if (isSetD_qoy()) {
      if (!first) sb.append(", ");
      sb.append("d_qoy:");
      sb.append(this.d_qoy);
      first = false;
    }
    if (isSetD_fy_year()) {
      if (!first) sb.append(", ");
      sb.append("d_fy_year:");
      sb.append(this.d_fy_year);
      first = false;
    }
    if (isSetD_fy_quarter_seq()) {
      if (!first) sb.append(", ");
      sb.append("d_fy_quarter_seq:");
      sb.append(this.d_fy_quarter_seq);
      first = false;
    }
    if (isSetD_fy_week_seq()) {
      if (!first) sb.append(", ");
      sb.append("d_fy_week_seq:");
      sb.append(this.d_fy_week_seq);
      first = false;
    }
    if (isSetD_day_name()) {
      if (!first) sb.append(", ");
      sb.append("d_day_name:");
      if (this.d_day_name == null) {
        sb.append("null");
      } else {
        sb.append(this.d_day_name);
      }
      first = false;
    }
    if (isSetD_quarter_name()) {
      if (!first) sb.append(", ");
      sb.append("d_quarter_name:");
      if (this.d_quarter_name == null) {
        sb.append("null");
      } else {
        sb.append(this.d_quarter_name);
      }
      first = false;
    }
    if (isSetD_holiday()) {
      if (!first) sb.append(", ");
      sb.append("d_holiday:");
      if (this.d_holiday == null) {
        sb.append("null");
      } else {
        sb.append(this.d_holiday);
      }
      first = false;
    }
    if (isSetD_weekend()) {
      if (!first) sb.append(", ");
      sb.append("d_weekend:");
      if (this.d_weekend == null) {
        sb.append("null");
      } else {
        sb.append(this.d_weekend);
      }
      first = false;
    }
    if (isSetD_following_holiday()) {
      if (!first) sb.append(", ");
      sb.append("d_following_holiday:");
      if (this.d_following_holiday == null) {
        sb.append("null");
      } else {
        sb.append(this.d_following_holiday);
      }
      first = false;
    }
    if (isSetD_first_dom()) {
      if (!first) sb.append(", ");
      sb.append("d_first_dom:");
      sb.append(this.d_first_dom);
      first = false;
    }
    if (isSetD_last_dom()) {
      if (!first) sb.append(", ");
      sb.append("d_last_dom:");
      sb.append(this.d_last_dom);
      first = false;
    }
    if (isSetD_same_day_ly()) {
      if (!first) sb.append(", ");
      sb.append("d_same_day_ly:");
      sb.append(this.d_same_day_ly);
      first = false;
    }
    if (isSetD_same_day_lq()) {
      if (!first) sb.append(", ");
      sb.append("d_same_day_lq:");
      sb.append(this.d_same_day_lq);
      first = false;
    }
    if (isSetD_current_day()) {
      if (!first) sb.append(", ");
      sb.append("d_current_day:");
      if (this.d_current_day == null) {
        sb.append("null");
      } else {
        sb.append(this.d_current_day);
      }
      first = false;
    }
    if (isSetD_current_week()) {
      if (!first) sb.append(", ");
      sb.append("d_current_week:");
      if (this.d_current_week == null) {
        sb.append("null");
      } else {
        sb.append(this.d_current_week);
      }
      first = false;
    }
    if (isSetD_current_month()) {
      if (!first) sb.append(", ");
      sb.append("d_current_month:");
      if (this.d_current_month == null) {
        sb.append("null");
      } else {
        sb.append(this.d_current_month);
      }
      first = false;
    }
    if (isSetD_current_quarter()) {
      if (!first) sb.append(", ");
      sb.append("d_current_quarter:");
      if (this.d_current_quarter == null) {
        sb.append("null");
      } else {
        sb.append(this.d_current_quarter);
      }
      first = false;
    }
    if (isSetD_current_year()) {
      if (!first) sb.append(", ");
      sb.append("d_current_year:");
      if (this.d_current_year == null) {
        sb.append("null");
      } else {
        sb.append(this.d_current_year);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateDimTableStandardSchemeFactory implements SchemeFactory {
    public DateDimTableStandardScheme getScheme() {
      return new DateDimTableStandardScheme();
    }
  }

  private static class DateDimTableStandardScheme extends StandardScheme<DateDimTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateDimTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // D_DATE_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_date_sk = iprot.readI64();
              struct.setD_date_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // D_DATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_date_id = iprot.readString();
              struct.setD_date_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // D_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_date = iprot.readString();
              struct.setD_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // D_MONTH_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_month_seq = iprot.readI64();
              struct.setD_month_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // D_WEEK_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_week_seq = iprot.readI64();
              struct.setD_week_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // D_QUARTER_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_quarter_seq = iprot.readI64();
              struct.setD_quarter_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // D_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_year = iprot.readI64();
              struct.setD_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // D_DOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_dow = iprot.readI64();
              struct.setD_dowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // D_MOY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_moy = iprot.readI64();
              struct.setD_moyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // D_DOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_dom = iprot.readI64();
              struct.setD_domIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // D_QOY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_qoy = iprot.readI64();
              struct.setD_qoyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // D_FY_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_fy_year = iprot.readI64();
              struct.setD_fy_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // D_FY_QUARTER_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_fy_quarter_seq = iprot.readI64();
              struct.setD_fy_quarter_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // D_FY_WEEK_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_fy_week_seq = iprot.readI64();
              struct.setD_fy_week_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // D_DAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_day_name = iprot.readString();
              struct.setD_day_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // D_QUARTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_quarter_name = iprot.readString();
              struct.setD_quarter_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // D_HOLIDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_holiday = iprot.readString();
              struct.setD_holidayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // D_WEEKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_weekend = iprot.readString();
              struct.setD_weekendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // D_FOLLOWING_HOLIDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_following_holiday = iprot.readString();
              struct.setD_following_holidayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // D_FIRST_DOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_first_dom = iprot.readI64();
              struct.setD_first_domIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // D_LAST_DOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_last_dom = iprot.readI64();
              struct.setD_last_domIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // D_SAME_DAY_LY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_same_day_ly = iprot.readI64();
              struct.setD_same_day_lyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // D_SAME_DAY_LQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.d_same_day_lq = iprot.readI64();
              struct.setD_same_day_lqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // D_CURRENT_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_current_day = iprot.readString();
              struct.setD_current_dayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // D_CURRENT_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_current_week = iprot.readString();
              struct.setD_current_weekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // D_CURRENT_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_current_month = iprot.readString();
              struct.setD_current_monthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // D_CURRENT_QUARTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_current_quarter = iprot.readString();
              struct.setD_current_quarterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // D_CURRENT_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d_current_year = iprot.readString();
              struct.setD_current_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateDimTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetD_date_sk()) {
        oprot.writeFieldBegin(D_DATE_SK_FIELD_DESC);
        oprot.writeI64(struct.d_date_sk);
        oprot.writeFieldEnd();
      }
      if (struct.d_date_id != null) {
        if (struct.isSetD_date_id()) {
          oprot.writeFieldBegin(D_DATE_ID_FIELD_DESC);
          oprot.writeString(struct.d_date_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_date != null) {
        if (struct.isSetD_date()) {
          oprot.writeFieldBegin(D_DATE_FIELD_DESC);
          oprot.writeString(struct.d_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetD_month_seq()) {
        oprot.writeFieldBegin(D_MONTH_SEQ_FIELD_DESC);
        oprot.writeI64(struct.d_month_seq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_week_seq()) {
        oprot.writeFieldBegin(D_WEEK_SEQ_FIELD_DESC);
        oprot.writeI64(struct.d_week_seq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_quarter_seq()) {
        oprot.writeFieldBegin(D_QUARTER_SEQ_FIELD_DESC);
        oprot.writeI64(struct.d_quarter_seq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_year()) {
        oprot.writeFieldBegin(D_YEAR_FIELD_DESC);
        oprot.writeI64(struct.d_year);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_dow()) {
        oprot.writeFieldBegin(D_DOW_FIELD_DESC);
        oprot.writeI64(struct.d_dow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_moy()) {
        oprot.writeFieldBegin(D_MOY_FIELD_DESC);
        oprot.writeI64(struct.d_moy);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_dom()) {
        oprot.writeFieldBegin(D_DOM_FIELD_DESC);
        oprot.writeI64(struct.d_dom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_qoy()) {
        oprot.writeFieldBegin(D_QOY_FIELD_DESC);
        oprot.writeI64(struct.d_qoy);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_fy_year()) {
        oprot.writeFieldBegin(D_FY_YEAR_FIELD_DESC);
        oprot.writeI64(struct.d_fy_year);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_fy_quarter_seq()) {
        oprot.writeFieldBegin(D_FY_QUARTER_SEQ_FIELD_DESC);
        oprot.writeI64(struct.d_fy_quarter_seq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_fy_week_seq()) {
        oprot.writeFieldBegin(D_FY_WEEK_SEQ_FIELD_DESC);
        oprot.writeI64(struct.d_fy_week_seq);
        oprot.writeFieldEnd();
      }
      if (struct.d_day_name != null) {
        if (struct.isSetD_day_name()) {
          oprot.writeFieldBegin(D_DAY_NAME_FIELD_DESC);
          oprot.writeString(struct.d_day_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_quarter_name != null) {
        if (struct.isSetD_quarter_name()) {
          oprot.writeFieldBegin(D_QUARTER_NAME_FIELD_DESC);
          oprot.writeString(struct.d_quarter_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_holiday != null) {
        if (struct.isSetD_holiday()) {
          oprot.writeFieldBegin(D_HOLIDAY_FIELD_DESC);
          oprot.writeString(struct.d_holiday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_weekend != null) {
        if (struct.isSetD_weekend()) {
          oprot.writeFieldBegin(D_WEEKEND_FIELD_DESC);
          oprot.writeString(struct.d_weekend);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_following_holiday != null) {
        if (struct.isSetD_following_holiday()) {
          oprot.writeFieldBegin(D_FOLLOWING_HOLIDAY_FIELD_DESC);
          oprot.writeString(struct.d_following_holiday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetD_first_dom()) {
        oprot.writeFieldBegin(D_FIRST_DOM_FIELD_DESC);
        oprot.writeI64(struct.d_first_dom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_last_dom()) {
        oprot.writeFieldBegin(D_LAST_DOM_FIELD_DESC);
        oprot.writeI64(struct.d_last_dom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_same_day_ly()) {
        oprot.writeFieldBegin(D_SAME_DAY_LY_FIELD_DESC);
        oprot.writeI64(struct.d_same_day_ly);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_same_day_lq()) {
        oprot.writeFieldBegin(D_SAME_DAY_LQ_FIELD_DESC);
        oprot.writeI64(struct.d_same_day_lq);
        oprot.writeFieldEnd();
      }
      if (struct.d_current_day != null) {
        if (struct.isSetD_current_day()) {
          oprot.writeFieldBegin(D_CURRENT_DAY_FIELD_DESC);
          oprot.writeString(struct.d_current_day);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_current_week != null) {
        if (struct.isSetD_current_week()) {
          oprot.writeFieldBegin(D_CURRENT_WEEK_FIELD_DESC);
          oprot.writeString(struct.d_current_week);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_current_month != null) {
        if (struct.isSetD_current_month()) {
          oprot.writeFieldBegin(D_CURRENT_MONTH_FIELD_DESC);
          oprot.writeString(struct.d_current_month);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_current_quarter != null) {
        if (struct.isSetD_current_quarter()) {
          oprot.writeFieldBegin(D_CURRENT_QUARTER_FIELD_DESC);
          oprot.writeString(struct.d_current_quarter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.d_current_year != null) {
        if (struct.isSetD_current_year()) {
          oprot.writeFieldBegin(D_CURRENT_YEAR_FIELD_DESC);
          oprot.writeString(struct.d_current_year);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateDimTableTupleSchemeFactory implements SchemeFactory {
    public DateDimTableTupleScheme getScheme() {
      return new DateDimTableTupleScheme();
    }
  }

  private static class DateDimTableTupleScheme extends TupleScheme<DateDimTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DateDimTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetD_date_sk()) {
        optionals.set(0);
      }
      if (struct.isSetD_date_id()) {
        optionals.set(1);
      }
      if (struct.isSetD_date()) {
        optionals.set(2);
      }
      if (struct.isSetD_month_seq()) {
        optionals.set(3);
      }
      if (struct.isSetD_week_seq()) {
        optionals.set(4);
      }
      if (struct.isSetD_quarter_seq()) {
        optionals.set(5);
      }
      if (struct.isSetD_year()) {
        optionals.set(6);
      }
      if (struct.isSetD_dow()) {
        optionals.set(7);
      }
      if (struct.isSetD_moy()) {
        optionals.set(8);
      }
      if (struct.isSetD_dom()) {
        optionals.set(9);
      }
      if (struct.isSetD_qoy()) {
        optionals.set(10);
      }
      if (struct.isSetD_fy_year()) {
        optionals.set(11);
      }
      if (struct.isSetD_fy_quarter_seq()) {
        optionals.set(12);
      }
      if (struct.isSetD_fy_week_seq()) {
        optionals.set(13);
      }
      if (struct.isSetD_day_name()) {
        optionals.set(14);
      }
      if (struct.isSetD_quarter_name()) {
        optionals.set(15);
      }
      if (struct.isSetD_holiday()) {
        optionals.set(16);
      }
      if (struct.isSetD_weekend()) {
        optionals.set(17);
      }
      if (struct.isSetD_following_holiday()) {
        optionals.set(18);
      }
      if (struct.isSetD_first_dom()) {
        optionals.set(19);
      }
      if (struct.isSetD_last_dom()) {
        optionals.set(20);
      }
      if (struct.isSetD_same_day_ly()) {
        optionals.set(21);
      }
      if (struct.isSetD_same_day_lq()) {
        optionals.set(22);
      }
      if (struct.isSetD_current_day()) {
        optionals.set(23);
      }
      if (struct.isSetD_current_week()) {
        optionals.set(24);
      }
      if (struct.isSetD_current_month()) {
        optionals.set(25);
      }
      if (struct.isSetD_current_quarter()) {
        optionals.set(26);
      }
      if (struct.isSetD_current_year()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetD_date_sk()) {
        oprot.writeI64(struct.d_date_sk);
      }
      if (struct.isSetD_date_id()) {
        oprot.writeString(struct.d_date_id);
      }
      if (struct.isSetD_date()) {
        oprot.writeString(struct.d_date);
      }
      if (struct.isSetD_month_seq()) {
        oprot.writeI64(struct.d_month_seq);
      }
      if (struct.isSetD_week_seq()) {
        oprot.writeI64(struct.d_week_seq);
      }
      if (struct.isSetD_quarter_seq()) {
        oprot.writeI64(struct.d_quarter_seq);
      }
      if (struct.isSetD_year()) {
        oprot.writeI64(struct.d_year);
      }
      if (struct.isSetD_dow()) {
        oprot.writeI64(struct.d_dow);
      }
      if (struct.isSetD_moy()) {
        oprot.writeI64(struct.d_moy);
      }
      if (struct.isSetD_dom()) {
        oprot.writeI64(struct.d_dom);
      }
      if (struct.isSetD_qoy()) {
        oprot.writeI64(struct.d_qoy);
      }
      if (struct.isSetD_fy_year()) {
        oprot.writeI64(struct.d_fy_year);
      }
      if (struct.isSetD_fy_quarter_seq()) {
        oprot.writeI64(struct.d_fy_quarter_seq);
      }
      if (struct.isSetD_fy_week_seq()) {
        oprot.writeI64(struct.d_fy_week_seq);
      }
      if (struct.isSetD_day_name()) {
        oprot.writeString(struct.d_day_name);
      }
      if (struct.isSetD_quarter_name()) {
        oprot.writeString(struct.d_quarter_name);
      }
      if (struct.isSetD_holiday()) {
        oprot.writeString(struct.d_holiday);
      }
      if (struct.isSetD_weekend()) {
        oprot.writeString(struct.d_weekend);
      }
      if (struct.isSetD_following_holiday()) {
        oprot.writeString(struct.d_following_holiday);
      }
      if (struct.isSetD_first_dom()) {
        oprot.writeI64(struct.d_first_dom);
      }
      if (struct.isSetD_last_dom()) {
        oprot.writeI64(struct.d_last_dom);
      }
      if (struct.isSetD_same_day_ly()) {
        oprot.writeI64(struct.d_same_day_ly);
      }
      if (struct.isSetD_same_day_lq()) {
        oprot.writeI64(struct.d_same_day_lq);
      }
      if (struct.isSetD_current_day()) {
        oprot.writeString(struct.d_current_day);
      }
      if (struct.isSetD_current_week()) {
        oprot.writeString(struct.d_current_week);
      }
      if (struct.isSetD_current_month()) {
        oprot.writeString(struct.d_current_month);
      }
      if (struct.isSetD_current_quarter()) {
        oprot.writeString(struct.d_current_quarter);
      }
      if (struct.isSetD_current_year()) {
        oprot.writeString(struct.d_current_year);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DateDimTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.d_date_sk = iprot.readI64();
        struct.setD_date_skIsSet(true);
      }
      if (incoming.get(1)) {
        struct.d_date_id = iprot.readString();
        struct.setD_date_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.d_date = iprot.readString();
        struct.setD_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.d_month_seq = iprot.readI64();
        struct.setD_month_seqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.d_week_seq = iprot.readI64();
        struct.setD_week_seqIsSet(true);
      }
      if (incoming.get(5)) {
        struct.d_quarter_seq = iprot.readI64();
        struct.setD_quarter_seqIsSet(true);
      }
      if (incoming.get(6)) {
        struct.d_year = iprot.readI64();
        struct.setD_yearIsSet(true);
      }
      if (incoming.get(7)) {
        struct.d_dow = iprot.readI64();
        struct.setD_dowIsSet(true);
      }
      if (incoming.get(8)) {
        struct.d_moy = iprot.readI64();
        struct.setD_moyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.d_dom = iprot.readI64();
        struct.setD_domIsSet(true);
      }
      if (incoming.get(10)) {
        struct.d_qoy = iprot.readI64();
        struct.setD_qoyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.d_fy_year = iprot.readI64();
        struct.setD_fy_yearIsSet(true);
      }
      if (incoming.get(12)) {
        struct.d_fy_quarter_seq = iprot.readI64();
        struct.setD_fy_quarter_seqIsSet(true);
      }
      if (incoming.get(13)) {
        struct.d_fy_week_seq = iprot.readI64();
        struct.setD_fy_week_seqIsSet(true);
      }
      if (incoming.get(14)) {
        struct.d_day_name = iprot.readString();
        struct.setD_day_nameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.d_quarter_name = iprot.readString();
        struct.setD_quarter_nameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.d_holiday = iprot.readString();
        struct.setD_holidayIsSet(true);
      }
      if (incoming.get(17)) {
        struct.d_weekend = iprot.readString();
        struct.setD_weekendIsSet(true);
      }
      if (incoming.get(18)) {
        struct.d_following_holiday = iprot.readString();
        struct.setD_following_holidayIsSet(true);
      }
      if (incoming.get(19)) {
        struct.d_first_dom = iprot.readI64();
        struct.setD_first_domIsSet(true);
      }
      if (incoming.get(20)) {
        struct.d_last_dom = iprot.readI64();
        struct.setD_last_domIsSet(true);
      }
      if (incoming.get(21)) {
        struct.d_same_day_ly = iprot.readI64();
        struct.setD_same_day_lyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.d_same_day_lq = iprot.readI64();
        struct.setD_same_day_lqIsSet(true);
      }
      if (incoming.get(23)) {
        struct.d_current_day = iprot.readString();
        struct.setD_current_dayIsSet(true);
      }
      if (incoming.get(24)) {
        struct.d_current_week = iprot.readString();
        struct.setD_current_weekIsSet(true);
      }
      if (incoming.get(25)) {
        struct.d_current_month = iprot.readString();
        struct.setD_current_monthIsSet(true);
      }
      if (incoming.get(26)) {
        struct.d_current_quarter = iprot.readString();
        struct.setD_current_quarterIsSet(true);
      }
      if (incoming.get(27)) {
        struct.d_current_year = iprot.readString();
        struct.setD_current_yearIsSet(true);
      }
    }
  }

}

