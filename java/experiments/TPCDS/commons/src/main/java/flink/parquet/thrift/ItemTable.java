/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flink.parquet.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-28")
public class ItemTable implements org.apache.thrift.TBase<ItemTable, ItemTable._Fields>, java.io.Serializable, Cloneable, Comparable<ItemTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ItemTable");

  private static final org.apache.thrift.protocol.TField I_ITEM_SK_FIELD_DESC = new org.apache.thrift.protocol.TField("i_item_sk", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField I_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("i_item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_REC_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("i_rec_start_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField I_REC_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("i_rec_end_date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField I_ITEM_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("i_item_desc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField I_CURRENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("i_current_price", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField I_WHOLESALE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("i_wholesale_cost", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField I_BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("i_brand_id", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField I_BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("i_brand", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField I_CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("i_class_id", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField I_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("i_class", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField I_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("i_category_id", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField I_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("i_category", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField I_MANUFACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("i_manufact_id", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField I_MANUFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("i_manufact", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField I_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("i_size", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField I_FORMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("i_formulation", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField I_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("i_color", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField I_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("i_units", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField I_CONTAINER_FIELD_DESC = new org.apache.thrift.protocol.TField("i_container", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField I_MANAGER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("i_manager_id", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField I_PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("i_product_name", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ItemTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ItemTableTupleSchemeFactory());
  }

  public long i_item_sk; // optional
  public String i_item_id; // optional
  public String i_rec_start_date; // optional
  public String i_rec_end_date; // optional
  public String i_item_desc; // optional
  public double i_current_price; // optional
  public double i_wholesale_cost; // optional
  public long i_brand_id; // optional
  public String i_brand; // optional
  public long i_class_id; // optional
  public String i_class; // optional
  public long i_category_id; // optional
  public String i_category; // optional
  public long i_manufact_id; // optional
  public String i_manufact; // optional
  public String i_size; // optional
  public String i_formulation; // optional
  public String i_color; // optional
  public String i_units; // optional
  public String i_container; // optional
  public long i_manager_id; // optional
  public String i_product_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_ITEM_SK((short)1, "i_item_sk"),
    I_ITEM_ID((short)2, "i_item_id"),
    I_REC_START_DATE((short)3, "i_rec_start_date"),
    I_REC_END_DATE((short)4, "i_rec_end_date"),
    I_ITEM_DESC((short)5, "i_item_desc"),
    I_CURRENT_PRICE((short)6, "i_current_price"),
    I_WHOLESALE_COST((short)7, "i_wholesale_cost"),
    I_BRAND_ID((short)8, "i_brand_id"),
    I_BRAND((short)9, "i_brand"),
    I_CLASS_ID((short)10, "i_class_id"),
    I_CLASS((short)11, "i_class"),
    I_CATEGORY_ID((short)12, "i_category_id"),
    I_CATEGORY((short)13, "i_category"),
    I_MANUFACT_ID((short)14, "i_manufact_id"),
    I_MANUFACT((short)15, "i_manufact"),
    I_SIZE((short)16, "i_size"),
    I_FORMULATION((short)17, "i_formulation"),
    I_COLOR((short)18, "i_color"),
    I_UNITS((short)19, "i_units"),
    I_CONTAINER((short)20, "i_container"),
    I_MANAGER_ID((short)21, "i_manager_id"),
    I_PRODUCT_NAME((short)22, "i_product_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_ITEM_SK
          return I_ITEM_SK;
        case 2: // I_ITEM_ID
          return I_ITEM_ID;
        case 3: // I_REC_START_DATE
          return I_REC_START_DATE;
        case 4: // I_REC_END_DATE
          return I_REC_END_DATE;
        case 5: // I_ITEM_DESC
          return I_ITEM_DESC;
        case 6: // I_CURRENT_PRICE
          return I_CURRENT_PRICE;
        case 7: // I_WHOLESALE_COST
          return I_WHOLESALE_COST;
        case 8: // I_BRAND_ID
          return I_BRAND_ID;
        case 9: // I_BRAND
          return I_BRAND;
        case 10: // I_CLASS_ID
          return I_CLASS_ID;
        case 11: // I_CLASS
          return I_CLASS;
        case 12: // I_CATEGORY_ID
          return I_CATEGORY_ID;
        case 13: // I_CATEGORY
          return I_CATEGORY;
        case 14: // I_MANUFACT_ID
          return I_MANUFACT_ID;
        case 15: // I_MANUFACT
          return I_MANUFACT;
        case 16: // I_SIZE
          return I_SIZE;
        case 17: // I_FORMULATION
          return I_FORMULATION;
        case 18: // I_COLOR
          return I_COLOR;
        case 19: // I_UNITS
          return I_UNITS;
        case 20: // I_CONTAINER
          return I_CONTAINER;
        case 21: // I_MANAGER_ID
          return I_MANAGER_ID;
        case 22: // I_PRODUCT_NAME
          return I_PRODUCT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __I_ITEM_SK_ISSET_ID = 0;
  private static final int __I_CURRENT_PRICE_ISSET_ID = 1;
  private static final int __I_WHOLESALE_COST_ISSET_ID = 2;
  private static final int __I_BRAND_ID_ISSET_ID = 3;
  private static final int __I_CLASS_ID_ISSET_ID = 4;
  private static final int __I_CATEGORY_ID_ISSET_ID = 5;
  private static final int __I_MANUFACT_ID_ISSET_ID = 6;
  private static final int __I_MANAGER_ID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.I_ITEM_SK,_Fields.I_ITEM_ID,_Fields.I_REC_START_DATE,_Fields.I_REC_END_DATE,_Fields.I_ITEM_DESC,_Fields.I_CURRENT_PRICE,_Fields.I_WHOLESALE_COST,_Fields.I_BRAND_ID,_Fields.I_BRAND,_Fields.I_CLASS_ID,_Fields.I_CLASS,_Fields.I_CATEGORY_ID,_Fields.I_CATEGORY,_Fields.I_MANUFACT_ID,_Fields.I_MANUFACT,_Fields.I_SIZE,_Fields.I_FORMULATION,_Fields.I_COLOR,_Fields.I_UNITS,_Fields.I_CONTAINER,_Fields.I_MANAGER_ID,_Fields.I_PRODUCT_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_ITEM_SK, new org.apache.thrift.meta_data.FieldMetaData("i_item_sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("i_item_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_REC_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("i_rec_start_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_REC_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("i_rec_end_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_ITEM_DESC, new org.apache.thrift.meta_data.FieldMetaData("i_item_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_CURRENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("i_current_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.I_WHOLESALE_COST, new org.apache.thrift.meta_data.FieldMetaData("i_wholesale_cost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.I_BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("i_brand_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_BRAND, new org.apache.thrift.meta_data.FieldMetaData("i_brand", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("i_class_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_CLASS, new org.apache.thrift.meta_data.FieldMetaData("i_class", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("i_category_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("i_category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_MANUFACT_ID, new org.apache.thrift.meta_data.FieldMetaData("i_manufact_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_MANUFACT, new org.apache.thrift.meta_data.FieldMetaData("i_manufact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_SIZE, new org.apache.thrift.meta_data.FieldMetaData("i_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_FORMULATION, new org.apache.thrift.meta_data.FieldMetaData("i_formulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_COLOR, new org.apache.thrift.meta_data.FieldMetaData("i_color", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_UNITS, new org.apache.thrift.meta_data.FieldMetaData("i_units", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_CONTAINER, new org.apache.thrift.meta_data.FieldMetaData("i_container", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_MANAGER_ID, new org.apache.thrift.meta_data.FieldMetaData("i_manager_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("i_product_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ItemTable.class, metaDataMap);
  }

  public ItemTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ItemTable(ItemTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.i_item_sk = other.i_item_sk;
    if (other.isSetI_item_id()) {
      this.i_item_id = other.i_item_id;
    }
    if (other.isSetI_rec_start_date()) {
      this.i_rec_start_date = other.i_rec_start_date;
    }
    if (other.isSetI_rec_end_date()) {
      this.i_rec_end_date = other.i_rec_end_date;
    }
    if (other.isSetI_item_desc()) {
      this.i_item_desc = other.i_item_desc;
    }
    this.i_current_price = other.i_current_price;
    this.i_wholesale_cost = other.i_wholesale_cost;
    this.i_brand_id = other.i_brand_id;
    if (other.isSetI_brand()) {
      this.i_brand = other.i_brand;
    }
    this.i_class_id = other.i_class_id;
    if (other.isSetI_class()) {
      this.i_class = other.i_class;
    }
    this.i_category_id = other.i_category_id;
    if (other.isSetI_category()) {
      this.i_category = other.i_category;
    }
    this.i_manufact_id = other.i_manufact_id;
    if (other.isSetI_manufact()) {
      this.i_manufact = other.i_manufact;
    }
    if (other.isSetI_size()) {
      this.i_size = other.i_size;
    }
    if (other.isSetI_formulation()) {
      this.i_formulation = other.i_formulation;
    }
    if (other.isSetI_color()) {
      this.i_color = other.i_color;
    }
    if (other.isSetI_units()) {
      this.i_units = other.i_units;
    }
    if (other.isSetI_container()) {
      this.i_container = other.i_container;
    }
    this.i_manager_id = other.i_manager_id;
    if (other.isSetI_product_name()) {
      this.i_product_name = other.i_product_name;
    }
  }

  public ItemTable deepCopy() {
    return new ItemTable(this);
  }

  @Override
  public void clear() {
    setI_item_skIsSet(false);
    this.i_item_sk = 0;
    this.i_item_id = null;
    this.i_rec_start_date = null;
    this.i_rec_end_date = null;
    this.i_item_desc = null;
    setI_current_priceIsSet(false);
    this.i_current_price = 0.0;
    setI_wholesale_costIsSet(false);
    this.i_wholesale_cost = 0.0;
    setI_brand_idIsSet(false);
    this.i_brand_id = 0;
    this.i_brand = null;
    setI_class_idIsSet(false);
    this.i_class_id = 0;
    this.i_class = null;
    setI_category_idIsSet(false);
    this.i_category_id = 0;
    this.i_category = null;
    setI_manufact_idIsSet(false);
    this.i_manufact_id = 0;
    this.i_manufact = null;
    this.i_size = null;
    this.i_formulation = null;
    this.i_color = null;
    this.i_units = null;
    this.i_container = null;
    setI_manager_idIsSet(false);
    this.i_manager_id = 0;
    this.i_product_name = null;
  }

  public long getI_item_sk() {
    return this.i_item_sk;
  }

  public ItemTable setI_item_sk(long i_item_sk) {
    this.i_item_sk = i_item_sk;
    setI_item_skIsSet(true);
    return this;
  }

  public void unsetI_item_sk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_ITEM_SK_ISSET_ID);
  }

  /** Returns true if field i_item_sk is set (has been assigned a value) and false otherwise */
  public boolean isSetI_item_sk() {
    return EncodingUtils.testBit(__isset_bitfield, __I_ITEM_SK_ISSET_ID);
  }

  public void setI_item_skIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_ITEM_SK_ISSET_ID, value);
  }

  public String getI_item_id() {
    return this.i_item_id;
  }

  public ItemTable setI_item_id(String i_item_id) {
    this.i_item_id = i_item_id;
    return this;
  }

  public void unsetI_item_id() {
    this.i_item_id = null;
  }

  /** Returns true if field i_item_id is set (has been assigned a value) and false otherwise */
  public boolean isSetI_item_id() {
    return this.i_item_id != null;
  }

  public void setI_item_idIsSet(boolean value) {
    if (!value) {
      this.i_item_id = null;
    }
  }

  public String getI_rec_start_date() {
    return this.i_rec_start_date;
  }

  public ItemTable setI_rec_start_date(String i_rec_start_date) {
    this.i_rec_start_date = i_rec_start_date;
    return this;
  }

  public void unsetI_rec_start_date() {
    this.i_rec_start_date = null;
  }

  /** Returns true if field i_rec_start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetI_rec_start_date() {
    return this.i_rec_start_date != null;
  }

  public void setI_rec_start_dateIsSet(boolean value) {
    if (!value) {
      this.i_rec_start_date = null;
    }
  }

  public String getI_rec_end_date() {
    return this.i_rec_end_date;
  }

  public ItemTable setI_rec_end_date(String i_rec_end_date) {
    this.i_rec_end_date = i_rec_end_date;
    return this;
  }

  public void unsetI_rec_end_date() {
    this.i_rec_end_date = null;
  }

  /** Returns true if field i_rec_end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetI_rec_end_date() {
    return this.i_rec_end_date != null;
  }

  public void setI_rec_end_dateIsSet(boolean value) {
    if (!value) {
      this.i_rec_end_date = null;
    }
  }

  public String getI_item_desc() {
    return this.i_item_desc;
  }

  public ItemTable setI_item_desc(String i_item_desc) {
    this.i_item_desc = i_item_desc;
    return this;
  }

  public void unsetI_item_desc() {
    this.i_item_desc = null;
  }

  /** Returns true if field i_item_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetI_item_desc() {
    return this.i_item_desc != null;
  }

  public void setI_item_descIsSet(boolean value) {
    if (!value) {
      this.i_item_desc = null;
    }
  }

  public double getI_current_price() {
    return this.i_current_price;
  }

  public ItemTable setI_current_price(double i_current_price) {
    this.i_current_price = i_current_price;
    setI_current_priceIsSet(true);
    return this;
  }

  public void unsetI_current_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_CURRENT_PRICE_ISSET_ID);
  }

  /** Returns true if field i_current_price is set (has been assigned a value) and false otherwise */
  public boolean isSetI_current_price() {
    return EncodingUtils.testBit(__isset_bitfield, __I_CURRENT_PRICE_ISSET_ID);
  }

  public void setI_current_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_CURRENT_PRICE_ISSET_ID, value);
  }

  public double getI_wholesale_cost() {
    return this.i_wholesale_cost;
  }

  public ItemTable setI_wholesale_cost(double i_wholesale_cost) {
    this.i_wholesale_cost = i_wholesale_cost;
    setI_wholesale_costIsSet(true);
    return this;
  }

  public void unsetI_wholesale_cost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_WHOLESALE_COST_ISSET_ID);
  }

  /** Returns true if field i_wholesale_cost is set (has been assigned a value) and false otherwise */
  public boolean isSetI_wholesale_cost() {
    return EncodingUtils.testBit(__isset_bitfield, __I_WHOLESALE_COST_ISSET_ID);
  }

  public void setI_wholesale_costIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_WHOLESALE_COST_ISSET_ID, value);
  }

  public long getI_brand_id() {
    return this.i_brand_id;
  }

  public ItemTable setI_brand_id(long i_brand_id) {
    this.i_brand_id = i_brand_id;
    setI_brand_idIsSet(true);
    return this;
  }

  public void unsetI_brand_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_BRAND_ID_ISSET_ID);
  }

  /** Returns true if field i_brand_id is set (has been assigned a value) and false otherwise */
  public boolean isSetI_brand_id() {
    return EncodingUtils.testBit(__isset_bitfield, __I_BRAND_ID_ISSET_ID);
  }

  public void setI_brand_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_BRAND_ID_ISSET_ID, value);
  }

  public String getI_brand() {
    return this.i_brand;
  }

  public ItemTable setI_brand(String i_brand) {
    this.i_brand = i_brand;
    return this;
  }

  public void unsetI_brand() {
    this.i_brand = null;
  }

  /** Returns true if field i_brand is set (has been assigned a value) and false otherwise */
  public boolean isSetI_brand() {
    return this.i_brand != null;
  }

  public void setI_brandIsSet(boolean value) {
    if (!value) {
      this.i_brand = null;
    }
  }

  public long getI_class_id() {
    return this.i_class_id;
  }

  public ItemTable setI_class_id(long i_class_id) {
    this.i_class_id = i_class_id;
    setI_class_idIsSet(true);
    return this;
  }

  public void unsetI_class_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_CLASS_ID_ISSET_ID);
  }

  /** Returns true if field i_class_id is set (has been assigned a value) and false otherwise */
  public boolean isSetI_class_id() {
    return EncodingUtils.testBit(__isset_bitfield, __I_CLASS_ID_ISSET_ID);
  }

  public void setI_class_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_CLASS_ID_ISSET_ID, value);
  }

  public String getI_class() {
    return this.i_class;
  }

  public ItemTable setI_class(String i_class) {
    this.i_class = i_class;
    return this;
  }

  public void unsetI_class() {
    this.i_class = null;
  }

  /** Returns true if field i_class is set (has been assigned a value) and false otherwise */
  public boolean isSetI_class() {
    return this.i_class != null;
  }

  public void setI_classIsSet(boolean value) {
    if (!value) {
      this.i_class = null;
    }
  }

  public long getI_category_id() {
    return this.i_category_id;
  }

  public ItemTable setI_category_id(long i_category_id) {
    this.i_category_id = i_category_id;
    setI_category_idIsSet(true);
    return this;
  }

  public void unsetI_category_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_CATEGORY_ID_ISSET_ID);
  }

  /** Returns true if field i_category_id is set (has been assigned a value) and false otherwise */
  public boolean isSetI_category_id() {
    return EncodingUtils.testBit(__isset_bitfield, __I_CATEGORY_ID_ISSET_ID);
  }

  public void setI_category_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_CATEGORY_ID_ISSET_ID, value);
  }

  public String getI_category() {
    return this.i_category;
  }

  public ItemTable setI_category(String i_category) {
    this.i_category = i_category;
    return this;
  }

  public void unsetI_category() {
    this.i_category = null;
  }

  /** Returns true if field i_category is set (has been assigned a value) and false otherwise */
  public boolean isSetI_category() {
    return this.i_category != null;
  }

  public void setI_categoryIsSet(boolean value) {
    if (!value) {
      this.i_category = null;
    }
  }

  public long getI_manufact_id() {
    return this.i_manufact_id;
  }

  public ItemTable setI_manufact_id(long i_manufact_id) {
    this.i_manufact_id = i_manufact_id;
    setI_manufact_idIsSet(true);
    return this;
  }

  public void unsetI_manufact_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_MANUFACT_ID_ISSET_ID);
  }

  /** Returns true if field i_manufact_id is set (has been assigned a value) and false otherwise */
  public boolean isSetI_manufact_id() {
    return EncodingUtils.testBit(__isset_bitfield, __I_MANUFACT_ID_ISSET_ID);
  }

  public void setI_manufact_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_MANUFACT_ID_ISSET_ID, value);
  }

  public String getI_manufact() {
    return this.i_manufact;
  }

  public ItemTable setI_manufact(String i_manufact) {
    this.i_manufact = i_manufact;
    return this;
  }

  public void unsetI_manufact() {
    this.i_manufact = null;
  }

  /** Returns true if field i_manufact is set (has been assigned a value) and false otherwise */
  public boolean isSetI_manufact() {
    return this.i_manufact != null;
  }

  public void setI_manufactIsSet(boolean value) {
    if (!value) {
      this.i_manufact = null;
    }
  }

  public String getI_size() {
    return this.i_size;
  }

  public ItemTable setI_size(String i_size) {
    this.i_size = i_size;
    return this;
  }

  public void unsetI_size() {
    this.i_size = null;
  }

  /** Returns true if field i_size is set (has been assigned a value) and false otherwise */
  public boolean isSetI_size() {
    return this.i_size != null;
  }

  public void setI_sizeIsSet(boolean value) {
    if (!value) {
      this.i_size = null;
    }
  }

  public String getI_formulation() {
    return this.i_formulation;
  }

  public ItemTable setI_formulation(String i_formulation) {
    this.i_formulation = i_formulation;
    return this;
  }

  public void unsetI_formulation() {
    this.i_formulation = null;
  }

  /** Returns true if field i_formulation is set (has been assigned a value) and false otherwise */
  public boolean isSetI_formulation() {
    return this.i_formulation != null;
  }

  public void setI_formulationIsSet(boolean value) {
    if (!value) {
      this.i_formulation = null;
    }
  }

  public String getI_color() {
    return this.i_color;
  }

  public ItemTable setI_color(String i_color) {
    this.i_color = i_color;
    return this;
  }

  public void unsetI_color() {
    this.i_color = null;
  }

  /** Returns true if field i_color is set (has been assigned a value) and false otherwise */
  public boolean isSetI_color() {
    return this.i_color != null;
  }

  public void setI_colorIsSet(boolean value) {
    if (!value) {
      this.i_color = null;
    }
  }

  public String getI_units() {
    return this.i_units;
  }

  public ItemTable setI_units(String i_units) {
    this.i_units = i_units;
    return this;
  }

  public void unsetI_units() {
    this.i_units = null;
  }

  /** Returns true if field i_units is set (has been assigned a value) and false otherwise */
  public boolean isSetI_units() {
    return this.i_units != null;
  }

  public void setI_unitsIsSet(boolean value) {
    if (!value) {
      this.i_units = null;
    }
  }

  public String getI_container() {
    return this.i_container;
  }

  public ItemTable setI_container(String i_container) {
    this.i_container = i_container;
    return this;
  }

  public void unsetI_container() {
    this.i_container = null;
  }

  /** Returns true if field i_container is set (has been assigned a value) and false otherwise */
  public boolean isSetI_container() {
    return this.i_container != null;
  }

  public void setI_containerIsSet(boolean value) {
    if (!value) {
      this.i_container = null;
    }
  }

  public long getI_manager_id() {
    return this.i_manager_id;
  }

  public ItemTable setI_manager_id(long i_manager_id) {
    this.i_manager_id = i_manager_id;
    setI_manager_idIsSet(true);
    return this;
  }

  public void unsetI_manager_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_MANAGER_ID_ISSET_ID);
  }

  /** Returns true if field i_manager_id is set (has been assigned a value) and false otherwise */
  public boolean isSetI_manager_id() {
    return EncodingUtils.testBit(__isset_bitfield, __I_MANAGER_ID_ISSET_ID);
  }

  public void setI_manager_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_MANAGER_ID_ISSET_ID, value);
  }

  public String getI_product_name() {
    return this.i_product_name;
  }

  public ItemTable setI_product_name(String i_product_name) {
    this.i_product_name = i_product_name;
    return this;
  }

  public void unsetI_product_name() {
    this.i_product_name = null;
  }

  /** Returns true if field i_product_name is set (has been assigned a value) and false otherwise */
  public boolean isSetI_product_name() {
    return this.i_product_name != null;
  }

  public void setI_product_nameIsSet(boolean value) {
    if (!value) {
      this.i_product_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_ITEM_SK:
      if (value == null) {
        unsetI_item_sk();
      } else {
        setI_item_sk((Long)value);
      }
      break;

    case I_ITEM_ID:
      if (value == null) {
        unsetI_item_id();
      } else {
        setI_item_id((String)value);
      }
      break;

    case I_REC_START_DATE:
      if (value == null) {
        unsetI_rec_start_date();
      } else {
        setI_rec_start_date((String)value);
      }
      break;

    case I_REC_END_DATE:
      if (value == null) {
        unsetI_rec_end_date();
      } else {
        setI_rec_end_date((String)value);
      }
      break;

    case I_ITEM_DESC:
      if (value == null) {
        unsetI_item_desc();
      } else {
        setI_item_desc((String)value);
      }
      break;

    case I_CURRENT_PRICE:
      if (value == null) {
        unsetI_current_price();
      } else {
        setI_current_price((Double)value);
      }
      break;

    case I_WHOLESALE_COST:
      if (value == null) {
        unsetI_wholesale_cost();
      } else {
        setI_wholesale_cost((Double)value);
      }
      break;

    case I_BRAND_ID:
      if (value == null) {
        unsetI_brand_id();
      } else {
        setI_brand_id((Long)value);
      }
      break;

    case I_BRAND:
      if (value == null) {
        unsetI_brand();
      } else {
        setI_brand((String)value);
      }
      break;

    case I_CLASS_ID:
      if (value == null) {
        unsetI_class_id();
      } else {
        setI_class_id((Long)value);
      }
      break;

    case I_CLASS:
      if (value == null) {
        unsetI_class();
      } else {
        setI_class((String)value);
      }
      break;

    case I_CATEGORY_ID:
      if (value == null) {
        unsetI_category_id();
      } else {
        setI_category_id((Long)value);
      }
      break;

    case I_CATEGORY:
      if (value == null) {
        unsetI_category();
      } else {
        setI_category((String)value);
      }
      break;

    case I_MANUFACT_ID:
      if (value == null) {
        unsetI_manufact_id();
      } else {
        setI_manufact_id((Long)value);
      }
      break;

    case I_MANUFACT:
      if (value == null) {
        unsetI_manufact();
      } else {
        setI_manufact((String)value);
      }
      break;

    case I_SIZE:
      if (value == null) {
        unsetI_size();
      } else {
        setI_size((String)value);
      }
      break;

    case I_FORMULATION:
      if (value == null) {
        unsetI_formulation();
      } else {
        setI_formulation((String)value);
      }
      break;

    case I_COLOR:
      if (value == null) {
        unsetI_color();
      } else {
        setI_color((String)value);
      }
      break;

    case I_UNITS:
      if (value == null) {
        unsetI_units();
      } else {
        setI_units((String)value);
      }
      break;

    case I_CONTAINER:
      if (value == null) {
        unsetI_container();
      } else {
        setI_container((String)value);
      }
      break;

    case I_MANAGER_ID:
      if (value == null) {
        unsetI_manager_id();
      } else {
        setI_manager_id((Long)value);
      }
      break;

    case I_PRODUCT_NAME:
      if (value == null) {
        unsetI_product_name();
      } else {
        setI_product_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_ITEM_SK:
      return Long.valueOf(getI_item_sk());

    case I_ITEM_ID:
      return getI_item_id();

    case I_REC_START_DATE:
      return getI_rec_start_date();

    case I_REC_END_DATE:
      return getI_rec_end_date();

    case I_ITEM_DESC:
      return getI_item_desc();

    case I_CURRENT_PRICE:
      return Double.valueOf(getI_current_price());

    case I_WHOLESALE_COST:
      return Double.valueOf(getI_wholesale_cost());

    case I_BRAND_ID:
      return Long.valueOf(getI_brand_id());

    case I_BRAND:
      return getI_brand();

    case I_CLASS_ID:
      return Long.valueOf(getI_class_id());

    case I_CLASS:
      return getI_class();

    case I_CATEGORY_ID:
      return Long.valueOf(getI_category_id());

    case I_CATEGORY:
      return getI_category();

    case I_MANUFACT_ID:
      return Long.valueOf(getI_manufact_id());

    case I_MANUFACT:
      return getI_manufact();

    case I_SIZE:
      return getI_size();

    case I_FORMULATION:
      return getI_formulation();

    case I_COLOR:
      return getI_color();

    case I_UNITS:
      return getI_units();

    case I_CONTAINER:
      return getI_container();

    case I_MANAGER_ID:
      return Long.valueOf(getI_manager_id());

    case I_PRODUCT_NAME:
      return getI_product_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_ITEM_SK:
      return isSetI_item_sk();
    case I_ITEM_ID:
      return isSetI_item_id();
    case I_REC_START_DATE:
      return isSetI_rec_start_date();
    case I_REC_END_DATE:
      return isSetI_rec_end_date();
    case I_ITEM_DESC:
      return isSetI_item_desc();
    case I_CURRENT_PRICE:
      return isSetI_current_price();
    case I_WHOLESALE_COST:
      return isSetI_wholesale_cost();
    case I_BRAND_ID:
      return isSetI_brand_id();
    case I_BRAND:
      return isSetI_brand();
    case I_CLASS_ID:
      return isSetI_class_id();
    case I_CLASS:
      return isSetI_class();
    case I_CATEGORY_ID:
      return isSetI_category_id();
    case I_CATEGORY:
      return isSetI_category();
    case I_MANUFACT_ID:
      return isSetI_manufact_id();
    case I_MANUFACT:
      return isSetI_manufact();
    case I_SIZE:
      return isSetI_size();
    case I_FORMULATION:
      return isSetI_formulation();
    case I_COLOR:
      return isSetI_color();
    case I_UNITS:
      return isSetI_units();
    case I_CONTAINER:
      return isSetI_container();
    case I_MANAGER_ID:
      return isSetI_manager_id();
    case I_PRODUCT_NAME:
      return isSetI_product_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ItemTable)
      return this.equals((ItemTable)that);
    return false;
  }

  public boolean equals(ItemTable that) {
    if (that == null)
      return false;

    boolean this_present_i_item_sk = true && this.isSetI_item_sk();
    boolean that_present_i_item_sk = true && that.isSetI_item_sk();
    if (this_present_i_item_sk || that_present_i_item_sk) {
      if (!(this_present_i_item_sk && that_present_i_item_sk))
        return false;
      if (this.i_item_sk != that.i_item_sk)
        return false;
    }

    boolean this_present_i_item_id = true && this.isSetI_item_id();
    boolean that_present_i_item_id = true && that.isSetI_item_id();
    if (this_present_i_item_id || that_present_i_item_id) {
      if (!(this_present_i_item_id && that_present_i_item_id))
        return false;
      if (!this.i_item_id.equals(that.i_item_id))
        return false;
    }

    boolean this_present_i_rec_start_date = true && this.isSetI_rec_start_date();
    boolean that_present_i_rec_start_date = true && that.isSetI_rec_start_date();
    if (this_present_i_rec_start_date || that_present_i_rec_start_date) {
      if (!(this_present_i_rec_start_date && that_present_i_rec_start_date))
        return false;
      if (!this.i_rec_start_date.equals(that.i_rec_start_date))
        return false;
    }

    boolean this_present_i_rec_end_date = true && this.isSetI_rec_end_date();
    boolean that_present_i_rec_end_date = true && that.isSetI_rec_end_date();
    if (this_present_i_rec_end_date || that_present_i_rec_end_date) {
      if (!(this_present_i_rec_end_date && that_present_i_rec_end_date))
        return false;
      if (!this.i_rec_end_date.equals(that.i_rec_end_date))
        return false;
    }

    boolean this_present_i_item_desc = true && this.isSetI_item_desc();
    boolean that_present_i_item_desc = true && that.isSetI_item_desc();
    if (this_present_i_item_desc || that_present_i_item_desc) {
      if (!(this_present_i_item_desc && that_present_i_item_desc))
        return false;
      if (!this.i_item_desc.equals(that.i_item_desc))
        return false;
    }

    boolean this_present_i_current_price = true && this.isSetI_current_price();
    boolean that_present_i_current_price = true && that.isSetI_current_price();
    if (this_present_i_current_price || that_present_i_current_price) {
      if (!(this_present_i_current_price && that_present_i_current_price))
        return false;
      if (this.i_current_price != that.i_current_price)
        return false;
    }

    boolean this_present_i_wholesale_cost = true && this.isSetI_wholesale_cost();
    boolean that_present_i_wholesale_cost = true && that.isSetI_wholesale_cost();
    if (this_present_i_wholesale_cost || that_present_i_wholesale_cost) {
      if (!(this_present_i_wholesale_cost && that_present_i_wholesale_cost))
        return false;
      if (this.i_wholesale_cost != that.i_wholesale_cost)
        return false;
    }

    boolean this_present_i_brand_id = true && this.isSetI_brand_id();
    boolean that_present_i_brand_id = true && that.isSetI_brand_id();
    if (this_present_i_brand_id || that_present_i_brand_id) {
      if (!(this_present_i_brand_id && that_present_i_brand_id))
        return false;
      if (this.i_brand_id != that.i_brand_id)
        return false;
    }

    boolean this_present_i_brand = true && this.isSetI_brand();
    boolean that_present_i_brand = true && that.isSetI_brand();
    if (this_present_i_brand || that_present_i_brand) {
      if (!(this_present_i_brand && that_present_i_brand))
        return false;
      if (!this.i_brand.equals(that.i_brand))
        return false;
    }

    boolean this_present_i_class_id = true && this.isSetI_class_id();
    boolean that_present_i_class_id = true && that.isSetI_class_id();
    if (this_present_i_class_id || that_present_i_class_id) {
      if (!(this_present_i_class_id && that_present_i_class_id))
        return false;
      if (this.i_class_id != that.i_class_id)
        return false;
    }

    boolean this_present_i_class = true && this.isSetI_class();
    boolean that_present_i_class = true && that.isSetI_class();
    if (this_present_i_class || that_present_i_class) {
      if (!(this_present_i_class && that_present_i_class))
        return false;
      if (!this.i_class.equals(that.i_class))
        return false;
    }

    boolean this_present_i_category_id = true && this.isSetI_category_id();
    boolean that_present_i_category_id = true && that.isSetI_category_id();
    if (this_present_i_category_id || that_present_i_category_id) {
      if (!(this_present_i_category_id && that_present_i_category_id))
        return false;
      if (this.i_category_id != that.i_category_id)
        return false;
    }

    boolean this_present_i_category = true && this.isSetI_category();
    boolean that_present_i_category = true && that.isSetI_category();
    if (this_present_i_category || that_present_i_category) {
      if (!(this_present_i_category && that_present_i_category))
        return false;
      if (!this.i_category.equals(that.i_category))
        return false;
    }

    boolean this_present_i_manufact_id = true && this.isSetI_manufact_id();
    boolean that_present_i_manufact_id = true && that.isSetI_manufact_id();
    if (this_present_i_manufact_id || that_present_i_manufact_id) {
      if (!(this_present_i_manufact_id && that_present_i_manufact_id))
        return false;
      if (this.i_manufact_id != that.i_manufact_id)
        return false;
    }

    boolean this_present_i_manufact = true && this.isSetI_manufact();
    boolean that_present_i_manufact = true && that.isSetI_manufact();
    if (this_present_i_manufact || that_present_i_manufact) {
      if (!(this_present_i_manufact && that_present_i_manufact))
        return false;
      if (!this.i_manufact.equals(that.i_manufact))
        return false;
    }

    boolean this_present_i_size = true && this.isSetI_size();
    boolean that_present_i_size = true && that.isSetI_size();
    if (this_present_i_size || that_present_i_size) {
      if (!(this_present_i_size && that_present_i_size))
        return false;
      if (!this.i_size.equals(that.i_size))
        return false;
    }

    boolean this_present_i_formulation = true && this.isSetI_formulation();
    boolean that_present_i_formulation = true && that.isSetI_formulation();
    if (this_present_i_formulation || that_present_i_formulation) {
      if (!(this_present_i_formulation && that_present_i_formulation))
        return false;
      if (!this.i_formulation.equals(that.i_formulation))
        return false;
    }

    boolean this_present_i_color = true && this.isSetI_color();
    boolean that_present_i_color = true && that.isSetI_color();
    if (this_present_i_color || that_present_i_color) {
      if (!(this_present_i_color && that_present_i_color))
        return false;
      if (!this.i_color.equals(that.i_color))
        return false;
    }

    boolean this_present_i_units = true && this.isSetI_units();
    boolean that_present_i_units = true && that.isSetI_units();
    if (this_present_i_units || that_present_i_units) {
      if (!(this_present_i_units && that_present_i_units))
        return false;
      if (!this.i_units.equals(that.i_units))
        return false;
    }

    boolean this_present_i_container = true && this.isSetI_container();
    boolean that_present_i_container = true && that.isSetI_container();
    if (this_present_i_container || that_present_i_container) {
      if (!(this_present_i_container && that_present_i_container))
        return false;
      if (!this.i_container.equals(that.i_container))
        return false;
    }

    boolean this_present_i_manager_id = true && this.isSetI_manager_id();
    boolean that_present_i_manager_id = true && that.isSetI_manager_id();
    if (this_present_i_manager_id || that_present_i_manager_id) {
      if (!(this_present_i_manager_id && that_present_i_manager_id))
        return false;
      if (this.i_manager_id != that.i_manager_id)
        return false;
    }

    boolean this_present_i_product_name = true && this.isSetI_product_name();
    boolean that_present_i_product_name = true && that.isSetI_product_name();
    if (this_present_i_product_name || that_present_i_product_name) {
      if (!(this_present_i_product_name && that_present_i_product_name))
        return false;
      if (!this.i_product_name.equals(that.i_product_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_i_item_sk = true && (isSetI_item_sk());
    list.add(present_i_item_sk);
    if (present_i_item_sk)
      list.add(i_item_sk);

    boolean present_i_item_id = true && (isSetI_item_id());
    list.add(present_i_item_id);
    if (present_i_item_id)
      list.add(i_item_id);

    boolean present_i_rec_start_date = true && (isSetI_rec_start_date());
    list.add(present_i_rec_start_date);
    if (present_i_rec_start_date)
      list.add(i_rec_start_date);

    boolean present_i_rec_end_date = true && (isSetI_rec_end_date());
    list.add(present_i_rec_end_date);
    if (present_i_rec_end_date)
      list.add(i_rec_end_date);

    boolean present_i_item_desc = true && (isSetI_item_desc());
    list.add(present_i_item_desc);
    if (present_i_item_desc)
      list.add(i_item_desc);

    boolean present_i_current_price = true && (isSetI_current_price());
    list.add(present_i_current_price);
    if (present_i_current_price)
      list.add(i_current_price);

    boolean present_i_wholesale_cost = true && (isSetI_wholesale_cost());
    list.add(present_i_wholesale_cost);
    if (present_i_wholesale_cost)
      list.add(i_wholesale_cost);

    boolean present_i_brand_id = true && (isSetI_brand_id());
    list.add(present_i_brand_id);
    if (present_i_brand_id)
      list.add(i_brand_id);

    boolean present_i_brand = true && (isSetI_brand());
    list.add(present_i_brand);
    if (present_i_brand)
      list.add(i_brand);

    boolean present_i_class_id = true && (isSetI_class_id());
    list.add(present_i_class_id);
    if (present_i_class_id)
      list.add(i_class_id);

    boolean present_i_class = true && (isSetI_class());
    list.add(present_i_class);
    if (present_i_class)
      list.add(i_class);

    boolean present_i_category_id = true && (isSetI_category_id());
    list.add(present_i_category_id);
    if (present_i_category_id)
      list.add(i_category_id);

    boolean present_i_category = true && (isSetI_category());
    list.add(present_i_category);
    if (present_i_category)
      list.add(i_category);

    boolean present_i_manufact_id = true && (isSetI_manufact_id());
    list.add(present_i_manufact_id);
    if (present_i_manufact_id)
      list.add(i_manufact_id);

    boolean present_i_manufact = true && (isSetI_manufact());
    list.add(present_i_manufact);
    if (present_i_manufact)
      list.add(i_manufact);

    boolean present_i_size = true && (isSetI_size());
    list.add(present_i_size);
    if (present_i_size)
      list.add(i_size);

    boolean present_i_formulation = true && (isSetI_formulation());
    list.add(present_i_formulation);
    if (present_i_formulation)
      list.add(i_formulation);

    boolean present_i_color = true && (isSetI_color());
    list.add(present_i_color);
    if (present_i_color)
      list.add(i_color);

    boolean present_i_units = true && (isSetI_units());
    list.add(present_i_units);
    if (present_i_units)
      list.add(i_units);

    boolean present_i_container = true && (isSetI_container());
    list.add(present_i_container);
    if (present_i_container)
      list.add(i_container);

    boolean present_i_manager_id = true && (isSetI_manager_id());
    list.add(present_i_manager_id);
    if (present_i_manager_id)
      list.add(i_manager_id);

    boolean present_i_product_name = true && (isSetI_product_name());
    list.add(present_i_product_name);
    if (present_i_product_name)
      list.add(i_product_name);

    return list.hashCode();
  }

  @Override
  public int compareTo(ItemTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetI_item_sk()).compareTo(other.isSetI_item_sk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_item_sk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_item_sk, other.i_item_sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_item_id()).compareTo(other.isSetI_item_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_item_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_item_id, other.i_item_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_rec_start_date()).compareTo(other.isSetI_rec_start_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_rec_start_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_rec_start_date, other.i_rec_start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_rec_end_date()).compareTo(other.isSetI_rec_end_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_rec_end_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_rec_end_date, other.i_rec_end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_item_desc()).compareTo(other.isSetI_item_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_item_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_item_desc, other.i_item_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_current_price()).compareTo(other.isSetI_current_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_current_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_current_price, other.i_current_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_wholesale_cost()).compareTo(other.isSetI_wholesale_cost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_wholesale_cost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_wholesale_cost, other.i_wholesale_cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_brand_id()).compareTo(other.isSetI_brand_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_brand_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_brand_id, other.i_brand_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_brand()).compareTo(other.isSetI_brand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_brand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_brand, other.i_brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_class_id()).compareTo(other.isSetI_class_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_class_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_class_id, other.i_class_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_class()).compareTo(other.isSetI_class());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_class()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_class, other.i_class);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_category_id()).compareTo(other.isSetI_category_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_category_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_category_id, other.i_category_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_category()).compareTo(other.isSetI_category());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_category()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_category, other.i_category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_manufact_id()).compareTo(other.isSetI_manufact_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_manufact_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_manufact_id, other.i_manufact_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_manufact()).compareTo(other.isSetI_manufact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_manufact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_manufact, other.i_manufact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_size()).compareTo(other.isSetI_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_size, other.i_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_formulation()).compareTo(other.isSetI_formulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_formulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_formulation, other.i_formulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_color()).compareTo(other.isSetI_color());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_color()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_color, other.i_color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_units()).compareTo(other.isSetI_units());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_units()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_units, other.i_units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_container()).compareTo(other.isSetI_container());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_container()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_container, other.i_container);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_manager_id()).compareTo(other.isSetI_manager_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_manager_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_manager_id, other.i_manager_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI_product_name()).compareTo(other.isSetI_product_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI_product_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_product_name, other.i_product_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ItemTable(");
    boolean first = true;

    if (isSetI_item_sk()) {
      sb.append("i_item_sk:");
      sb.append(this.i_item_sk);
      first = false;
    }
    if (isSetI_item_id()) {
      if (!first) sb.append(", ");
      sb.append("i_item_id:");
      if (this.i_item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.i_item_id);
      }
      first = false;
    }
    if (isSetI_rec_start_date()) {
      if (!first) sb.append(", ");
      sb.append("i_rec_start_date:");
      if (this.i_rec_start_date == null) {
        sb.append("null");
      } else {
        sb.append(this.i_rec_start_date);
      }
      first = false;
    }
    if (isSetI_rec_end_date()) {
      if (!first) sb.append(", ");
      sb.append("i_rec_end_date:");
      if (this.i_rec_end_date == null) {
        sb.append("null");
      } else {
        sb.append(this.i_rec_end_date);
      }
      first = false;
    }
    if (isSetI_item_desc()) {
      if (!first) sb.append(", ");
      sb.append("i_item_desc:");
      if (this.i_item_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.i_item_desc);
      }
      first = false;
    }
    if (isSetI_current_price()) {
      if (!first) sb.append(", ");
      sb.append("i_current_price:");
      sb.append(this.i_current_price);
      first = false;
    }
    if (isSetI_wholesale_cost()) {
      if (!first) sb.append(", ");
      sb.append("i_wholesale_cost:");
      sb.append(this.i_wholesale_cost);
      first = false;
    }
    if (isSetI_brand_id()) {
      if (!first) sb.append(", ");
      sb.append("i_brand_id:");
      sb.append(this.i_brand_id);
      first = false;
    }
    if (isSetI_brand()) {
      if (!first) sb.append(", ");
      sb.append("i_brand:");
      if (this.i_brand == null) {
        sb.append("null");
      } else {
        sb.append(this.i_brand);
      }
      first = false;
    }
    if (isSetI_class_id()) {
      if (!first) sb.append(", ");
      sb.append("i_class_id:");
      sb.append(this.i_class_id);
      first = false;
    }
    if (isSetI_class()) {
      if (!first) sb.append(", ");
      sb.append("i_class:");
      if (this.i_class == null) {
        sb.append("null");
      } else {
        sb.append(this.i_class);
      }
      first = false;
    }
    if (isSetI_category_id()) {
      if (!first) sb.append(", ");
      sb.append("i_category_id:");
      sb.append(this.i_category_id);
      first = false;
    }
    if (isSetI_category()) {
      if (!first) sb.append(", ");
      sb.append("i_category:");
      if (this.i_category == null) {
        sb.append("null");
      } else {
        sb.append(this.i_category);
      }
      first = false;
    }
    if (isSetI_manufact_id()) {
      if (!first) sb.append(", ");
      sb.append("i_manufact_id:");
      sb.append(this.i_manufact_id);
      first = false;
    }
    if (isSetI_manufact()) {
      if (!first) sb.append(", ");
      sb.append("i_manufact:");
      if (this.i_manufact == null) {
        sb.append("null");
      } else {
        sb.append(this.i_manufact);
      }
      first = false;
    }
    if (isSetI_size()) {
      if (!first) sb.append(", ");
      sb.append("i_size:");
      if (this.i_size == null) {
        sb.append("null");
      } else {
        sb.append(this.i_size);
      }
      first = false;
    }
    if (isSetI_formulation()) {
      if (!first) sb.append(", ");
      sb.append("i_formulation:");
      if (this.i_formulation == null) {
        sb.append("null");
      } else {
        sb.append(this.i_formulation);
      }
      first = false;
    }
    if (isSetI_color()) {
      if (!first) sb.append(", ");
      sb.append("i_color:");
      if (this.i_color == null) {
        sb.append("null");
      } else {
        sb.append(this.i_color);
      }
      first = false;
    }
    if (isSetI_units()) {
      if (!first) sb.append(", ");
      sb.append("i_units:");
      if (this.i_units == null) {
        sb.append("null");
      } else {
        sb.append(this.i_units);
      }
      first = false;
    }
    if (isSetI_container()) {
      if (!first) sb.append(", ");
      sb.append("i_container:");
      if (this.i_container == null) {
        sb.append("null");
      } else {
        sb.append(this.i_container);
      }
      first = false;
    }
    if (isSetI_manager_id()) {
      if (!first) sb.append(", ");
      sb.append("i_manager_id:");
      sb.append(this.i_manager_id);
      first = false;
    }
    if (isSetI_product_name()) {
      if (!first) sb.append(", ");
      sb.append("i_product_name:");
      if (this.i_product_name == null) {
        sb.append("null");
      } else {
        sb.append(this.i_product_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ItemTableStandardSchemeFactory implements SchemeFactory {
    public ItemTableStandardScheme getScheme() {
      return new ItemTableStandardScheme();
    }
  }

  private static class ItemTableStandardScheme extends StandardScheme<ItemTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ItemTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_ITEM_SK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i_item_sk = iprot.readI64();
              struct.setI_item_skIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_item_id = iprot.readString();
              struct.setI_item_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I_REC_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_rec_start_date = iprot.readString();
              struct.setI_rec_start_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I_REC_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_rec_end_date = iprot.readString();
              struct.setI_rec_end_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I_ITEM_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_item_desc = iprot.readString();
              struct.setI_item_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I_CURRENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.i_current_price = iprot.readDouble();
              struct.setI_current_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I_WHOLESALE_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.i_wholesale_cost = iprot.readDouble();
              struct.setI_wholesale_costIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // I_BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i_brand_id = iprot.readI64();
              struct.setI_brand_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // I_BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_brand = iprot.readString();
              struct.setI_brandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // I_CLASS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i_class_id = iprot.readI64();
              struct.setI_class_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // I_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_class = iprot.readString();
              struct.setI_classIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // I_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i_category_id = iprot.readI64();
              struct.setI_category_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // I_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_category = iprot.readString();
              struct.setI_categoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // I_MANUFACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i_manufact_id = iprot.readI64();
              struct.setI_manufact_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // I_MANUFACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_manufact = iprot.readString();
              struct.setI_manufactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // I_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_size = iprot.readString();
              struct.setI_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // I_FORMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_formulation = iprot.readString();
              struct.setI_formulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // I_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_color = iprot.readString();
              struct.setI_colorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // I_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_units = iprot.readString();
              struct.setI_unitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // I_CONTAINER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_container = iprot.readString();
              struct.setI_containerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // I_MANAGER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i_manager_id = iprot.readI64();
              struct.setI_manager_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // I_PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_product_name = iprot.readString();
              struct.setI_product_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ItemTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetI_item_sk()) {
        oprot.writeFieldBegin(I_ITEM_SK_FIELD_DESC);
        oprot.writeI64(struct.i_item_sk);
        oprot.writeFieldEnd();
      }
      if (struct.i_item_id != null) {
        if (struct.isSetI_item_id()) {
          oprot.writeFieldBegin(I_ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.i_item_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_rec_start_date != null) {
        if (struct.isSetI_rec_start_date()) {
          oprot.writeFieldBegin(I_REC_START_DATE_FIELD_DESC);
          oprot.writeString(struct.i_rec_start_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_rec_end_date != null) {
        if (struct.isSetI_rec_end_date()) {
          oprot.writeFieldBegin(I_REC_END_DATE_FIELD_DESC);
          oprot.writeString(struct.i_rec_end_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_item_desc != null) {
        if (struct.isSetI_item_desc()) {
          oprot.writeFieldBegin(I_ITEM_DESC_FIELD_DESC);
          oprot.writeString(struct.i_item_desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetI_current_price()) {
        oprot.writeFieldBegin(I_CURRENT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.i_current_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI_wholesale_cost()) {
        oprot.writeFieldBegin(I_WHOLESALE_COST_FIELD_DESC);
        oprot.writeDouble(struct.i_wholesale_cost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI_brand_id()) {
        oprot.writeFieldBegin(I_BRAND_ID_FIELD_DESC);
        oprot.writeI64(struct.i_brand_id);
        oprot.writeFieldEnd();
      }
      if (struct.i_brand != null) {
        if (struct.isSetI_brand()) {
          oprot.writeFieldBegin(I_BRAND_FIELD_DESC);
          oprot.writeString(struct.i_brand);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetI_class_id()) {
        oprot.writeFieldBegin(I_CLASS_ID_FIELD_DESC);
        oprot.writeI64(struct.i_class_id);
        oprot.writeFieldEnd();
      }
      if (struct.i_class != null) {
        if (struct.isSetI_class()) {
          oprot.writeFieldBegin(I_CLASS_FIELD_DESC);
          oprot.writeString(struct.i_class);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetI_category_id()) {
        oprot.writeFieldBegin(I_CATEGORY_ID_FIELD_DESC);
        oprot.writeI64(struct.i_category_id);
        oprot.writeFieldEnd();
      }
      if (struct.i_category != null) {
        if (struct.isSetI_category()) {
          oprot.writeFieldBegin(I_CATEGORY_FIELD_DESC);
          oprot.writeString(struct.i_category);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetI_manufact_id()) {
        oprot.writeFieldBegin(I_MANUFACT_ID_FIELD_DESC);
        oprot.writeI64(struct.i_manufact_id);
        oprot.writeFieldEnd();
      }
      if (struct.i_manufact != null) {
        if (struct.isSetI_manufact()) {
          oprot.writeFieldBegin(I_MANUFACT_FIELD_DESC);
          oprot.writeString(struct.i_manufact);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_size != null) {
        if (struct.isSetI_size()) {
          oprot.writeFieldBegin(I_SIZE_FIELD_DESC);
          oprot.writeString(struct.i_size);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_formulation != null) {
        if (struct.isSetI_formulation()) {
          oprot.writeFieldBegin(I_FORMULATION_FIELD_DESC);
          oprot.writeString(struct.i_formulation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_color != null) {
        if (struct.isSetI_color()) {
          oprot.writeFieldBegin(I_COLOR_FIELD_DESC);
          oprot.writeString(struct.i_color);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_units != null) {
        if (struct.isSetI_units()) {
          oprot.writeFieldBegin(I_UNITS_FIELD_DESC);
          oprot.writeString(struct.i_units);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_container != null) {
        if (struct.isSetI_container()) {
          oprot.writeFieldBegin(I_CONTAINER_FIELD_DESC);
          oprot.writeString(struct.i_container);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetI_manager_id()) {
        oprot.writeFieldBegin(I_MANAGER_ID_FIELD_DESC);
        oprot.writeI64(struct.i_manager_id);
        oprot.writeFieldEnd();
      }
      if (struct.i_product_name != null) {
        if (struct.isSetI_product_name()) {
          oprot.writeFieldBegin(I_PRODUCT_NAME_FIELD_DESC);
          oprot.writeString(struct.i_product_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemTableTupleSchemeFactory implements SchemeFactory {
    public ItemTableTupleScheme getScheme() {
      return new ItemTableTupleScheme();
    }
  }

  private static class ItemTableTupleScheme extends TupleScheme<ItemTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ItemTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetI_item_sk()) {
        optionals.set(0);
      }
      if (struct.isSetI_item_id()) {
        optionals.set(1);
      }
      if (struct.isSetI_rec_start_date()) {
        optionals.set(2);
      }
      if (struct.isSetI_rec_end_date()) {
        optionals.set(3);
      }
      if (struct.isSetI_item_desc()) {
        optionals.set(4);
      }
      if (struct.isSetI_current_price()) {
        optionals.set(5);
      }
      if (struct.isSetI_wholesale_cost()) {
        optionals.set(6);
      }
      if (struct.isSetI_brand_id()) {
        optionals.set(7);
      }
      if (struct.isSetI_brand()) {
        optionals.set(8);
      }
      if (struct.isSetI_class_id()) {
        optionals.set(9);
      }
      if (struct.isSetI_class()) {
        optionals.set(10);
      }
      if (struct.isSetI_category_id()) {
        optionals.set(11);
      }
      if (struct.isSetI_category()) {
        optionals.set(12);
      }
      if (struct.isSetI_manufact_id()) {
        optionals.set(13);
      }
      if (struct.isSetI_manufact()) {
        optionals.set(14);
      }
      if (struct.isSetI_size()) {
        optionals.set(15);
      }
      if (struct.isSetI_formulation()) {
        optionals.set(16);
      }
      if (struct.isSetI_color()) {
        optionals.set(17);
      }
      if (struct.isSetI_units()) {
        optionals.set(18);
      }
      if (struct.isSetI_container()) {
        optionals.set(19);
      }
      if (struct.isSetI_manager_id()) {
        optionals.set(20);
      }
      if (struct.isSetI_product_name()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetI_item_sk()) {
        oprot.writeI64(struct.i_item_sk);
      }
      if (struct.isSetI_item_id()) {
        oprot.writeString(struct.i_item_id);
      }
      if (struct.isSetI_rec_start_date()) {
        oprot.writeString(struct.i_rec_start_date);
      }
      if (struct.isSetI_rec_end_date()) {
        oprot.writeString(struct.i_rec_end_date);
      }
      if (struct.isSetI_item_desc()) {
        oprot.writeString(struct.i_item_desc);
      }
      if (struct.isSetI_current_price()) {
        oprot.writeDouble(struct.i_current_price);
      }
      if (struct.isSetI_wholesale_cost()) {
        oprot.writeDouble(struct.i_wholesale_cost);
      }
      if (struct.isSetI_brand_id()) {
        oprot.writeI64(struct.i_brand_id);
      }
      if (struct.isSetI_brand()) {
        oprot.writeString(struct.i_brand);
      }
      if (struct.isSetI_class_id()) {
        oprot.writeI64(struct.i_class_id);
      }
      if (struct.isSetI_class()) {
        oprot.writeString(struct.i_class);
      }
      if (struct.isSetI_category_id()) {
        oprot.writeI64(struct.i_category_id);
      }
      if (struct.isSetI_category()) {
        oprot.writeString(struct.i_category);
      }
      if (struct.isSetI_manufact_id()) {
        oprot.writeI64(struct.i_manufact_id);
      }
      if (struct.isSetI_manufact()) {
        oprot.writeString(struct.i_manufact);
      }
      if (struct.isSetI_size()) {
        oprot.writeString(struct.i_size);
      }
      if (struct.isSetI_formulation()) {
        oprot.writeString(struct.i_formulation);
      }
      if (struct.isSetI_color()) {
        oprot.writeString(struct.i_color);
      }
      if (struct.isSetI_units()) {
        oprot.writeString(struct.i_units);
      }
      if (struct.isSetI_container()) {
        oprot.writeString(struct.i_container);
      }
      if (struct.isSetI_manager_id()) {
        oprot.writeI64(struct.i_manager_id);
      }
      if (struct.isSetI_product_name()) {
        oprot.writeString(struct.i_product_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ItemTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.i_item_sk = iprot.readI64();
        struct.setI_item_skIsSet(true);
      }
      if (incoming.get(1)) {
        struct.i_item_id = iprot.readString();
        struct.setI_item_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i_rec_start_date = iprot.readString();
        struct.setI_rec_start_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i_rec_end_date = iprot.readString();
        struct.setI_rec_end_dateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i_item_desc = iprot.readString();
        struct.setI_item_descIsSet(true);
      }
      if (incoming.get(5)) {
        struct.i_current_price = iprot.readDouble();
        struct.setI_current_priceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.i_wholesale_cost = iprot.readDouble();
        struct.setI_wholesale_costIsSet(true);
      }
      if (incoming.get(7)) {
        struct.i_brand_id = iprot.readI64();
        struct.setI_brand_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.i_brand = iprot.readString();
        struct.setI_brandIsSet(true);
      }
      if (incoming.get(9)) {
        struct.i_class_id = iprot.readI64();
        struct.setI_class_idIsSet(true);
      }
      if (incoming.get(10)) {
        struct.i_class = iprot.readString();
        struct.setI_classIsSet(true);
      }
      if (incoming.get(11)) {
        struct.i_category_id = iprot.readI64();
        struct.setI_category_idIsSet(true);
      }
      if (incoming.get(12)) {
        struct.i_category = iprot.readString();
        struct.setI_categoryIsSet(true);
      }
      if (incoming.get(13)) {
        struct.i_manufact_id = iprot.readI64();
        struct.setI_manufact_idIsSet(true);
      }
      if (incoming.get(14)) {
        struct.i_manufact = iprot.readString();
        struct.setI_manufactIsSet(true);
      }
      if (incoming.get(15)) {
        struct.i_size = iprot.readString();
        struct.setI_sizeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.i_formulation = iprot.readString();
        struct.setI_formulationIsSet(true);
      }
      if (incoming.get(17)) {
        struct.i_color = iprot.readString();
        struct.setI_colorIsSet(true);
      }
      if (incoming.get(18)) {
        struct.i_units = iprot.readString();
        struct.setI_unitsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.i_container = iprot.readString();
        struct.setI_containerIsSet(true);
      }
      if (incoming.get(20)) {
        struct.i_manager_id = iprot.readI64();
        struct.setI_manager_idIsSet(true);
      }
      if (incoming.get(21)) {
        struct.i_product_name = iprot.readString();
        struct.setI_product_nameIsSet(true);
      }
    }
  }

}

