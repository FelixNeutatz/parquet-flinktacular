/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flink.parquet.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-28")
public class PartsuppTable implements org.apache.thrift.TBase<PartsuppTable, PartsuppTable._Fields>, java.io.Serializable, Cloneable, Comparable<PartsuppTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartsuppTable");

  private static final org.apache.thrift.protocol.TField PARTKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("PARTKEY", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUPPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("SUPPKEY", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField AVAILQTY_FIELD_DESC = new org.apache.thrift.protocol.TField("AVAILQTY", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUPPLYCOST_FIELD_DESC = new org.apache.thrift.protocol.TField("SUPPLYCOST", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("COMMENT", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartsuppTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartsuppTableTupleSchemeFactory());
  }

  public long PARTKEY; // optional
  public long SUPPKEY; // optional
  public long AVAILQTY; // optional
  public double SUPPLYCOST; // optional
  public String COMMENT; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTKEY((short)1, "PARTKEY"),
    SUPPKEY((short)2, "SUPPKEY"),
    AVAILQTY((short)3, "AVAILQTY"),
    SUPPLYCOST((short)4, "SUPPLYCOST"),
    COMMENT((short)5, "COMMENT");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTKEY
          return PARTKEY;
        case 2: // SUPPKEY
          return SUPPKEY;
        case 3: // AVAILQTY
          return AVAILQTY;
        case 4: // SUPPLYCOST
          return SUPPLYCOST;
        case 5: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTKEY_ISSET_ID = 0;
  private static final int __SUPPKEY_ISSET_ID = 1;
  private static final int __AVAILQTY_ISSET_ID = 2;
  private static final int __SUPPLYCOST_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTKEY,_Fields.SUPPKEY,_Fields.AVAILQTY,_Fields.SUPPLYCOST,_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTKEY, new org.apache.thrift.meta_data.FieldMetaData("PARTKEY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUPPKEY, new org.apache.thrift.meta_data.FieldMetaData("SUPPKEY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVAILQTY, new org.apache.thrift.meta_data.FieldMetaData("AVAILQTY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUPPLYCOST, new org.apache.thrift.meta_data.FieldMetaData("SUPPLYCOST", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("COMMENT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartsuppTable.class, metaDataMap);
  }

  public PartsuppTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartsuppTable(PartsuppTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.PARTKEY = other.PARTKEY;
    this.SUPPKEY = other.SUPPKEY;
    this.AVAILQTY = other.AVAILQTY;
    this.SUPPLYCOST = other.SUPPLYCOST;
    if (other.isSetCOMMENT()) {
      this.COMMENT = other.COMMENT;
    }
  }

  public PartsuppTable deepCopy() {
    return new PartsuppTable(this);
  }

  @Override
  public void clear() {
    setPARTKEYIsSet(false);
    this.PARTKEY = 0;
    setSUPPKEYIsSet(false);
    this.SUPPKEY = 0;
    setAVAILQTYIsSet(false);
    this.AVAILQTY = 0;
    setSUPPLYCOSTIsSet(false);
    this.SUPPLYCOST = 0.0;
    this.COMMENT = null;
  }

  public long getPARTKEY() {
    return this.PARTKEY;
  }

  public PartsuppTable setPARTKEY(long PARTKEY) {
    this.PARTKEY = PARTKEY;
    setPARTKEYIsSet(true);
    return this;
  }

  public void unsetPARTKEY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTKEY_ISSET_ID);
  }

  /** Returns true if field PARTKEY is set (has been assigned a value) and false otherwise */
  public boolean isSetPARTKEY() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTKEY_ISSET_ID);
  }

  public void setPARTKEYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTKEY_ISSET_ID, value);
  }

  public long getSUPPKEY() {
    return this.SUPPKEY;
  }

  public PartsuppTable setSUPPKEY(long SUPPKEY) {
    this.SUPPKEY = SUPPKEY;
    setSUPPKEYIsSet(true);
    return this;
  }

  public void unsetSUPPKEY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPKEY_ISSET_ID);
  }

  /** Returns true if field SUPPKEY is set (has been assigned a value) and false otherwise */
  public boolean isSetSUPPKEY() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPKEY_ISSET_ID);
  }

  public void setSUPPKEYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPKEY_ISSET_ID, value);
  }

  public long getAVAILQTY() {
    return this.AVAILQTY;
  }

  public PartsuppTable setAVAILQTY(long AVAILQTY) {
    this.AVAILQTY = AVAILQTY;
    setAVAILQTYIsSet(true);
    return this;
  }

  public void unsetAVAILQTY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILQTY_ISSET_ID);
  }

  /** Returns true if field AVAILQTY is set (has been assigned a value) and false otherwise */
  public boolean isSetAVAILQTY() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILQTY_ISSET_ID);
  }

  public void setAVAILQTYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILQTY_ISSET_ID, value);
  }

  public double getSUPPLYCOST() {
    return this.SUPPLYCOST;
  }

  public PartsuppTable setSUPPLYCOST(double SUPPLYCOST) {
    this.SUPPLYCOST = SUPPLYCOST;
    setSUPPLYCOSTIsSet(true);
    return this;
  }

  public void unsetSUPPLYCOST() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPLYCOST_ISSET_ID);
  }

  /** Returns true if field SUPPLYCOST is set (has been assigned a value) and false otherwise */
  public boolean isSetSUPPLYCOST() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPLYCOST_ISSET_ID);
  }

  public void setSUPPLYCOSTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPLYCOST_ISSET_ID, value);
  }

  public String getCOMMENT() {
    return this.COMMENT;
  }

  public PartsuppTable setCOMMENT(String COMMENT) {
    this.COMMENT = COMMENT;
    return this;
  }

  public void unsetCOMMENT() {
    this.COMMENT = null;
  }

  /** Returns true if field COMMENT is set (has been assigned a value) and false otherwise */
  public boolean isSetCOMMENT() {
    return this.COMMENT != null;
  }

  public void setCOMMENTIsSet(boolean value) {
    if (!value) {
      this.COMMENT = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTKEY:
      if (value == null) {
        unsetPARTKEY();
      } else {
        setPARTKEY((Long)value);
      }
      break;

    case SUPPKEY:
      if (value == null) {
        unsetSUPPKEY();
      } else {
        setSUPPKEY((Long)value);
      }
      break;

    case AVAILQTY:
      if (value == null) {
        unsetAVAILQTY();
      } else {
        setAVAILQTY((Long)value);
      }
      break;

    case SUPPLYCOST:
      if (value == null) {
        unsetSUPPLYCOST();
      } else {
        setSUPPLYCOST((Double)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetCOMMENT();
      } else {
        setCOMMENT((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTKEY:
      return Long.valueOf(getPARTKEY());

    case SUPPKEY:
      return Long.valueOf(getSUPPKEY());

    case AVAILQTY:
      return Long.valueOf(getAVAILQTY());

    case SUPPLYCOST:
      return Double.valueOf(getSUPPLYCOST());

    case COMMENT:
      return getCOMMENT();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTKEY:
      return isSetPARTKEY();
    case SUPPKEY:
      return isSetSUPPKEY();
    case AVAILQTY:
      return isSetAVAILQTY();
    case SUPPLYCOST:
      return isSetSUPPLYCOST();
    case COMMENT:
      return isSetCOMMENT();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartsuppTable)
      return this.equals((PartsuppTable)that);
    return false;
  }

  public boolean equals(PartsuppTable that) {
    if (that == null)
      return false;

    boolean this_present_PARTKEY = true && this.isSetPARTKEY();
    boolean that_present_PARTKEY = true && that.isSetPARTKEY();
    if (this_present_PARTKEY || that_present_PARTKEY) {
      if (!(this_present_PARTKEY && that_present_PARTKEY))
        return false;
      if (this.PARTKEY != that.PARTKEY)
        return false;
    }

    boolean this_present_SUPPKEY = true && this.isSetSUPPKEY();
    boolean that_present_SUPPKEY = true && that.isSetSUPPKEY();
    if (this_present_SUPPKEY || that_present_SUPPKEY) {
      if (!(this_present_SUPPKEY && that_present_SUPPKEY))
        return false;
      if (this.SUPPKEY != that.SUPPKEY)
        return false;
    }

    boolean this_present_AVAILQTY = true && this.isSetAVAILQTY();
    boolean that_present_AVAILQTY = true && that.isSetAVAILQTY();
    if (this_present_AVAILQTY || that_present_AVAILQTY) {
      if (!(this_present_AVAILQTY && that_present_AVAILQTY))
        return false;
      if (this.AVAILQTY != that.AVAILQTY)
        return false;
    }

    boolean this_present_SUPPLYCOST = true && this.isSetSUPPLYCOST();
    boolean that_present_SUPPLYCOST = true && that.isSetSUPPLYCOST();
    if (this_present_SUPPLYCOST || that_present_SUPPLYCOST) {
      if (!(this_present_SUPPLYCOST && that_present_SUPPLYCOST))
        return false;
      if (this.SUPPLYCOST != that.SUPPLYCOST)
        return false;
    }

    boolean this_present_COMMENT = true && this.isSetCOMMENT();
    boolean that_present_COMMENT = true && that.isSetCOMMENT();
    if (this_present_COMMENT || that_present_COMMENT) {
      if (!(this_present_COMMENT && that_present_COMMENT))
        return false;
      if (!this.COMMENT.equals(that.COMMENT))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_PARTKEY = true && (isSetPARTKEY());
    list.add(present_PARTKEY);
    if (present_PARTKEY)
      list.add(PARTKEY);

    boolean present_SUPPKEY = true && (isSetSUPPKEY());
    list.add(present_SUPPKEY);
    if (present_SUPPKEY)
      list.add(SUPPKEY);

    boolean present_AVAILQTY = true && (isSetAVAILQTY());
    list.add(present_AVAILQTY);
    if (present_AVAILQTY)
      list.add(AVAILQTY);

    boolean present_SUPPLYCOST = true && (isSetSUPPLYCOST());
    list.add(present_SUPPLYCOST);
    if (present_SUPPLYCOST)
      list.add(SUPPLYCOST);

    boolean present_COMMENT = true && (isSetCOMMENT());
    list.add(present_COMMENT);
    if (present_COMMENT)
      list.add(COMMENT);

    return list.hashCode();
  }

  @Override
  public int compareTo(PartsuppTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPARTKEY()).compareTo(other.isSetPARTKEY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPARTKEY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PARTKEY, other.PARTKEY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSUPPKEY()).compareTo(other.isSetSUPPKEY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSUPPKEY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SUPPKEY, other.SUPPKEY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAVAILQTY()).compareTo(other.isSetAVAILQTY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAVAILQTY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AVAILQTY, other.AVAILQTY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSUPPLYCOST()).compareTo(other.isSetSUPPLYCOST());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSUPPLYCOST()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SUPPLYCOST, other.SUPPLYCOST);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCOMMENT()).compareTo(other.isSetCOMMENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCOMMENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.COMMENT, other.COMMENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartsuppTable(");
    boolean first = true;

    if (isSetPARTKEY()) {
      sb.append("PARTKEY:");
      sb.append(this.PARTKEY);
      first = false;
    }
    if (isSetSUPPKEY()) {
      if (!first) sb.append(", ");
      sb.append("SUPPKEY:");
      sb.append(this.SUPPKEY);
      first = false;
    }
    if (isSetAVAILQTY()) {
      if (!first) sb.append(", ");
      sb.append("AVAILQTY:");
      sb.append(this.AVAILQTY);
      first = false;
    }
    if (isSetSUPPLYCOST()) {
      if (!first) sb.append(", ");
      sb.append("SUPPLYCOST:");
      sb.append(this.SUPPLYCOST);
      first = false;
    }
    if (isSetCOMMENT()) {
      if (!first) sb.append(", ");
      sb.append("COMMENT:");
      if (this.COMMENT == null) {
        sb.append("null");
      } else {
        sb.append(this.COMMENT);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartsuppTableStandardSchemeFactory implements SchemeFactory {
    public PartsuppTableStandardScheme getScheme() {
      return new PartsuppTableStandardScheme();
    }
  }

  private static class PartsuppTableStandardScheme extends StandardScheme<PartsuppTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartsuppTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.PARTKEY = iprot.readI64();
              struct.setPARTKEYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPPKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.SUPPKEY = iprot.readI64();
              struct.setSUPPKEYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AVAILQTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.AVAILQTY = iprot.readI64();
              struct.setAVAILQTYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUPPLYCOST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SUPPLYCOST = iprot.readDouble();
              struct.setSUPPLYCOSTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.COMMENT = iprot.readString();
              struct.setCOMMENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartsuppTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPARTKEY()) {
        oprot.writeFieldBegin(PARTKEY_FIELD_DESC);
        oprot.writeI64(struct.PARTKEY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSUPPKEY()) {
        oprot.writeFieldBegin(SUPPKEY_FIELD_DESC);
        oprot.writeI64(struct.SUPPKEY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAVAILQTY()) {
        oprot.writeFieldBegin(AVAILQTY_FIELD_DESC);
        oprot.writeI64(struct.AVAILQTY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSUPPLYCOST()) {
        oprot.writeFieldBegin(SUPPLYCOST_FIELD_DESC);
        oprot.writeDouble(struct.SUPPLYCOST);
        oprot.writeFieldEnd();
      }
      if (struct.COMMENT != null) {
        if (struct.isSetCOMMENT()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.COMMENT);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartsuppTableTupleSchemeFactory implements SchemeFactory {
    public PartsuppTableTupleScheme getScheme() {
      return new PartsuppTableTupleScheme();
    }
  }

  private static class PartsuppTableTupleScheme extends TupleScheme<PartsuppTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartsuppTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPARTKEY()) {
        optionals.set(0);
      }
      if (struct.isSetSUPPKEY()) {
        optionals.set(1);
      }
      if (struct.isSetAVAILQTY()) {
        optionals.set(2);
      }
      if (struct.isSetSUPPLYCOST()) {
        optionals.set(3);
      }
      if (struct.isSetCOMMENT()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPARTKEY()) {
        oprot.writeI64(struct.PARTKEY);
      }
      if (struct.isSetSUPPKEY()) {
        oprot.writeI64(struct.SUPPKEY);
      }
      if (struct.isSetAVAILQTY()) {
        oprot.writeI64(struct.AVAILQTY);
      }
      if (struct.isSetSUPPLYCOST()) {
        oprot.writeDouble(struct.SUPPLYCOST);
      }
      if (struct.isSetCOMMENT()) {
        oprot.writeString(struct.COMMENT);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartsuppTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.PARTKEY = iprot.readI64();
        struct.setPARTKEYIsSet(true);
      }
      if (incoming.get(1)) {
        struct.SUPPKEY = iprot.readI64();
        struct.setSUPPKEYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.AVAILQTY = iprot.readI64();
        struct.setAVAILQTYIsSet(true);
      }
      if (incoming.get(3)) {
        struct.SUPPLYCOST = iprot.readDouble();
        struct.setSUPPLYCOSTIsSet(true);
      }
      if (incoming.get(4)) {
        struct.COMMENT = iprot.readString();
        struct.setCOMMENTIsSet(true);
      }
    }
  }

}

