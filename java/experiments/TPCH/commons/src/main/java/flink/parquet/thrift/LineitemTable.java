/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flink.parquet.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-28")
public class LineitemTable implements org.apache.thrift.TBase<LineitemTable, LineitemTable._Fields>, java.io.Serializable, Cloneable, Comparable<LineitemTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineitemTable");

  private static final org.apache.thrift.protocol.TField ORDERKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("ORDERKEY", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("PARTKEY", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SUPPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("SUPPKEY", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LINENUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("LINENUMBER", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("QUANTITY", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField EXTENDEDPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("EXTENDEDPRICE", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("DISCOUNT", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TAX_FIELD_DESC = new org.apache.thrift.protocol.TField("TAX", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RETURNFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("RETURNFLAG", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LINESTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("LINESTATUS", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SHIPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("SHIPDATE", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COMMITDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("COMMITDATE", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField RECEIPTDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("RECEIPTDATE", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHIPINSTRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("SHIPINSTRUCT", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SHIPMODE_FIELD_DESC = new org.apache.thrift.protocol.TField("SHIPMODE", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("COMMENT", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LineitemTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LineitemTableTupleSchemeFactory());
  }

  public long ORDERKEY; // optional
  public long PARTKEY; // optional
  public long SUPPKEY; // optional
  public long LINENUMBER; // optional
  public double QUANTITY; // optional
  public double EXTENDEDPRICE; // optional
  public double DISCOUNT; // optional
  public double TAX; // optional
  public String RETURNFLAG; // optional
  public String LINESTATUS; // optional
  public String SHIPDATE; // optional
  public String COMMITDATE; // optional
  public String RECEIPTDATE; // optional
  public String SHIPINSTRUCT; // optional
  public String SHIPMODE; // optional
  public String COMMENT; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDERKEY((short)1, "ORDERKEY"),
    PARTKEY((short)2, "PARTKEY"),
    SUPPKEY((short)3, "SUPPKEY"),
    LINENUMBER((short)4, "LINENUMBER"),
    QUANTITY((short)5, "QUANTITY"),
    EXTENDEDPRICE((short)6, "EXTENDEDPRICE"),
    DISCOUNT((short)7, "DISCOUNT"),
    TAX((short)8, "TAX"),
    RETURNFLAG((short)9, "RETURNFLAG"),
    LINESTATUS((short)10, "LINESTATUS"),
    SHIPDATE((short)11, "SHIPDATE"),
    COMMITDATE((short)12, "COMMITDATE"),
    RECEIPTDATE((short)13, "RECEIPTDATE"),
    SHIPINSTRUCT((short)14, "SHIPINSTRUCT"),
    SHIPMODE((short)15, "SHIPMODE"),
    COMMENT((short)16, "COMMENT");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDERKEY
          return ORDERKEY;
        case 2: // PARTKEY
          return PARTKEY;
        case 3: // SUPPKEY
          return SUPPKEY;
        case 4: // LINENUMBER
          return LINENUMBER;
        case 5: // QUANTITY
          return QUANTITY;
        case 6: // EXTENDEDPRICE
          return EXTENDEDPRICE;
        case 7: // DISCOUNT
          return DISCOUNT;
        case 8: // TAX
          return TAX;
        case 9: // RETURNFLAG
          return RETURNFLAG;
        case 10: // LINESTATUS
          return LINESTATUS;
        case 11: // SHIPDATE
          return SHIPDATE;
        case 12: // COMMITDATE
          return COMMITDATE;
        case 13: // RECEIPTDATE
          return RECEIPTDATE;
        case 14: // SHIPINSTRUCT
          return SHIPINSTRUCT;
        case 15: // SHIPMODE
          return SHIPMODE;
        case 16: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERKEY_ISSET_ID = 0;
  private static final int __PARTKEY_ISSET_ID = 1;
  private static final int __SUPPKEY_ISSET_ID = 2;
  private static final int __LINENUMBER_ISSET_ID = 3;
  private static final int __QUANTITY_ISSET_ID = 4;
  private static final int __EXTENDEDPRICE_ISSET_ID = 5;
  private static final int __DISCOUNT_ISSET_ID = 6;
  private static final int __TAX_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDERKEY,_Fields.PARTKEY,_Fields.SUPPKEY,_Fields.LINENUMBER,_Fields.QUANTITY,_Fields.EXTENDEDPRICE,_Fields.DISCOUNT,_Fields.TAX,_Fields.RETURNFLAG,_Fields.LINESTATUS,_Fields.SHIPDATE,_Fields.COMMITDATE,_Fields.RECEIPTDATE,_Fields.SHIPINSTRUCT,_Fields.SHIPMODE,_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDERKEY, new org.apache.thrift.meta_data.FieldMetaData("ORDERKEY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTKEY, new org.apache.thrift.meta_data.FieldMetaData("PARTKEY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUPPKEY, new org.apache.thrift.meta_data.FieldMetaData("SUPPKEY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LINENUMBER, new org.apache.thrift.meta_data.FieldMetaData("LINENUMBER", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("QUANTITY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENDEDPRICE, new org.apache.thrift.meta_data.FieldMetaData("EXTENDEDPRICE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("DISCOUNT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAX, new org.apache.thrift.meta_data.FieldMetaData("TAX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RETURNFLAG, new org.apache.thrift.meta_data.FieldMetaData("RETURNFLAG", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINESTATUS, new org.apache.thrift.meta_data.FieldMetaData("LINESTATUS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPDATE, new org.apache.thrift.meta_data.FieldMetaData("SHIPDATE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMITDATE, new org.apache.thrift.meta_data.FieldMetaData("COMMITDATE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIPTDATE, new org.apache.thrift.meta_data.FieldMetaData("RECEIPTDATE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPINSTRUCT, new org.apache.thrift.meta_data.FieldMetaData("SHIPINSTRUCT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPMODE, new org.apache.thrift.meta_data.FieldMetaData("SHIPMODE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("COMMENT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineitemTable.class, metaDataMap);
  }

  public LineitemTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineitemTable(LineitemTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ORDERKEY = other.ORDERKEY;
    this.PARTKEY = other.PARTKEY;
    this.SUPPKEY = other.SUPPKEY;
    this.LINENUMBER = other.LINENUMBER;
    this.QUANTITY = other.QUANTITY;
    this.EXTENDEDPRICE = other.EXTENDEDPRICE;
    this.DISCOUNT = other.DISCOUNT;
    this.TAX = other.TAX;
    if (other.isSetRETURNFLAG()) {
      this.RETURNFLAG = other.RETURNFLAG;
    }
    if (other.isSetLINESTATUS()) {
      this.LINESTATUS = other.LINESTATUS;
    }
    if (other.isSetSHIPDATE()) {
      this.SHIPDATE = other.SHIPDATE;
    }
    if (other.isSetCOMMITDATE()) {
      this.COMMITDATE = other.COMMITDATE;
    }
    if (other.isSetRECEIPTDATE()) {
      this.RECEIPTDATE = other.RECEIPTDATE;
    }
    if (other.isSetSHIPINSTRUCT()) {
      this.SHIPINSTRUCT = other.SHIPINSTRUCT;
    }
    if (other.isSetSHIPMODE()) {
      this.SHIPMODE = other.SHIPMODE;
    }
    if (other.isSetCOMMENT()) {
      this.COMMENT = other.COMMENT;
    }
  }

  public LineitemTable deepCopy() {
    return new LineitemTable(this);
  }

  @Override
  public void clear() {
    setORDERKEYIsSet(false);
    this.ORDERKEY = 0;
    setPARTKEYIsSet(false);
    this.PARTKEY = 0;
    setSUPPKEYIsSet(false);
    this.SUPPKEY = 0;
    setLINENUMBERIsSet(false);
    this.LINENUMBER = 0;
    setQUANTITYIsSet(false);
    this.QUANTITY = 0.0;
    setEXTENDEDPRICEIsSet(false);
    this.EXTENDEDPRICE = 0.0;
    setDISCOUNTIsSet(false);
    this.DISCOUNT = 0.0;
    setTAXIsSet(false);
    this.TAX = 0.0;
    this.RETURNFLAG = null;
    this.LINESTATUS = null;
    this.SHIPDATE = null;
    this.COMMITDATE = null;
    this.RECEIPTDATE = null;
    this.SHIPINSTRUCT = null;
    this.SHIPMODE = null;
    this.COMMENT = null;
  }

  public long getORDERKEY() {
    return this.ORDERKEY;
  }

  public LineitemTable setORDERKEY(long ORDERKEY) {
    this.ORDERKEY = ORDERKEY;
    setORDERKEYIsSet(true);
    return this;
  }

  public void unsetORDERKEY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERKEY_ISSET_ID);
  }

  /** Returns true if field ORDERKEY is set (has been assigned a value) and false otherwise */
  public boolean isSetORDERKEY() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERKEY_ISSET_ID);
  }

  public void setORDERKEYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERKEY_ISSET_ID, value);
  }

  public long getPARTKEY() {
    return this.PARTKEY;
  }

  public LineitemTable setPARTKEY(long PARTKEY) {
    this.PARTKEY = PARTKEY;
    setPARTKEYIsSet(true);
    return this;
  }

  public void unsetPARTKEY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTKEY_ISSET_ID);
  }

  /** Returns true if field PARTKEY is set (has been assigned a value) and false otherwise */
  public boolean isSetPARTKEY() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTKEY_ISSET_ID);
  }

  public void setPARTKEYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTKEY_ISSET_ID, value);
  }

  public long getSUPPKEY() {
    return this.SUPPKEY;
  }

  public LineitemTable setSUPPKEY(long SUPPKEY) {
    this.SUPPKEY = SUPPKEY;
    setSUPPKEYIsSet(true);
    return this;
  }

  public void unsetSUPPKEY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPKEY_ISSET_ID);
  }

  /** Returns true if field SUPPKEY is set (has been assigned a value) and false otherwise */
  public boolean isSetSUPPKEY() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPKEY_ISSET_ID);
  }

  public void setSUPPKEYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPKEY_ISSET_ID, value);
  }

  public long getLINENUMBER() {
    return this.LINENUMBER;
  }

  public LineitemTable setLINENUMBER(long LINENUMBER) {
    this.LINENUMBER = LINENUMBER;
    setLINENUMBERIsSet(true);
    return this;
  }

  public void unsetLINENUMBER() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
  }

  /** Returns true if field LINENUMBER is set (has been assigned a value) and false otherwise */
  public boolean isSetLINENUMBER() {
    return EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
  }

  public void setLINENUMBERIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
  }

  public double getQUANTITY() {
    return this.QUANTITY;
  }

  public LineitemTable setQUANTITY(double QUANTITY) {
    this.QUANTITY = QUANTITY;
    setQUANTITYIsSet(true);
    return this;
  }

  public void unsetQUANTITY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field QUANTITY is set (has been assigned a value) and false otherwise */
  public boolean isSetQUANTITY() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQUANTITYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public double getEXTENDEDPRICE() {
    return this.EXTENDEDPRICE;
  }

  public LineitemTable setEXTENDEDPRICE(double EXTENDEDPRICE) {
    this.EXTENDEDPRICE = EXTENDEDPRICE;
    setEXTENDEDPRICEIsSet(true);
    return this;
  }

  public void unsetEXTENDEDPRICE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENDEDPRICE_ISSET_ID);
  }

  /** Returns true if field EXTENDEDPRICE is set (has been assigned a value) and false otherwise */
  public boolean isSetEXTENDEDPRICE() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENDEDPRICE_ISSET_ID);
  }

  public void setEXTENDEDPRICEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENDEDPRICE_ISSET_ID, value);
  }

  public double getDISCOUNT() {
    return this.DISCOUNT;
  }

  public LineitemTable setDISCOUNT(double DISCOUNT) {
    this.DISCOUNT = DISCOUNT;
    setDISCOUNTIsSet(true);
    return this;
  }

  public void unsetDISCOUNT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field DISCOUNT is set (has been assigned a value) and false otherwise */
  public boolean isSetDISCOUNT() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDISCOUNTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public double getTAX() {
    return this.TAX;
  }

  public LineitemTable setTAX(double TAX) {
    this.TAX = TAX;
    setTAXIsSet(true);
    return this;
  }

  public void unsetTAX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAX_ISSET_ID);
  }

  /** Returns true if field TAX is set (has been assigned a value) and false otherwise */
  public boolean isSetTAX() {
    return EncodingUtils.testBit(__isset_bitfield, __TAX_ISSET_ID);
  }

  public void setTAXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAX_ISSET_ID, value);
  }

  public String getRETURNFLAG() {
    return this.RETURNFLAG;
  }

  public LineitemTable setRETURNFLAG(String RETURNFLAG) {
    this.RETURNFLAG = RETURNFLAG;
    return this;
  }

  public void unsetRETURNFLAG() {
    this.RETURNFLAG = null;
  }

  /** Returns true if field RETURNFLAG is set (has been assigned a value) and false otherwise */
  public boolean isSetRETURNFLAG() {
    return this.RETURNFLAG != null;
  }

  public void setRETURNFLAGIsSet(boolean value) {
    if (!value) {
      this.RETURNFLAG = null;
    }
  }

  public String getLINESTATUS() {
    return this.LINESTATUS;
  }

  public LineitemTable setLINESTATUS(String LINESTATUS) {
    this.LINESTATUS = LINESTATUS;
    return this;
  }

  public void unsetLINESTATUS() {
    this.LINESTATUS = null;
  }

  /** Returns true if field LINESTATUS is set (has been assigned a value) and false otherwise */
  public boolean isSetLINESTATUS() {
    return this.LINESTATUS != null;
  }

  public void setLINESTATUSIsSet(boolean value) {
    if (!value) {
      this.LINESTATUS = null;
    }
  }

  public String getSHIPDATE() {
    return this.SHIPDATE;
  }

  public LineitemTable setSHIPDATE(String SHIPDATE) {
    this.SHIPDATE = SHIPDATE;
    return this;
  }

  public void unsetSHIPDATE() {
    this.SHIPDATE = null;
  }

  /** Returns true if field SHIPDATE is set (has been assigned a value) and false otherwise */
  public boolean isSetSHIPDATE() {
    return this.SHIPDATE != null;
  }

  public void setSHIPDATEIsSet(boolean value) {
    if (!value) {
      this.SHIPDATE = null;
    }
  }

  public String getCOMMITDATE() {
    return this.COMMITDATE;
  }

  public LineitemTable setCOMMITDATE(String COMMITDATE) {
    this.COMMITDATE = COMMITDATE;
    return this;
  }

  public void unsetCOMMITDATE() {
    this.COMMITDATE = null;
  }

  /** Returns true if field COMMITDATE is set (has been assigned a value) and false otherwise */
  public boolean isSetCOMMITDATE() {
    return this.COMMITDATE != null;
  }

  public void setCOMMITDATEIsSet(boolean value) {
    if (!value) {
      this.COMMITDATE = null;
    }
  }

  public String getRECEIPTDATE() {
    return this.RECEIPTDATE;
  }

  public LineitemTable setRECEIPTDATE(String RECEIPTDATE) {
    this.RECEIPTDATE = RECEIPTDATE;
    return this;
  }

  public void unsetRECEIPTDATE() {
    this.RECEIPTDATE = null;
  }

  /** Returns true if field RECEIPTDATE is set (has been assigned a value) and false otherwise */
  public boolean isSetRECEIPTDATE() {
    return this.RECEIPTDATE != null;
  }

  public void setRECEIPTDATEIsSet(boolean value) {
    if (!value) {
      this.RECEIPTDATE = null;
    }
  }

  public String getSHIPINSTRUCT() {
    return this.SHIPINSTRUCT;
  }

  public LineitemTable setSHIPINSTRUCT(String SHIPINSTRUCT) {
    this.SHIPINSTRUCT = SHIPINSTRUCT;
    return this;
  }

  public void unsetSHIPINSTRUCT() {
    this.SHIPINSTRUCT = null;
  }

  /** Returns true if field SHIPINSTRUCT is set (has been assigned a value) and false otherwise */
  public boolean isSetSHIPINSTRUCT() {
    return this.SHIPINSTRUCT != null;
  }

  public void setSHIPINSTRUCTIsSet(boolean value) {
    if (!value) {
      this.SHIPINSTRUCT = null;
    }
  }

  public String getSHIPMODE() {
    return this.SHIPMODE;
  }

  public LineitemTable setSHIPMODE(String SHIPMODE) {
    this.SHIPMODE = SHIPMODE;
    return this;
  }

  public void unsetSHIPMODE() {
    this.SHIPMODE = null;
  }

  /** Returns true if field SHIPMODE is set (has been assigned a value) and false otherwise */
  public boolean isSetSHIPMODE() {
    return this.SHIPMODE != null;
  }

  public void setSHIPMODEIsSet(boolean value) {
    if (!value) {
      this.SHIPMODE = null;
    }
  }

  public String getCOMMENT() {
    return this.COMMENT;
  }

  public LineitemTable setCOMMENT(String COMMENT) {
    this.COMMENT = COMMENT;
    return this;
  }

  public void unsetCOMMENT() {
    this.COMMENT = null;
  }

  /** Returns true if field COMMENT is set (has been assigned a value) and false otherwise */
  public boolean isSetCOMMENT() {
    return this.COMMENT != null;
  }

  public void setCOMMENTIsSet(boolean value) {
    if (!value) {
      this.COMMENT = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDERKEY:
      if (value == null) {
        unsetORDERKEY();
      } else {
        setORDERKEY((Long)value);
      }
      break;

    case PARTKEY:
      if (value == null) {
        unsetPARTKEY();
      } else {
        setPARTKEY((Long)value);
      }
      break;

    case SUPPKEY:
      if (value == null) {
        unsetSUPPKEY();
      } else {
        setSUPPKEY((Long)value);
      }
      break;

    case LINENUMBER:
      if (value == null) {
        unsetLINENUMBER();
      } else {
        setLINENUMBER((Long)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQUANTITY();
      } else {
        setQUANTITY((Double)value);
      }
      break;

    case EXTENDEDPRICE:
      if (value == null) {
        unsetEXTENDEDPRICE();
      } else {
        setEXTENDEDPRICE((Double)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDISCOUNT();
      } else {
        setDISCOUNT((Double)value);
      }
      break;

    case TAX:
      if (value == null) {
        unsetTAX();
      } else {
        setTAX((Double)value);
      }
      break;

    case RETURNFLAG:
      if (value == null) {
        unsetRETURNFLAG();
      } else {
        setRETURNFLAG((String)value);
      }
      break;

    case LINESTATUS:
      if (value == null) {
        unsetLINESTATUS();
      } else {
        setLINESTATUS((String)value);
      }
      break;

    case SHIPDATE:
      if (value == null) {
        unsetSHIPDATE();
      } else {
        setSHIPDATE((String)value);
      }
      break;

    case COMMITDATE:
      if (value == null) {
        unsetCOMMITDATE();
      } else {
        setCOMMITDATE((String)value);
      }
      break;

    case RECEIPTDATE:
      if (value == null) {
        unsetRECEIPTDATE();
      } else {
        setRECEIPTDATE((String)value);
      }
      break;

    case SHIPINSTRUCT:
      if (value == null) {
        unsetSHIPINSTRUCT();
      } else {
        setSHIPINSTRUCT((String)value);
      }
      break;

    case SHIPMODE:
      if (value == null) {
        unsetSHIPMODE();
      } else {
        setSHIPMODE((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetCOMMENT();
      } else {
        setCOMMENT((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDERKEY:
      return Long.valueOf(getORDERKEY());

    case PARTKEY:
      return Long.valueOf(getPARTKEY());

    case SUPPKEY:
      return Long.valueOf(getSUPPKEY());

    case LINENUMBER:
      return Long.valueOf(getLINENUMBER());

    case QUANTITY:
      return Double.valueOf(getQUANTITY());

    case EXTENDEDPRICE:
      return Double.valueOf(getEXTENDEDPRICE());

    case DISCOUNT:
      return Double.valueOf(getDISCOUNT());

    case TAX:
      return Double.valueOf(getTAX());

    case RETURNFLAG:
      return getRETURNFLAG();

    case LINESTATUS:
      return getLINESTATUS();

    case SHIPDATE:
      return getSHIPDATE();

    case COMMITDATE:
      return getCOMMITDATE();

    case RECEIPTDATE:
      return getRECEIPTDATE();

    case SHIPINSTRUCT:
      return getSHIPINSTRUCT();

    case SHIPMODE:
      return getSHIPMODE();

    case COMMENT:
      return getCOMMENT();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDERKEY:
      return isSetORDERKEY();
    case PARTKEY:
      return isSetPARTKEY();
    case SUPPKEY:
      return isSetSUPPKEY();
    case LINENUMBER:
      return isSetLINENUMBER();
    case QUANTITY:
      return isSetQUANTITY();
    case EXTENDEDPRICE:
      return isSetEXTENDEDPRICE();
    case DISCOUNT:
      return isSetDISCOUNT();
    case TAX:
      return isSetTAX();
    case RETURNFLAG:
      return isSetRETURNFLAG();
    case LINESTATUS:
      return isSetLINESTATUS();
    case SHIPDATE:
      return isSetSHIPDATE();
    case COMMITDATE:
      return isSetCOMMITDATE();
    case RECEIPTDATE:
      return isSetRECEIPTDATE();
    case SHIPINSTRUCT:
      return isSetSHIPINSTRUCT();
    case SHIPMODE:
      return isSetSHIPMODE();
    case COMMENT:
      return isSetCOMMENT();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineitemTable)
      return this.equals((LineitemTable)that);
    return false;
  }

  public boolean equals(LineitemTable that) {
    if (that == null)
      return false;

    boolean this_present_ORDERKEY = true && this.isSetORDERKEY();
    boolean that_present_ORDERKEY = true && that.isSetORDERKEY();
    if (this_present_ORDERKEY || that_present_ORDERKEY) {
      if (!(this_present_ORDERKEY && that_present_ORDERKEY))
        return false;
      if (this.ORDERKEY != that.ORDERKEY)
        return false;
    }

    boolean this_present_PARTKEY = true && this.isSetPARTKEY();
    boolean that_present_PARTKEY = true && that.isSetPARTKEY();
    if (this_present_PARTKEY || that_present_PARTKEY) {
      if (!(this_present_PARTKEY && that_present_PARTKEY))
        return false;
      if (this.PARTKEY != that.PARTKEY)
        return false;
    }

    boolean this_present_SUPPKEY = true && this.isSetSUPPKEY();
    boolean that_present_SUPPKEY = true && that.isSetSUPPKEY();
    if (this_present_SUPPKEY || that_present_SUPPKEY) {
      if (!(this_present_SUPPKEY && that_present_SUPPKEY))
        return false;
      if (this.SUPPKEY != that.SUPPKEY)
        return false;
    }

    boolean this_present_LINENUMBER = true && this.isSetLINENUMBER();
    boolean that_present_LINENUMBER = true && that.isSetLINENUMBER();
    if (this_present_LINENUMBER || that_present_LINENUMBER) {
      if (!(this_present_LINENUMBER && that_present_LINENUMBER))
        return false;
      if (this.LINENUMBER != that.LINENUMBER)
        return false;
    }

    boolean this_present_QUANTITY = true && this.isSetQUANTITY();
    boolean that_present_QUANTITY = true && that.isSetQUANTITY();
    if (this_present_QUANTITY || that_present_QUANTITY) {
      if (!(this_present_QUANTITY && that_present_QUANTITY))
        return false;
      if (this.QUANTITY != that.QUANTITY)
        return false;
    }

    boolean this_present_EXTENDEDPRICE = true && this.isSetEXTENDEDPRICE();
    boolean that_present_EXTENDEDPRICE = true && that.isSetEXTENDEDPRICE();
    if (this_present_EXTENDEDPRICE || that_present_EXTENDEDPRICE) {
      if (!(this_present_EXTENDEDPRICE && that_present_EXTENDEDPRICE))
        return false;
      if (this.EXTENDEDPRICE != that.EXTENDEDPRICE)
        return false;
    }

    boolean this_present_DISCOUNT = true && this.isSetDISCOUNT();
    boolean that_present_DISCOUNT = true && that.isSetDISCOUNT();
    if (this_present_DISCOUNT || that_present_DISCOUNT) {
      if (!(this_present_DISCOUNT && that_present_DISCOUNT))
        return false;
      if (this.DISCOUNT != that.DISCOUNT)
        return false;
    }

    boolean this_present_TAX = true && this.isSetTAX();
    boolean that_present_TAX = true && that.isSetTAX();
    if (this_present_TAX || that_present_TAX) {
      if (!(this_present_TAX && that_present_TAX))
        return false;
      if (this.TAX != that.TAX)
        return false;
    }

    boolean this_present_RETURNFLAG = true && this.isSetRETURNFLAG();
    boolean that_present_RETURNFLAG = true && that.isSetRETURNFLAG();
    if (this_present_RETURNFLAG || that_present_RETURNFLAG) {
      if (!(this_present_RETURNFLAG && that_present_RETURNFLAG))
        return false;
      if (!this.RETURNFLAG.equals(that.RETURNFLAG))
        return false;
    }

    boolean this_present_LINESTATUS = true && this.isSetLINESTATUS();
    boolean that_present_LINESTATUS = true && that.isSetLINESTATUS();
    if (this_present_LINESTATUS || that_present_LINESTATUS) {
      if (!(this_present_LINESTATUS && that_present_LINESTATUS))
        return false;
      if (!this.LINESTATUS.equals(that.LINESTATUS))
        return false;
    }

    boolean this_present_SHIPDATE = true && this.isSetSHIPDATE();
    boolean that_present_SHIPDATE = true && that.isSetSHIPDATE();
    if (this_present_SHIPDATE || that_present_SHIPDATE) {
      if (!(this_present_SHIPDATE && that_present_SHIPDATE))
        return false;
      if (!this.SHIPDATE.equals(that.SHIPDATE))
        return false;
    }

    boolean this_present_COMMITDATE = true && this.isSetCOMMITDATE();
    boolean that_present_COMMITDATE = true && that.isSetCOMMITDATE();
    if (this_present_COMMITDATE || that_present_COMMITDATE) {
      if (!(this_present_COMMITDATE && that_present_COMMITDATE))
        return false;
      if (!this.COMMITDATE.equals(that.COMMITDATE))
        return false;
    }

    boolean this_present_RECEIPTDATE = true && this.isSetRECEIPTDATE();
    boolean that_present_RECEIPTDATE = true && that.isSetRECEIPTDATE();
    if (this_present_RECEIPTDATE || that_present_RECEIPTDATE) {
      if (!(this_present_RECEIPTDATE && that_present_RECEIPTDATE))
        return false;
      if (!this.RECEIPTDATE.equals(that.RECEIPTDATE))
        return false;
    }

    boolean this_present_SHIPINSTRUCT = true && this.isSetSHIPINSTRUCT();
    boolean that_present_SHIPINSTRUCT = true && that.isSetSHIPINSTRUCT();
    if (this_present_SHIPINSTRUCT || that_present_SHIPINSTRUCT) {
      if (!(this_present_SHIPINSTRUCT && that_present_SHIPINSTRUCT))
        return false;
      if (!this.SHIPINSTRUCT.equals(that.SHIPINSTRUCT))
        return false;
    }

    boolean this_present_SHIPMODE = true && this.isSetSHIPMODE();
    boolean that_present_SHIPMODE = true && that.isSetSHIPMODE();
    if (this_present_SHIPMODE || that_present_SHIPMODE) {
      if (!(this_present_SHIPMODE && that_present_SHIPMODE))
        return false;
      if (!this.SHIPMODE.equals(that.SHIPMODE))
        return false;
    }

    boolean this_present_COMMENT = true && this.isSetCOMMENT();
    boolean that_present_COMMENT = true && that.isSetCOMMENT();
    if (this_present_COMMENT || that_present_COMMENT) {
      if (!(this_present_COMMENT && that_present_COMMENT))
        return false;
      if (!this.COMMENT.equals(that.COMMENT))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ORDERKEY = true && (isSetORDERKEY());
    list.add(present_ORDERKEY);
    if (present_ORDERKEY)
      list.add(ORDERKEY);

    boolean present_PARTKEY = true && (isSetPARTKEY());
    list.add(present_PARTKEY);
    if (present_PARTKEY)
      list.add(PARTKEY);

    boolean present_SUPPKEY = true && (isSetSUPPKEY());
    list.add(present_SUPPKEY);
    if (present_SUPPKEY)
      list.add(SUPPKEY);

    boolean present_LINENUMBER = true && (isSetLINENUMBER());
    list.add(present_LINENUMBER);
    if (present_LINENUMBER)
      list.add(LINENUMBER);

    boolean present_QUANTITY = true && (isSetQUANTITY());
    list.add(present_QUANTITY);
    if (present_QUANTITY)
      list.add(QUANTITY);

    boolean present_EXTENDEDPRICE = true && (isSetEXTENDEDPRICE());
    list.add(present_EXTENDEDPRICE);
    if (present_EXTENDEDPRICE)
      list.add(EXTENDEDPRICE);

    boolean present_DISCOUNT = true && (isSetDISCOUNT());
    list.add(present_DISCOUNT);
    if (present_DISCOUNT)
      list.add(DISCOUNT);

    boolean present_TAX = true && (isSetTAX());
    list.add(present_TAX);
    if (present_TAX)
      list.add(TAX);

    boolean present_RETURNFLAG = true && (isSetRETURNFLAG());
    list.add(present_RETURNFLAG);
    if (present_RETURNFLAG)
      list.add(RETURNFLAG);

    boolean present_LINESTATUS = true && (isSetLINESTATUS());
    list.add(present_LINESTATUS);
    if (present_LINESTATUS)
      list.add(LINESTATUS);

    boolean present_SHIPDATE = true && (isSetSHIPDATE());
    list.add(present_SHIPDATE);
    if (present_SHIPDATE)
      list.add(SHIPDATE);

    boolean present_COMMITDATE = true && (isSetCOMMITDATE());
    list.add(present_COMMITDATE);
    if (present_COMMITDATE)
      list.add(COMMITDATE);

    boolean present_RECEIPTDATE = true && (isSetRECEIPTDATE());
    list.add(present_RECEIPTDATE);
    if (present_RECEIPTDATE)
      list.add(RECEIPTDATE);

    boolean present_SHIPINSTRUCT = true && (isSetSHIPINSTRUCT());
    list.add(present_SHIPINSTRUCT);
    if (present_SHIPINSTRUCT)
      list.add(SHIPINSTRUCT);

    boolean present_SHIPMODE = true && (isSetSHIPMODE());
    list.add(present_SHIPMODE);
    if (present_SHIPMODE)
      list.add(SHIPMODE);

    boolean present_COMMENT = true && (isSetCOMMENT());
    list.add(present_COMMENT);
    if (present_COMMENT)
      list.add(COMMENT);

    return list.hashCode();
  }

  @Override
  public int compareTo(LineitemTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetORDERKEY()).compareTo(other.isSetORDERKEY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetORDERKEY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ORDERKEY, other.ORDERKEY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPARTKEY()).compareTo(other.isSetPARTKEY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPARTKEY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PARTKEY, other.PARTKEY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSUPPKEY()).compareTo(other.isSetSUPPKEY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSUPPKEY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SUPPKEY, other.SUPPKEY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLINENUMBER()).compareTo(other.isSetLINENUMBER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLINENUMBER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LINENUMBER, other.LINENUMBER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQUANTITY()).compareTo(other.isSetQUANTITY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQUANTITY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.QUANTITY, other.QUANTITY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEXTENDEDPRICE()).compareTo(other.isSetEXTENDEDPRICE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEXTENDEDPRICE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXTENDEDPRICE, other.EXTENDEDPRICE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDISCOUNT()).compareTo(other.isSetDISCOUNT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDISCOUNT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DISCOUNT, other.DISCOUNT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTAX()).compareTo(other.isSetTAX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTAX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TAX, other.TAX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRETURNFLAG()).compareTo(other.isSetRETURNFLAG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRETURNFLAG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RETURNFLAG, other.RETURNFLAG);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLINESTATUS()).compareTo(other.isSetLINESTATUS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLINESTATUS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LINESTATUS, other.LINESTATUS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSHIPDATE()).compareTo(other.isSetSHIPDATE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSHIPDATE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SHIPDATE, other.SHIPDATE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCOMMITDATE()).compareTo(other.isSetCOMMITDATE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCOMMITDATE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.COMMITDATE, other.COMMITDATE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRECEIPTDATE()).compareTo(other.isSetRECEIPTDATE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRECEIPTDATE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RECEIPTDATE, other.RECEIPTDATE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSHIPINSTRUCT()).compareTo(other.isSetSHIPINSTRUCT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSHIPINSTRUCT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SHIPINSTRUCT, other.SHIPINSTRUCT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSHIPMODE()).compareTo(other.isSetSHIPMODE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSHIPMODE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SHIPMODE, other.SHIPMODE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCOMMENT()).compareTo(other.isSetCOMMENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCOMMENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.COMMENT, other.COMMENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineitemTable(");
    boolean first = true;

    if (isSetORDERKEY()) {
      sb.append("ORDERKEY:");
      sb.append(this.ORDERKEY);
      first = false;
    }
    if (isSetPARTKEY()) {
      if (!first) sb.append(", ");
      sb.append("PARTKEY:");
      sb.append(this.PARTKEY);
      first = false;
    }
    if (isSetSUPPKEY()) {
      if (!first) sb.append(", ");
      sb.append("SUPPKEY:");
      sb.append(this.SUPPKEY);
      first = false;
    }
    if (isSetLINENUMBER()) {
      if (!first) sb.append(", ");
      sb.append("LINENUMBER:");
      sb.append(this.LINENUMBER);
      first = false;
    }
    if (isSetQUANTITY()) {
      if (!first) sb.append(", ");
      sb.append("QUANTITY:");
      sb.append(this.QUANTITY);
      first = false;
    }
    if (isSetEXTENDEDPRICE()) {
      if (!first) sb.append(", ");
      sb.append("EXTENDEDPRICE:");
      sb.append(this.EXTENDEDPRICE);
      first = false;
    }
    if (isSetDISCOUNT()) {
      if (!first) sb.append(", ");
      sb.append("DISCOUNT:");
      sb.append(this.DISCOUNT);
      first = false;
    }
    if (isSetTAX()) {
      if (!first) sb.append(", ");
      sb.append("TAX:");
      sb.append(this.TAX);
      first = false;
    }
    if (isSetRETURNFLAG()) {
      if (!first) sb.append(", ");
      sb.append("RETURNFLAG:");
      if (this.RETURNFLAG == null) {
        sb.append("null");
      } else {
        sb.append(this.RETURNFLAG);
      }
      first = false;
    }
    if (isSetLINESTATUS()) {
      if (!first) sb.append(", ");
      sb.append("LINESTATUS:");
      if (this.LINESTATUS == null) {
        sb.append("null");
      } else {
        sb.append(this.LINESTATUS);
      }
      first = false;
    }
    if (isSetSHIPDATE()) {
      if (!first) sb.append(", ");
      sb.append("SHIPDATE:");
      if (this.SHIPDATE == null) {
        sb.append("null");
      } else {
        sb.append(this.SHIPDATE);
      }
      first = false;
    }
    if (isSetCOMMITDATE()) {
      if (!first) sb.append(", ");
      sb.append("COMMITDATE:");
      if (this.COMMITDATE == null) {
        sb.append("null");
      } else {
        sb.append(this.COMMITDATE);
      }
      first = false;
    }
    if (isSetRECEIPTDATE()) {
      if (!first) sb.append(", ");
      sb.append("RECEIPTDATE:");
      if (this.RECEIPTDATE == null) {
        sb.append("null");
      } else {
        sb.append(this.RECEIPTDATE);
      }
      first = false;
    }
    if (isSetSHIPINSTRUCT()) {
      if (!first) sb.append(", ");
      sb.append("SHIPINSTRUCT:");
      if (this.SHIPINSTRUCT == null) {
        sb.append("null");
      } else {
        sb.append(this.SHIPINSTRUCT);
      }
      first = false;
    }
    if (isSetSHIPMODE()) {
      if (!first) sb.append(", ");
      sb.append("SHIPMODE:");
      if (this.SHIPMODE == null) {
        sb.append("null");
      } else {
        sb.append(this.SHIPMODE);
      }
      first = false;
    }
    if (isSetCOMMENT()) {
      if (!first) sb.append(", ");
      sb.append("COMMENT:");
      if (this.COMMENT == null) {
        sb.append("null");
      } else {
        sb.append(this.COMMENT);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineitemTableStandardSchemeFactory implements SchemeFactory {
    public LineitemTableStandardScheme getScheme() {
      return new LineitemTableStandardScheme();
    }
  }

  private static class LineitemTableStandardScheme extends StandardScheme<LineitemTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LineitemTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDERKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ORDERKEY = iprot.readI64();
              struct.setORDERKEYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.PARTKEY = iprot.readI64();
              struct.setPARTKEYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUPPKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.SUPPKEY = iprot.readI64();
              struct.setSUPPKEYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINENUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.LINENUMBER = iprot.readI64();
              struct.setLINENUMBERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.QUANTITY = iprot.readDouble();
              struct.setQUANTITYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTENDEDPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.EXTENDEDPRICE = iprot.readDouble();
              struct.setEXTENDEDPRICEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.DISCOUNT = iprot.readDouble();
              struct.setDISCOUNTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TAX = iprot.readDouble();
              struct.setTAXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RETURNFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RETURNFLAG = iprot.readString();
              struct.setRETURNFLAGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LINESTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LINESTATUS = iprot.readString();
              struct.setLINESTATUSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHIPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SHIPDATE = iprot.readString();
              struct.setSHIPDATEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMITDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.COMMITDATE = iprot.readString();
              struct.setCOMMITDATEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RECEIPTDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RECEIPTDATE = iprot.readString();
              struct.setRECEIPTDATEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHIPINSTRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SHIPINSTRUCT = iprot.readString();
              struct.setSHIPINSTRUCTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHIPMODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SHIPMODE = iprot.readString();
              struct.setSHIPMODEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.COMMENT = iprot.readString();
              struct.setCOMMENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LineitemTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetORDERKEY()) {
        oprot.writeFieldBegin(ORDERKEY_FIELD_DESC);
        oprot.writeI64(struct.ORDERKEY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPARTKEY()) {
        oprot.writeFieldBegin(PARTKEY_FIELD_DESC);
        oprot.writeI64(struct.PARTKEY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSUPPKEY()) {
        oprot.writeFieldBegin(SUPPKEY_FIELD_DESC);
        oprot.writeI64(struct.SUPPKEY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLINENUMBER()) {
        oprot.writeFieldBegin(LINENUMBER_FIELD_DESC);
        oprot.writeI64(struct.LINENUMBER);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQUANTITY()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeDouble(struct.QUANTITY);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEXTENDEDPRICE()) {
        oprot.writeFieldBegin(EXTENDEDPRICE_FIELD_DESC);
        oprot.writeDouble(struct.EXTENDEDPRICE);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDISCOUNT()) {
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.DISCOUNT);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTAX()) {
        oprot.writeFieldBegin(TAX_FIELD_DESC);
        oprot.writeDouble(struct.TAX);
        oprot.writeFieldEnd();
      }
      if (struct.RETURNFLAG != null) {
        if (struct.isSetRETURNFLAG()) {
          oprot.writeFieldBegin(RETURNFLAG_FIELD_DESC);
          oprot.writeString(struct.RETURNFLAG);
          oprot.writeFieldEnd();
        }
      }
      if (struct.LINESTATUS != null) {
        if (struct.isSetLINESTATUS()) {
          oprot.writeFieldBegin(LINESTATUS_FIELD_DESC);
          oprot.writeString(struct.LINESTATUS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SHIPDATE != null) {
        if (struct.isSetSHIPDATE()) {
          oprot.writeFieldBegin(SHIPDATE_FIELD_DESC);
          oprot.writeString(struct.SHIPDATE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.COMMITDATE != null) {
        if (struct.isSetCOMMITDATE()) {
          oprot.writeFieldBegin(COMMITDATE_FIELD_DESC);
          oprot.writeString(struct.COMMITDATE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.RECEIPTDATE != null) {
        if (struct.isSetRECEIPTDATE()) {
          oprot.writeFieldBegin(RECEIPTDATE_FIELD_DESC);
          oprot.writeString(struct.RECEIPTDATE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SHIPINSTRUCT != null) {
        if (struct.isSetSHIPINSTRUCT()) {
          oprot.writeFieldBegin(SHIPINSTRUCT_FIELD_DESC);
          oprot.writeString(struct.SHIPINSTRUCT);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SHIPMODE != null) {
        if (struct.isSetSHIPMODE()) {
          oprot.writeFieldBegin(SHIPMODE_FIELD_DESC);
          oprot.writeString(struct.SHIPMODE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.COMMENT != null) {
        if (struct.isSetCOMMENT()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.COMMENT);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineitemTableTupleSchemeFactory implements SchemeFactory {
    public LineitemTableTupleScheme getScheme() {
      return new LineitemTableTupleScheme();
    }
  }

  private static class LineitemTableTupleScheme extends TupleScheme<LineitemTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LineitemTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetORDERKEY()) {
        optionals.set(0);
      }
      if (struct.isSetPARTKEY()) {
        optionals.set(1);
      }
      if (struct.isSetSUPPKEY()) {
        optionals.set(2);
      }
      if (struct.isSetLINENUMBER()) {
        optionals.set(3);
      }
      if (struct.isSetQUANTITY()) {
        optionals.set(4);
      }
      if (struct.isSetEXTENDEDPRICE()) {
        optionals.set(5);
      }
      if (struct.isSetDISCOUNT()) {
        optionals.set(6);
      }
      if (struct.isSetTAX()) {
        optionals.set(7);
      }
      if (struct.isSetRETURNFLAG()) {
        optionals.set(8);
      }
      if (struct.isSetLINESTATUS()) {
        optionals.set(9);
      }
      if (struct.isSetSHIPDATE()) {
        optionals.set(10);
      }
      if (struct.isSetCOMMITDATE()) {
        optionals.set(11);
      }
      if (struct.isSetRECEIPTDATE()) {
        optionals.set(12);
      }
      if (struct.isSetSHIPINSTRUCT()) {
        optionals.set(13);
      }
      if (struct.isSetSHIPMODE()) {
        optionals.set(14);
      }
      if (struct.isSetCOMMENT()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetORDERKEY()) {
        oprot.writeI64(struct.ORDERKEY);
      }
      if (struct.isSetPARTKEY()) {
        oprot.writeI64(struct.PARTKEY);
      }
      if (struct.isSetSUPPKEY()) {
        oprot.writeI64(struct.SUPPKEY);
      }
      if (struct.isSetLINENUMBER()) {
        oprot.writeI64(struct.LINENUMBER);
      }
      if (struct.isSetQUANTITY()) {
        oprot.writeDouble(struct.QUANTITY);
      }
      if (struct.isSetEXTENDEDPRICE()) {
        oprot.writeDouble(struct.EXTENDEDPRICE);
      }
      if (struct.isSetDISCOUNT()) {
        oprot.writeDouble(struct.DISCOUNT);
      }
      if (struct.isSetTAX()) {
        oprot.writeDouble(struct.TAX);
      }
      if (struct.isSetRETURNFLAG()) {
        oprot.writeString(struct.RETURNFLAG);
      }
      if (struct.isSetLINESTATUS()) {
        oprot.writeString(struct.LINESTATUS);
      }
      if (struct.isSetSHIPDATE()) {
        oprot.writeString(struct.SHIPDATE);
      }
      if (struct.isSetCOMMITDATE()) {
        oprot.writeString(struct.COMMITDATE);
      }
      if (struct.isSetRECEIPTDATE()) {
        oprot.writeString(struct.RECEIPTDATE);
      }
      if (struct.isSetSHIPINSTRUCT()) {
        oprot.writeString(struct.SHIPINSTRUCT);
      }
      if (struct.isSetSHIPMODE()) {
        oprot.writeString(struct.SHIPMODE);
      }
      if (struct.isSetCOMMENT()) {
        oprot.writeString(struct.COMMENT);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LineitemTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.ORDERKEY = iprot.readI64();
        struct.setORDERKEYIsSet(true);
      }
      if (incoming.get(1)) {
        struct.PARTKEY = iprot.readI64();
        struct.setPARTKEYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.SUPPKEY = iprot.readI64();
        struct.setSUPPKEYIsSet(true);
      }
      if (incoming.get(3)) {
        struct.LINENUMBER = iprot.readI64();
        struct.setLINENUMBERIsSet(true);
      }
      if (incoming.get(4)) {
        struct.QUANTITY = iprot.readDouble();
        struct.setQUANTITYIsSet(true);
      }
      if (incoming.get(5)) {
        struct.EXTENDEDPRICE = iprot.readDouble();
        struct.setEXTENDEDPRICEIsSet(true);
      }
      if (incoming.get(6)) {
        struct.DISCOUNT = iprot.readDouble();
        struct.setDISCOUNTIsSet(true);
      }
      if (incoming.get(7)) {
        struct.TAX = iprot.readDouble();
        struct.setTAXIsSet(true);
      }
      if (incoming.get(8)) {
        struct.RETURNFLAG = iprot.readString();
        struct.setRETURNFLAGIsSet(true);
      }
      if (incoming.get(9)) {
        struct.LINESTATUS = iprot.readString();
        struct.setLINESTATUSIsSet(true);
      }
      if (incoming.get(10)) {
        struct.SHIPDATE = iprot.readString();
        struct.setSHIPDATEIsSet(true);
      }
      if (incoming.get(11)) {
        struct.COMMITDATE = iprot.readString();
        struct.setCOMMITDATEIsSet(true);
      }
      if (incoming.get(12)) {
        struct.RECEIPTDATE = iprot.readString();
        struct.setRECEIPTDATEIsSet(true);
      }
      if (incoming.get(13)) {
        struct.SHIPINSTRUCT = iprot.readString();
        struct.setSHIPINSTRUCTIsSet(true);
      }
      if (incoming.get(14)) {
        struct.SHIPMODE = iprot.readString();
        struct.setSHIPMODEIsSet(true);
      }
      if (incoming.get(15)) {
        struct.COMMENT = iprot.readString();
        struct.setCOMMENTIsSet(true);
      }
    }
  }

}

